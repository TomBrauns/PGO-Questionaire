define(['dart_sdk', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/gradient.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/rendering/custom_paint.dart'], (function load__packages__percent_indicator__linear_percent_indicator_dart(dart_sdk, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__gradient$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__rendering__custom_paint$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const automatic_keep_alive = packages__flutter__src__widgets__widget_span$46dart.src__widgets__automatic_keep_alive;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const material = packages__flutter__src__material__icon_button$46dart.src__material__material;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  var linear_percent_indicator = Object.create(dart.library);
  var $add = dartx.add;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    StateOfStatefulWidget: () => (T.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T.StateOfStatefulWidget())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    AnimationStatusTovoid: () => (T.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    ListOfWidget: () => (T.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: linear_percent_indicator.LinearStrokeCap.prototype,
        [_name$]: "LinearStrokeCap.butt",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: linear_percent_indicator.LinearStrokeCap.prototype,
        [_name$]: "LinearStrokeCap.round",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: linear_percent_indicator.LinearStrokeCap.prototype,
        [_name$]: "LinearStrokeCap.roundAll",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], linear_percent_indicator.LinearStrokeCap);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 10,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 10
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: flex.MainAxisAlignment.prototype,
        [_name]: "MainAxisAlignment.start",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 26,
        [_Location_line]: 263,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10], widget_inspector._Location);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[9] || CT.C9,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 263,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C12() {
      return C[12] = dart.constList([], widget_inspector._Location);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[12] || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 264,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 13,
        [_Location_line]: 248,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 249,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 262,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.constList([C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17], widget_inspector._Location);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[14] || CT.C14,
        [_Location_name]: null,
        [_Location_column]: 11,
        [_Location_line]: 247,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 15,
        [_Location_line]: 268,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 15,
        [_Location_line]: 269,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 270,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.constList([C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22], widget_inspector._Location);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[19] || CT.C19,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 267,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 15,
        [_Location_line]: 276,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 15,
        [_Location_line]: 277,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 15,
        [_Location_line]: 278,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 279,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.constList([C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28], widget_inspector._Location);
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[24] || CT.C24,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 275,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 9,
        [_Location_line]: 245,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 246,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32], widget_inspector._Location);
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[30] || CT.C30,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 244,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 241,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 242,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 243,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 244,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.constList([C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38], widget_inspector._Location);
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[34] || CT.C34,
        [_Location_name]: null,
        [_Location_column]: 27,
        [_Location_line]: 240,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 289,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.constList([C[41] || CT.C41], widget_inspector._Location);
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[40] || CT.C40,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 288,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 301,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 302,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 303,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.constList([C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46], widget_inspector._Location);
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[43] || CT.C43,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 300,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 299,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 300,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.constList([C[49] || CT.C49, C[50] || CT.C50], widget_inspector._Location);
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[48] || CT.C48,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 298,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 7,
        [_Location_line]: 297,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 298,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.constList([C[53] || CT.C53, C[54] || CT.C54], widget_inspector._Location);
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[52] || CT.C52,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 296,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart"
      });
    }
  }, false);
  var C = Array(55).fill(void 0);
  var I = [
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/percent_indicator-3.0.1/lib/linear_percent_indicator.dart",
    "package:percent_indicator/linear_percent_indicator.dart"
  ];
  var _name$ = dart.privateName(linear_percent_indicator, "_name");
  linear_percent_indicator.LinearStrokeCap = class LinearStrokeCap extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (linear_percent_indicator.LinearStrokeCap.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 3, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = linear_percent_indicator.LinearStrokeCap.prototype;
  dart.addTypeTests(linear_percent_indicator.LinearStrokeCap);
  dart.addTypeCaches(linear_percent_indicator.LinearStrokeCap);
  dart.setLibraryUri(linear_percent_indicator.LinearStrokeCap, I[1]);
  dart.setFieldSignature(linear_percent_indicator.LinearStrokeCap, () => ({
    __proto__: dart.getFields(linear_percent_indicator.LinearStrokeCap.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(linear_percent_indicator.LinearStrokeCap, ['toString']);
  linear_percent_indicator.LinearStrokeCap.butt = C[0] || CT.C0;
  linear_percent_indicator.LinearStrokeCap.round = C[1] || CT.C1;
  linear_percent_indicator.LinearStrokeCap.roundAll = C[2] || CT.C2;
  linear_percent_indicator.LinearStrokeCap.values = C[3] || CT.C3;
  var percent$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.percent");
  var width$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.width");
  var lineHeight$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.lineHeight");
  var fillColor$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.fillColor");
  var linearGradientBackgroundColor$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.linearGradientBackgroundColor");
  var animation$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.animation");
  var animationDuration$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.animationDuration");
  var leading$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.leading");
  var trailing$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.trailing");
  var center$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.center");
  var linearStrokeCap$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.linearStrokeCap");
  var alignment$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.alignment");
  var padding$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.padding");
  var animateFromLastPercent$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.animateFromLastPercent");
  var linearGradient$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.linearGradient");
  var addAutomaticKeepAlive$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.addAutomaticKeepAlive");
  var isRTL$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.isRTL");
  var maskFilter$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.maskFilter");
  var clipLinearGradient$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.clipLinearGradient");
  var curve$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.curve");
  var restartAnimation$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.restartAnimation");
  var onAnimationEnd$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.onAnimationEnd");
  var widgetIndicator$ = dart.privateName(linear_percent_indicator, "LinearPercentIndicator.widgetIndicator");
  var Color_value = dart.privateName(ui, "Color.value");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _name = dart.privateName(flex, "_name");
  var __LinearPercentIndicator__backgroundColor = dart.privateName(linear_percent_indicator, "_#LinearPercentIndicator#_backgroundColor");
  var __LinearPercentIndicator__progressColor = dart.privateName(linear_percent_indicator, "_#LinearPercentIndicator#_progressColor");
  var _progressColor = dart.privateName(linear_percent_indicator, "_progressColor");
  var _backgroundColor = dart.privateName(linear_percent_indicator, "_backgroundColor");
  linear_percent_indicator.LinearPercentIndicator = class LinearPercentIndicator extends framework.StatefulWidget {
    get percent() {
      return this[percent$];
    }
    set percent(value) {
      super.percent = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get fillColor() {
      return this[fillColor$];
    }
    set fillColor(value) {
      super.fillColor = value;
    }
    get linearGradientBackgroundColor() {
      return this[linearGradientBackgroundColor$];
    }
    set linearGradientBackgroundColor(value) {
      super.linearGradientBackgroundColor = value;
    }
    get animation() {
      return this[animation$];
    }
    set animation(value) {
      super.animation = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get leading() {
      return this[leading$];
    }
    set leading(value) {
      super.leading = value;
    }
    get trailing() {
      return this[trailing$];
    }
    set trailing(value) {
      super.trailing = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get linearStrokeCap() {
      return this[linearStrokeCap$];
    }
    set linearStrokeCap(value) {
      super.linearStrokeCap = value;
    }
    get alignment() {
      return this[alignment$];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get animateFromLastPercent() {
      return this[animateFromLastPercent$];
    }
    set animateFromLastPercent(value) {
      super.animateFromLastPercent = value;
    }
    get linearGradient() {
      return this[linearGradient$];
    }
    set linearGradient(value) {
      super.linearGradient = value;
    }
    get addAutomaticKeepAlive() {
      return this[addAutomaticKeepAlive$];
    }
    set addAutomaticKeepAlive(value) {
      super.addAutomaticKeepAlive = value;
    }
    get isRTL() {
      return this[isRTL$];
    }
    set isRTL(value) {
      super.isRTL = value;
    }
    get maskFilter() {
      return this[maskFilter$];
    }
    set maskFilter(value) {
      super.maskFilter = value;
    }
    get clipLinearGradient() {
      return this[clipLinearGradient$];
    }
    set clipLinearGradient(value) {
      super.clipLinearGradient = value;
    }
    get curve() {
      return this[curve$];
    }
    set curve(value) {
      super.curve = value;
    }
    get restartAnimation() {
      return this[restartAnimation$];
    }
    set restartAnimation(value) {
      super.restartAnimation = value;
    }
    get onAnimationEnd() {
      return this[onAnimationEnd$];
    }
    set onAnimationEnd(value) {
      super.onAnimationEnd = value;
    }
    get widgetIndicator() {
      return this[widgetIndicator$];
    }
    set widgetIndicator(value) {
      super.widgetIndicator = value;
    }
    get backgroundColor() {
      return this[_backgroundColor];
    }
    get [_backgroundColor]() {
      let t0;
      t0 = this[__LinearPercentIndicator__backgroundColor];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_backgroundColor")) : t0;
    }
    set [_backgroundColor](t0) {
      if (t0 == null) dart.nullFailed(I[0], 19, 14, "null");
      this[__LinearPercentIndicator__backgroundColor] = t0;
    }
    get progressColor() {
      return this[_progressColor];
    }
    get [_progressColor]() {
      let t1;
      t1 = this[__LinearPercentIndicator__progressColor];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_progressColor")) : t1;
    }
    set [_progressColor](t1) {
      if (t1 == null) dart.nullFailed(I[0], 26, 14, "null");
      this[__LinearPercentIndicator__progressColor] = t1;
    }
    createState() {
      return new linear_percent_indicator._LinearPercentIndicatorState.new();
    }
  };
  (linear_percent_indicator.LinearPercentIndicator.new = function(opts) {
    let t0, t0$;
    let key = opts && 'key' in opts ? opts.key : null;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : C[4] || CT.C4;
    if (fillColor == null) dart.nullFailed(I[0], 88, 10, "fillColor");
    let percent = opts && 'percent' in opts ? opts.percent : 0;
    if (percent == null) dart.nullFailed(I[0], 89, 10, "percent");
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : 5;
    if (lineHeight == null) dart.nullFailed(I[0], 90, 10, "lineHeight");
    let width = opts && 'width' in opts ? opts.width : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let linearGradientBackgroundColor = opts && 'linearGradientBackgroundColor' in opts ? opts.linearGradientBackgroundColor : null;
    let linearGradient = opts && 'linearGradient' in opts ? opts.linearGradient : null;
    let progressColor = opts && 'progressColor' in opts ? opts.progressColor : null;
    let animation = opts && 'animation' in opts ? opts.animation : false;
    if (animation == null) dart.nullFailed(I[0], 96, 10, "animation");
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : 500;
    if (animationDuration == null) dart.nullFailed(I[0], 97, 10, "animationDuration");
    let animateFromLastPercent = opts && 'animateFromLastPercent' in opts ? opts.animateFromLastPercent : false;
    if (animateFromLastPercent == null) dart.nullFailed(I[0], 98, 10, "animateFromLastPercent");
    let isRTL = opts && 'isRTL' in opts ? opts.isRTL : false;
    if (isRTL == null) dart.nullFailed(I[0], 99, 10, "isRTL");
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let trailing = opts && 'trailing' in opts ? opts.trailing : null;
    let center = opts && 'center' in opts ? opts.center : null;
    let addAutomaticKeepAlive = opts && 'addAutomaticKeepAlive' in opts ? opts.addAutomaticKeepAlive : true;
    if (addAutomaticKeepAlive == null) dart.nullFailed(I[0], 103, 10, "addAutomaticKeepAlive");
    let linearStrokeCap = opts && 'linearStrokeCap' in opts ? opts.linearStrokeCap : null;
    let padding = opts && 'padding' in opts ? opts.padding : C[5] || CT.C5;
    if (padding == null) dart.nullFailed(I[0], 105, 10, "padding");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[6] || CT.C6;
    if (alignment == null) dart.nullFailed(I[0], 106, 10, "alignment");
    let maskFilter = opts && 'maskFilter' in opts ? opts.maskFilter : null;
    let clipLinearGradient = opts && 'clipLinearGradient' in opts ? opts.clipLinearGradient : false;
    if (clipLinearGradient == null) dart.nullFailed(I[0], 108, 10, "clipLinearGradient");
    let curve = opts && 'curve' in opts ? opts.curve : C[7] || CT.C7;
    if (curve == null) dart.nullFailed(I[0], 109, 10, "curve");
    let restartAnimation = opts && 'restartAnimation' in opts ? opts.restartAnimation : false;
    if (restartAnimation == null) dart.nullFailed(I[0], 110, 10, "restartAnimation");
    let onAnimationEnd = opts && 'onAnimationEnd' in opts ? opts.onAnimationEnd : null;
    let widgetIndicator = opts && 'widgetIndicator' in opts ? opts.widgetIndicator : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[__LinearPercentIndicator__backgroundColor] = null;
    this[__LinearPercentIndicator__progressColor] = null;
    this[fillColor$] = fillColor;
    this[percent$] = percent;
    this[lineHeight$] = lineHeight;
    this[width$] = width;
    this[linearGradientBackgroundColor$] = linearGradientBackgroundColor;
    this[linearGradient$] = linearGradient;
    this[animation$] = animation;
    this[animationDuration$] = animationDuration;
    this[animateFromLastPercent$] = animateFromLastPercent;
    this[isRTL$] = isRTL;
    this[leading$] = leading;
    this[trailing$] = trailing;
    this[center$] = center;
    this[addAutomaticKeepAlive$] = addAutomaticKeepAlive;
    this[linearStrokeCap$] = linearStrokeCap;
    this[padding$] = padding;
    this[alignment$] = alignment;
    this[maskFilter$] = maskFilter;
    this[clipLinearGradient$] = clipLinearGradient;
    this[curve$] = curve;
    this[restartAnimation$] = restartAnimation;
    this[onAnimationEnd$] = onAnimationEnd;
    this[widgetIndicator$] = widgetIndicator;
    linear_percent_indicator.LinearPercentIndicator.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    if (this.linearGradient != null && progressColor != null) {
      dart.throw(new core.ArgumentError.new("Cannot provide both linearGradient and progressColor"));
    }
    this[_progressColor] = (t0 = progressColor, t0 == null ? colors.Colors.red : t0);
    if (this.linearGradientBackgroundColor != null && backgroundColor != null) {
      dart.throw(new core.ArgumentError.new("Cannot provide both linearGradientBackgroundColor and backgroundColor"));
    }
    this[_backgroundColor] = (t0$ = backgroundColor, t0$ == null ? new ui.Color.new(4290299851) : t0$);
    if (dart.notNull(this.percent) < 0.0 || dart.notNull(this.percent) > 1.0) {
      dart.throw(core.Exception.new("Percent value must be a double between 0.0 and 1.0"));
    }
  }).prototype = linear_percent_indicator.LinearPercentIndicator.prototype;
  dart.addTypeTests(linear_percent_indicator.LinearPercentIndicator);
  dart.addTypeCaches(linear_percent_indicator.LinearPercentIndicator);
  dart.setMethodSignature(linear_percent_indicator.LinearPercentIndicator, () => ({
    __proto__: dart.getMethods(linear_percent_indicator.LinearPercentIndicator.__proto__),
    createState: dart.fnType(linear_percent_indicator._LinearPercentIndicatorState, [])
  }));
  dart.setGetterSignature(linear_percent_indicator.LinearPercentIndicator, () => ({
    __proto__: dart.getGetters(linear_percent_indicator.LinearPercentIndicator.__proto__),
    backgroundColor: ui.Color,
    [_backgroundColor]: ui.Color,
    progressColor: ui.Color,
    [_progressColor]: ui.Color
  }));
  dart.setSetterSignature(linear_percent_indicator.LinearPercentIndicator, () => ({
    __proto__: dart.getSetters(linear_percent_indicator.LinearPercentIndicator.__proto__),
    [_backgroundColor]: ui.Color,
    [_progressColor]: ui.Color
  }));
  dart.setLibraryUri(linear_percent_indicator.LinearPercentIndicator, I[1]);
  dart.setFieldSignature(linear_percent_indicator.LinearPercentIndicator, () => ({
    __proto__: dart.getFields(linear_percent_indicator.LinearPercentIndicator.__proto__),
    percent: dart.finalFieldType(core.double),
    width: dart.finalFieldType(dart.nullable(core.double)),
    lineHeight: dart.finalFieldType(core.double),
    fillColor: dart.finalFieldType(ui.Color),
    [__LinearPercentIndicator__backgroundColor]: dart.fieldType(dart.nullable(ui.Color)),
    linearGradientBackgroundColor: dart.finalFieldType(dart.nullable(gradient.LinearGradient)),
    [__LinearPercentIndicator__progressColor]: dart.fieldType(dart.nullable(ui.Color)),
    animation: dart.finalFieldType(core.bool),
    animationDuration: dart.finalFieldType(core.int),
    leading: dart.finalFieldType(dart.nullable(framework.Widget)),
    trailing: dart.finalFieldType(dart.nullable(framework.Widget)),
    center: dart.finalFieldType(dart.nullable(framework.Widget)),
    linearStrokeCap: dart.finalFieldType(dart.nullable(linear_percent_indicator.LinearStrokeCap)),
    alignment: dart.finalFieldType(flex.MainAxisAlignment),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    animateFromLastPercent: dart.finalFieldType(core.bool),
    linearGradient: dart.finalFieldType(dart.nullable(gradient.LinearGradient)),
    addAutomaticKeepAlive: dart.finalFieldType(core.bool),
    isRTL: dart.finalFieldType(core.bool),
    maskFilter: dart.finalFieldType(dart.nullable(ui.MaskFilter)),
    clipLinearGradient: dart.finalFieldType(core.bool),
    curve: dart.finalFieldType(curves.Curve),
    restartAnimation: dart.finalFieldType(core.bool),
    onAnimationEnd: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    widgetIndicator: dart.finalFieldType(dart.nullable(framework.Widget))
  }));
  var _animationController = dart.privateName(linear_percent_indicator, "_animationController");
  var _animation = dart.privateName(linear_percent_indicator, "_animation");
  var _percent = dart.privateName(linear_percent_indicator, "_percent");
  var _containerKey = dart.privateName(linear_percent_indicator, "_containerKey");
  var _keyIndicator = dart.privateName(linear_percent_indicator, "_keyIndicator");
  var _containerWidth = dart.privateName(linear_percent_indicator, "_containerWidth");
  var _containerHeight = dart.privateName(linear_percent_indicator, "_containerHeight");
  var _indicatorWidth = dart.privateName(linear_percent_indicator, "_indicatorWidth");
  var _indicatorHeight = dart.privateName(linear_percent_indicator, "_indicatorHeight");
  var _updateProgress = dart.privateName(linear_percent_indicator, "_updateProgress");
  var _checkIfNeedCancelAnimation = dart.privateName(linear_percent_indicator, "_checkIfNeedCancelAnimation");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(linear_percent_indicator.LinearPercentIndicator) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(linear_percent_indicator.LinearPercentIndicator)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(linear_percent_indicator.LinearPercentIndicator));
  const State_AutomaticKeepAliveClientMixin$36 = class State_AutomaticKeepAliveClientMixin extends State_SingleTickerProviderStateMixin$36 {};
  (State_AutomaticKeepAliveClientMixin$36.new = function() {
    automatic_keep_alive.AutomaticKeepAliveClientMixin$(linear_percent_indicator.LinearPercentIndicator)[dart.mixinNew].call(this);
    State_AutomaticKeepAliveClientMixin$36.__proto__.new.call(this);
  }).prototype = State_AutomaticKeepAliveClientMixin$36.prototype;
  dart.applyMixin(State_AutomaticKeepAliveClientMixin$36, automatic_keep_alive.AutomaticKeepAliveClientMixin$(linear_percent_indicator.LinearPercentIndicator));
  linear_percent_indicator._LinearPercentIndicatorState = class _LinearPercentIndicatorState extends State_AutomaticKeepAliveClientMixin$36 {
    dispose() {
      let t2;
      t2 = this[_animationController];
      t2 == null ? null : t2.dispose();
      super.dispose();
    }
    initState() {
      let t2, t2$;
      t2 = binding.WidgetsBinding.instance;
      t2 == null ? null : t2.addPostFrameCallback(dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[0], 155, 52, "_");
        if (dart.test(this.mounted)) {
          this.setState(dart.fn(() => {
            let t4, t3, t3$, t4$, t3$0, t3$1, t4$0, t3$2, t3$3, t4$1, t3$4, t3$5;
            this[_containerWidth] = (t3$ = (t3 = this[_containerKey].currentContext, t3 == null ? null : (t4 = t3.size, t4 == null ? null : t4.width)), t3$ == null ? 0.0 : t3$);
            this[_containerHeight] = (t3$1 = (t3$0 = this[_containerKey].currentContext, t3$0 == null ? null : (t4$ = t3$0.size, t4$ == null ? null : t4$.height)), t3$1 == null ? 0.0 : t3$1);
            if (this[_keyIndicator].currentContext != null) {
              this[_indicatorWidth] = (t3$3 = (t3$2 = this[_keyIndicator].currentContext, t3$2 == null ? null : (t4$0 = t3$2.size, t4$0 == null ? null : t4$0.width)), t3$3 == null ? 0.0 : t3$3);
              this[_indicatorHeight] = (t3$5 = (t3$4 = this[_keyIndicator].currentContext, t3$4 == null ? null : (t4$1 = t3$4.size, t4$1 == null ? null : t4$1.height)), t3$5 == null ? 0.0 : t3$5);
            }
          }, T.VoidTovoid()));
        }
      }, T.DurationTovoid()));
      if (dart.test(this.widget.animation)) {
        this[_animationController] = new animation_controller.AnimationController.new({vsync: this, duration: new core.Duration.new({milliseconds: this.widget.animationDuration})});
        this[_animation] = (t2$ = new (T.TweenOfdouble()).new({begin: 0.0, end: this.widget.percent}).animate(new animations.CurvedAnimation.new({parent: dart.nullCheck(this[_animationController]), curve: this.widget.curve})), (() => {
          t2$.addListener(dart.fn(() => {
            this.setState(dart.fn(() => {
              this[_percent] = core.double.as(dart.nullCheck(this[_animation]).value);
            }, T.VoidTovoid()));
            if (dart.test(this.widget.restartAnimation) && this[_percent] === 1.0) {
              dart.nullCheck(this[_animationController]).repeat({min: 0.0, max: 1.0});
            }
          }, T.VoidTovoid()));
          return t2$;
        })());
        dart.nullCheck(this[_animationController]).addStatusListener(dart.fn(status => {
          if (status == null) dart.nullFailed(I[0], 182, 48, "status");
          if (this.widget.onAnimationEnd != null && status == animation.AnimationStatus.completed) {
            dart.nullCheck(this.widget.onAnimationEnd)();
          }
        }, T.AnimationStatusTovoid()));
        dart.nullCheck(this[_animationController]).forward();
      } else {
        this[_updateProgress]();
      }
      super.initState();
    }
    [_checkIfNeedCancelAnimation](oldWidget) {
      if (oldWidget == null) dart.nullFailed(I[0], 195, 59, "oldWidget");
      if (dart.test(oldWidget.animation) && !dart.test(this.widget.animation) && this[_animationController] != null) {
        dart.nullCheck(this[_animationController]).stop();
      }
    }
    didUpdateWidget(oldWidget) {
      linear_percent_indicator.LinearPercentIndicator.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[0], 204, 47, "oldWidget");
      super.didUpdateWidget(oldWidget);
      if (oldWidget.percent != this.widget.percent) {
        if (this[_animationController] != null) {
          dart.nullCheck(this[_animationController]).duration = new core.Duration.new({milliseconds: this.widget.animationDuration});
          this[_animation] = new (T.TweenOfdouble()).new({begin: dart.test(this.widget.animateFromLastPercent) ? oldWidget.percent : 0.0, end: this.widget.percent}).animate(new animations.CurvedAnimation.new({parent: dart.nullCheck(this[_animationController]), curve: this.widget.curve}));
          dart.nullCheck(this[_animationController]).forward({from: 0.0});
        } else {
          this[_updateProgress]();
        }
      }
      this[_checkIfNeedCancelAnimation](oldWidget);
    }
    [_updateProgress]() {
      this.setState(dart.fn(() => {
        this[_percent] = this.widget.percent;
      }, T.VoidTovoid()));
    }
    build(context) {
      if (context == null) dart.nullFailed(I[0], 231, 29, "context");
      super.build(context);
      let items = T.ListOfWidget().empty({growable: true});
      if (this.widget.leading != null) {
        items[$add](dart.nullCheck(this.widget.leading));
      }
      let hasSetWidth = this.widget.width != null;
      let percentPositionedHorizontal = dart.notNull(this[_containerWidth]) * dart.notNull(this[_percent]) - dart.notNull(this[_indicatorWidth]) / 3;
      let containerWidget = new container.Container.new({width: hasSetWidth ? this.widget.width : 1 / 0, height: this.widget.lineHeight, padding: this.widget.padding, child: new basic.Stack.new({clipBehavior: ui.Clip.none, children: (() => {
            let t2 = T.JSArrayOfWidget().of([new basic.CustomPaint.new({key: this[_containerKey], painter: new linear_percent_indicator.LinearPainter.new({isRTL: this.widget.isRTL, progress: this[_percent], progressColor: this.widget.progressColor, linearGradient: this.widget.linearGradient, backgroundColor: this.widget.backgroundColor, linearGradientBackgroundColor: this.widget.linearGradientBackgroundColor, linearStrokeCap: this.widget.linearStrokeCap, lineWidth: this.widget.lineHeight, maskFilter: this.widget.maskFilter, clipLinearGradient: this.widget.clipLinearGradient}), child: this.widget.center != null ? new basic.Center.new({child: this.widget.center, $creationLocationd_0dea112b090073317d4: C[8] || CT.C8}) : new container.Container.new({$creationLocationd_0dea112b090073317d4: C[11] || CT.C11}), $creationLocationd_0dea112b090073317d4: C[13] || CT.C13})]);
            if (this.widget.widgetIndicator != null && this[_indicatorWidth] === 0) t2[$add](new basic.Opacity.new({opacity: 0.0, key: this[_keyIndicator], child: this.widget.widgetIndicator, $creationLocationd_0dea112b090073317d4: C[18] || CT.C18}));
            if (this.widget.widgetIndicator != null && dart.notNull(this[_containerWidth]) > 0 && dart.notNull(this[_indicatorWidth]) > 0) t2[$add](new basic.Positioned.new({right: dart.test(this.widget.isRTL) ? percentPositionedHorizontal : null, left: !dart.test(this.widget.isRTL) ? percentPositionedHorizontal : null, top: dart.notNull(this[_containerHeight]) / 2 - dart.notNull(this[_indicatorHeight]), child: dart.nullCheck(this.widget.widgetIndicator), $creationLocationd_0dea112b090073317d4: C[23] || CT.C23}));
            return t2;
          })(), $creationLocationd_0dea112b090073317d4: C[29] || CT.C29}), $creationLocationd_0dea112b090073317d4: C[33] || CT.C33});
      if (hasSetWidth) {
        items[$add](containerWidget);
      } else {
        items[$add](new basic.Expanded.new({child: containerWidget, $creationLocationd_0dea112b090073317d4: C[39] || CT.C39}));
      }
      if (this.widget.trailing != null) {
        items[$add](dart.nullCheck(this.widget.trailing));
      }
      return new material.Material.new({color: colors.Colors.transparent, child: new container.Container.new({color: this.widget.fillColor, child: new basic.Row.new({mainAxisAlignment: this.widget.alignment, crossAxisAlignment: flex.CrossAxisAlignment.center, children: items, $creationLocationd_0dea112b090073317d4: C[42] || CT.C42}), $creationLocationd_0dea112b090073317d4: C[47] || CT.C47}), $creationLocationd_0dea112b090073317d4: C[51] || CT.C51});
    }
    get wantKeepAlive() {
      return this.widget.addAutomaticKeepAlive;
    }
  };
  (linear_percent_indicator._LinearPercentIndicatorState.new = function() {
    this[_animationController] = null;
    this[_animation] = null;
    this[_percent] = 0.0;
    this[_containerKey] = T.GlobalKeyOfStateOfStatefulWidget().new();
    this[_keyIndicator] = T.GlobalKeyOfStateOfStatefulWidget().new();
    this[_containerWidth] = 0.0;
    this[_containerHeight] = 0.0;
    this[_indicatorWidth] = 0.0;
    this[_indicatorHeight] = 0.0;
    linear_percent_indicator._LinearPercentIndicatorState.__proto__.new.call(this);
    ;
  }).prototype = linear_percent_indicator._LinearPercentIndicatorState.prototype;
  dart.addTypeTests(linear_percent_indicator._LinearPercentIndicatorState);
  dart.addTypeCaches(linear_percent_indicator._LinearPercentIndicatorState);
  dart.setMethodSignature(linear_percent_indicator._LinearPercentIndicatorState, () => ({
    __proto__: dart.getMethods(linear_percent_indicator._LinearPercentIndicatorState.__proto__),
    [_checkIfNeedCancelAnimation]: dart.fnType(dart.void, [linear_percent_indicator.LinearPercentIndicator]),
    [_updateProgress]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(linear_percent_indicator._LinearPercentIndicatorState, () => ({
    __proto__: dart.getGetters(linear_percent_indicator._LinearPercentIndicatorState.__proto__),
    wantKeepAlive: core.bool
  }));
  dart.setLibraryUri(linear_percent_indicator._LinearPercentIndicatorState, I[1]);
  dart.setFieldSignature(linear_percent_indicator._LinearPercentIndicatorState, () => ({
    __proto__: dart.getFields(linear_percent_indicator._LinearPercentIndicatorState.__proto__),
    [_animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [_animation]: dart.fieldType(dart.nullable(animation.Animation)),
    [_percent]: dart.fieldType(core.double),
    [_containerKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [_keyIndicator]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [_containerWidth]: dart.fieldType(core.double),
    [_containerHeight]: dart.fieldType(core.double),
    [_indicatorWidth]: dart.fieldType(core.double),
    [_indicatorHeight]: dart.fieldType(core.double)
  }));
  var lineWidth$ = dart.privateName(linear_percent_indicator, "LinearPainter.lineWidth");
  var progress$ = dart.privateName(linear_percent_indicator, "LinearPainter.progress");
  var isRTL$0 = dart.privateName(linear_percent_indicator, "LinearPainter.isRTL");
  var progressColor$ = dart.privateName(linear_percent_indicator, "LinearPainter.progressColor");
  var backgroundColor$ = dart.privateName(linear_percent_indicator, "LinearPainter.backgroundColor");
  var linearStrokeCap$0 = dart.privateName(linear_percent_indicator, "LinearPainter.linearStrokeCap");
  var linearGradient$0 = dart.privateName(linear_percent_indicator, "LinearPainter.linearGradient");
  var linearGradientBackgroundColor$0 = dart.privateName(linear_percent_indicator, "LinearPainter.linearGradientBackgroundColor");
  var maskFilter$0 = dart.privateName(linear_percent_indicator, "LinearPainter.maskFilter");
  var clipLinearGradient$0 = dart.privateName(linear_percent_indicator, "LinearPainter.clipLinearGradient");
  var _paintBackground = dart.privateName(linear_percent_indicator, "_paintBackground");
  var _paintLine = dart.privateName(linear_percent_indicator, "_paintLine");
  var _createGradientShaderRightToLeft = dart.privateName(linear_percent_indicator, "_createGradientShaderRightToLeft");
  var _createGradientShaderLeftToRight = dart.privateName(linear_percent_indicator, "_createGradientShaderLeftToRight");
  linear_percent_indicator.LinearPainter = class LinearPainter extends custom_paint.CustomPainter {
    get lineWidth() {
      return this[lineWidth$];
    }
    set lineWidth(value) {
      super.lineWidth = value;
    }
    get progress() {
      return this[progress$];
    }
    set progress(value) {
      super.progress = value;
    }
    get isRTL() {
      return this[isRTL$0];
    }
    set isRTL(value) {
      super.isRTL = value;
    }
    get progressColor() {
      return this[progressColor$];
    }
    set progressColor(value) {
      super.progressColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get linearStrokeCap() {
      return this[linearStrokeCap$0];
    }
    set linearStrokeCap(value) {
      super.linearStrokeCap = value;
    }
    get linearGradient() {
      return this[linearGradient$0];
    }
    set linearGradient(value) {
      super.linearGradient = value;
    }
    get linearGradientBackgroundColor() {
      return this[linearGradientBackgroundColor$0];
    }
    set linearGradientBackgroundColor(value) {
      super.linearGradientBackgroundColor = value;
    }
    get maskFilter() {
      return this[maskFilter$0];
    }
    set maskFilter(value) {
      super.maskFilter = value;
    }
    get clipLinearGradient() {
      return this[clipLinearGradient$0];
    }
    set clipLinearGradient(value) {
      super.clipLinearGradient = value;
    }
    paint(canvas, size) {
      let t3;
      if (canvas == null) dart.nullFailed(I[0], 360, 21, "canvas");
      if (size == null) dart.nullFailed(I[0], 360, 34, "size");
      let start = new ui.Offset.new(0.0, dart.notNull(size.height) / 2);
      let end = new ui.Offset.new(size.width, dart.notNull(size.height) / 2);
      canvas.drawLine(start, end, this[_paintBackground]);
      if (this.maskFilter != null) {
        this[_paintLine].maskFilter = this.maskFilter;
      }
      if (this.linearGradientBackgroundColor != null) {
        let shaderEndPoint = dart.test(this.clipLinearGradient) ? ui.Offset.zero : new ui.Offset.new(size.width, size.height);
        this[_paintBackground].shader = (t3 = this.linearGradientBackgroundColor, t3 == null ? null : t3.createShader(new ui.Rect.fromPoints(ui.Offset.zero, shaderEndPoint)));
      }
      if (dart.test(this.isRTL)) {
        let xProgress = dart.notNull(size.width) - dart.notNull(size.width) * dart.notNull(this.progress);
        if (this.linearGradient != null) {
          this[_paintLine].shader = this[_createGradientShaderRightToLeft](size, xProgress);
        }
        canvas.drawLine(end, new ui.Offset.new(xProgress, dart.notNull(size.height) / 2), this[_paintLine]);
      } else {
        let xProgress = dart.notNull(size.width) * dart.notNull(this.progress);
        if (this.linearGradient != null) {
          this[_paintLine].shader = this[_createGradientShaderLeftToRight](size, xProgress);
        }
        canvas.drawLine(start, new ui.Offset.new(xProgress, dart.notNull(size.height) / 2), this[_paintLine]);
      }
    }
    [_createGradientShaderRightToLeft](size, xProgress) {
      if (size == null) dart.nullFailed(I[0], 390, 48, "size");
      if (xProgress == null) dart.nullFailed(I[0], 390, 61, "xProgress");
      let shaderEndPoint = dart.test(this.clipLinearGradient) ? ui.Offset.zero : new ui.Offset.new(xProgress, size.height);
      return dart.nullCheck(this.linearGradient).createShader(new ui.Rect.fromPoints(new ui.Offset.new(size.width, size.height), shaderEndPoint));
    }
    [_createGradientShaderLeftToRight](size, xProgress) {
      if (size == null) dart.nullFailed(I[0], 401, 48, "size");
      if (xProgress == null) dart.nullFailed(I[0], 401, 61, "xProgress");
      let shaderEndPoint = dart.test(this.clipLinearGradient) ? new ui.Offset.new(size.width, size.height) : new ui.Offset.new(xProgress, size.height);
      return dart.nullCheck(this.linearGradient).createShader(new ui.Rect.fromPoints(ui.Offset.zero, shaderEndPoint));
    }
    shouldRepaint(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[0], 414, 36, "oldDelegate");
      return true;
    }
  };
  (linear_percent_indicator.LinearPainter.new = function(opts) {
    let lineWidth = opts && 'lineWidth' in opts ? opts.lineWidth : null;
    if (lineWidth == null) dart.nullFailed(I[0], 328, 19, "lineWidth");
    let progress = opts && 'progress' in opts ? opts.progress : null;
    if (progress == null) dart.nullFailed(I[0], 329, 19, "progress");
    let isRTL = opts && 'isRTL' in opts ? opts.isRTL : null;
    if (isRTL == null) dart.nullFailed(I[0], 330, 19, "isRTL");
    let progressColor = opts && 'progressColor' in opts ? opts.progressColor : null;
    if (progressColor == null) dart.nullFailed(I[0], 331, 19, "progressColor");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    if (backgroundColor == null) dart.nullFailed(I[0], 332, 19, "backgroundColor");
    let linearStrokeCap = opts && 'linearStrokeCap' in opts ? opts.linearStrokeCap : C[0] || CT.C0;
    let linearGradient = opts && 'linearGradient' in opts ? opts.linearGradient : null;
    let maskFilter = opts && 'maskFilter' in opts ? opts.maskFilter : null;
    let clipLinearGradient = opts && 'clipLinearGradient' in opts ? opts.clipLinearGradient : null;
    if (clipLinearGradient == null) dart.nullFailed(I[0], 336, 19, "clipLinearGradient");
    let linearGradientBackgroundColor = opts && 'linearGradientBackgroundColor' in opts ? opts.linearGradientBackgroundColor : null;
    this[_paintBackground] = ui.Paint.new();
    this[_paintLine] = ui.Paint.new();
    this[lineWidth$] = lineWidth;
    this[progress$] = progress;
    this[isRTL$0] = isRTL;
    this[progressColor$] = progressColor;
    this[backgroundColor$] = backgroundColor;
    this[linearStrokeCap$0] = linearStrokeCap;
    this[linearGradient$0] = linearGradient;
    this[maskFilter$0] = maskFilter;
    this[clipLinearGradient$0] = clipLinearGradient;
    this[linearGradientBackgroundColor$0] = linearGradientBackgroundColor;
    linear_percent_indicator.LinearPainter.__proto__.new.call(this);
    this[_paintBackground].color = this.backgroundColor;
    this[_paintBackground].style = ui.PaintingStyle.stroke;
    this[_paintBackground].strokeWidth = this.lineWidth;
    this[_paintLine].color = dart.toString(this.progress) === "0.0" ? this.progressColor.withOpacity(0.0) : this.progressColor;
    this[_paintLine].style = ui.PaintingStyle.stroke;
    this[_paintLine].strokeWidth = this.lineWidth;
    if (this.linearStrokeCap == linear_percent_indicator.LinearStrokeCap.round) {
      this[_paintLine].strokeCap = ui.StrokeCap.round;
    } else if (this.linearStrokeCap == linear_percent_indicator.LinearStrokeCap.butt) {
      this[_paintLine].strokeCap = ui.StrokeCap.butt;
    } else {
      this[_paintLine].strokeCap = ui.StrokeCap.round;
      this[_paintBackground].strokeCap = ui.StrokeCap.round;
    }
  }).prototype = linear_percent_indicator.LinearPainter.prototype;
  dart.addTypeTests(linear_percent_indicator.LinearPainter);
  dart.addTypeCaches(linear_percent_indicator.LinearPainter);
  dart.setMethodSignature(linear_percent_indicator.LinearPainter, () => ({
    __proto__: dart.getMethods(linear_percent_indicator.LinearPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_createGradientShaderRightToLeft]: dart.fnType(ui.Shader, [ui.Size, core.double]),
    [_createGradientShaderLeftToRight]: dart.fnType(ui.Shader, [ui.Size, core.double]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(linear_percent_indicator.LinearPainter, I[1]);
  dart.setFieldSignature(linear_percent_indicator.LinearPainter, () => ({
    __proto__: dart.getFields(linear_percent_indicator.LinearPainter.__proto__),
    [_paintBackground]: dart.finalFieldType(ui.Paint),
    [_paintLine]: dart.finalFieldType(ui.Paint),
    lineWidth: dart.finalFieldType(core.double),
    progress: dart.finalFieldType(core.double),
    isRTL: dart.finalFieldType(core.bool),
    progressColor: dart.finalFieldType(ui.Color),
    backgroundColor: dart.finalFieldType(ui.Color),
    linearStrokeCap: dart.finalFieldType(dart.nullable(linear_percent_indicator.LinearStrokeCap)),
    linearGradient: dart.finalFieldType(dart.nullable(gradient.LinearGradient)),
    linearGradientBackgroundColor: dart.finalFieldType(dart.nullable(gradient.LinearGradient)),
    maskFilter: dart.finalFieldType(dart.nullable(ui.MaskFilter)),
    clipLinearGradient: dart.finalFieldType(core.bool)
  }));
  dart.trackLibraries("packages/percent_indicator/linear_percent_indicator.dart", {
    "package:percent_indicator/linear_percent_indicator.dart": linear_percent_indicator
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["linear_percent_indicator.dart"],"names":[],"mappingsxC;;;;;EAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAK9B;;;;;;IACC;;;;;;IAGD;;;;;;IAGD;;;;;;IAOU;;;;;;IAOX;;;;;;IAGD;;;;;;IAGI;;;;;;IAGA;;;;;;IAGA;;;;;;IAGS;;;;;;IAGC;;;;;;IAGP;;;;;;IAGN;;;;;;IAKW;;;;;;IAGX;;;;;;IAGA;;;;;;IAGO;;;;;;IAIP;;;;;;IAGC;;;;;;IAID;;;;;;IAGS;;;;;;IAGN;;;;;;;AAlEe;IAAgB;;;AAClC;;IAAgB;;;AAAhB;IAAgB;;AAKA;IAAc;;;AAE9B;;IAAc;;;AAAd;IAAc;;AA0GqB;IAA8B;;;;QA7CrE;QACA;;QACA;;QACA;;QACA;QACE;QACF;QACA;QACE;QACF;;QACA;;QACA;;QACA;;QACA;QACA;QACA;QACA;;QACA;QACA;;QACA;;QACA;QACA;;QACA;;QACA;;QACA;QACA;;sDA7FI;oDAOA;IA8DJ;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACF,mFAAW,GAAG;AACjB,QAAI,AAAe,+BAAW,AAAc,aAAD;AAEkB,MAD3D,WAAM,2BACF;;AAEsC,IAA5C,wBAA+B,KAAd,aAAa,EAAb,aAAwB;AAEzC,QAAI,AAA8B,8CAAW,AAAgB,eAAD;AAEkB,MAD5E,WAAM,2BACF;;AAEiD,IAAvD,0BAAmC,MAAhB,eAAe,EAAf,cAAmB,iBAAM;AAE5C,QAAY,aAAR,gBAAU,OAAe,aAAR,gBAAU;AAC4C,MAAzE,WAAU,mBAAU;;EAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBiC,WAA/B;0BAAsB;AACP,MAAT;IACR;;;AAgBI,WAZa;0BAAU,wBAAqB;YAAC;AAC7C,sBAAI;AASA,UARF,cAAS;;AAC2D,YAAlE,yBAA4D,YAA1C,AAAc,yDAAA,KAAgB,sBAAhB,OAAsB,YAAtB,cAA+B;AACK,YAApE,0BAA8D,eAA3C,AAAc,2DAAA,MAAgB,yBAAhB,OAAsB,cAAtB,eAAgC;AACjE,gBAAI,AAAc,AAAe;AACmC,cAAlE,yBAA4D,eAA1C,AAAc,2DAAA,OAAgB,0BAAhB,OAAsB,cAAtB,eAA+B;AAEV,cADrD,0BAC+C,eAA3C,AAAc,2DAAA,OAAgB,0BAAhB,OAAsB,eAAtB,eAAgC;;;;;AAK1D,oBAAI,AAAO;AAGsD,QAF/D,6BAAuB,yDACZ,gBACG,qCAAuB,AAAO;AAUxC,QATJ,0BAAa,AAAuC,oCAA1B,UAAU,AAAO,8BACzC,4CAA4C,eAApB,oCAA8B,AAAO,sBADX;AAEjD,0BAAY;AAGT,YAFF,cAAS;AACqB,+BAA5B,eAAqB,AAAE,eAAZ;;AAEb,0BAAI,AAAO,iCAAoB,AAAS,mBAAG;AACK,cAA1B,AAAE,eAAtB,yCAAkC,UAAQ;;;;;AAQ9C,QALkB,AAAE,eAAtB,8CAAwC;cAAC;AACvC,cAAI,AAAO,AAAe,sCACtB,AAAO,MAAD,IAAoB;AACJ,YAAH,AAAC,eAAtB,AAAO;;;AAGoB,QAAX,AAAE,eAAtB;;AAEiB,QAAjB;;AAEe,MAAX;IACR;;UAEwD;AACtD,oBAAI,AAAU,SAAD,0BACR,AAAO,0BACR,AAAqB;AACK,QAAR,AAAE,eAAtB;;IAEJ;;yDAG4C;;AACV,MAA1B,sBAAgB,SAAS;AAC/B,UAAI,AAAU,AAAQ,SAAT,YAAY,AAAO;AAC9B,YAAI,AAAqB;AAE6B,UADhC,AAAE,eAAtB,uCACI,qCAAuB,AAAO;AAMjC,UALD,mBAAa,AAGR,8CAFU,AAAO,sCAAyB,AAAU,SAAD,WAAW,UACtD,AAAO,8BAElB,4CAA4C,eAApB,oCAA8B,AAAO;AAEvB,UAApB,AAAE,eAAtB,2CAAoC;;AAEnB,UAAjB;;;AAGkC,MAAtC,kCAA4B,SAAS;IACvC;;AAKI,MAFF,cAAS;AACkB,QAAzB,iBAAW,AAAO;;IAEtB;;UAG0B;AACJ,MAAd,YAAM,OAAO;AACf,kBAAQ,kCAA6B;AACzC,UAAI,AAAO,AAAQ;AACS,QAA1B,AAAM,KAAD,OAAmB,eAAd,AAAO;;AAEb,wBAAc,AAAO,AAAM;AAC3B,wCACc,AAAW,aAA3B,sCAAkB,kBAA2B,aAAhB,yBAAkB;AAC/C,4BAAkB,oCACb,WAAW,GAAG,AAAO,mCACpB,AAAO,iCACN,AAAO,4BACT,mCACc,wBACT;6CACR,gCACO,8BACI,uDACA,AAAO,6BACJ,+BACK,AAAO,2CACN,AAAO,6CACN,AAAO,4DAEpB,AAAO,4DACM,AAAO,wCACb,AAAO,oCACN,AAAO,4CACC,AAAO,yCAErB,AAAO,AAAO,6BAChB,6BAAc,AAAO,8EACrB;AAER,gBAAI,AAAO,AAAgB,uCAAW,AAAgB,0BAAG,GACvD,yCACW,UACJ,4BACE,AAAO;AAElB,gBAAI,AAAO,AAAgB,uCACP,aAAhB,yBAAkB,KACF,aAAhB,yBAAkB,GACpB,oDACS,AAAO,qBAAQ,2BAA2B,GAAG,YAC9C,WAAC,AAAO,qBAAQ,2BAA2B,GAAG,WAC9B,AAAI,aAArB,0BAAmB,iBAAI,gCACC,eAAtB,AAAO;;;AAMxB,UAAI,WAAW;AACa,QAA1B,AAAM,KAAD,OAAK,eAAe;;AAIvB,QAFF,AAAM,KAAD,OAAK,+BACD,eAAe;;AAG1B,UAAI,AAAO,AAAS;AACS,QAA3B,AAAM,KAAD,OAAoB,eAAf,AAAO;;AAGnB,YAAO,mCACS,kCACP,oCACE,AAAO,8BACP,sCACc,AAAO,2CACa,0CAC7B,KAAK;IAIvB;;AAG0B,YAAA,AAAO;IAAqB;;;IA7KjC;IACV;IACJ,iBAAW;IACZ,sBAAgB;IAChB,sBAAgB;IACf,wBAAkB;IAClB,yBAAmB;IACnB,wBAAkB;IAClB,yBAAmB;;;EAsK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKe;;;;;;IACA;;;;;;IACF;;;;;;IACC;;;;;;IACA;;;;;;IACW;;;;;;IACD;;;;;;IACA;;;;;;IACJ;;;;;;IACP;;;;;;UAmCO,QAAa;;UAAb;UAAa;AACvB,kBAAQ,kBAAO,KAAiB,aAAZ,AAAK,IAAD,WAAU;AAClC,gBAAM,kBAAO,AAAK,IAAD,QAAoB,aAAZ,AAAK,IAAD,WAAU;AACA,MAA7C,AAAO,MAAD,UAAU,KAAK,EAAE,GAAG,EAAE;AAE5B,UAAI,AAAW;AACqB,QAAlC,AAAW,8BAAa;;AAE1B,UAAI,AAA8B;AACzB,uCACH,2BAA4B,iBAAO,kBAAO,AAAK,IAAD,QAAQ,AAAK,IAAD;AAEE,QADhE,AAAiB,uFAAS,OACpB,gBAAkB,uBAAkB,gBAAM,cAAc;;AAGhE,oBAAI;AACI,wBAAuB,aAAX,AAAK,IAAD,UAAoB,aAAX,AAAK,IAAD,uBAAS;AAC5C,YAAI,AAAe;AACoD,UAArE,AAAW,0BAAS,uCAAiC,IAAI,EAAE,SAAS;;AAEF,QAApE,AAAO,MAAD,UAAU,GAAG,EAAE,kBAAO,SAAS,EAAc,aAAZ,AAAK,IAAD,WAAU,IAAI;;AAEnD,wBAAuB,aAAX,AAAK,IAAD,uBAAS;AAC/B,YAAI,AAAe;AACoD,UAArE,AAAW,0BAAS,uCAAiC,IAAI,EAAE,SAAS;;AAEA,QAAtE,AAAO,MAAD,UAAU,KAAK,EAAE,kBAAO,SAAS,EAAc,aAAZ,AAAK,IAAD,WAAU,IAAI;;IAE/D;uCAE6C,MAAa;UAAb;UAAa;AACjD,qCACH,2BAA4B,iBAAO,kBAAO,SAAS,EAAE,AAAK,IAAD;AAC7D,YAAqB,AAAE,gBAAhB,kCACA,uBACH,kBAAO,AAAK,IAAD,QAAQ,AAAK,IAAD,UACvB,cAAc;IAGpB;uCAE6C,MAAa;UAAb;UAAa;AACjD,qCAAiB,2BAClB,kBAAO,AAAK,IAAD,QAAQ,AAAK,IAAD,WACvB,kBAAO,SAAS,EAAE,AAAK,IAAD;AAC5B,YAAqB,AAAE,gBAAhB,kCACA,uBACI,gBACP,cAAc;IAGpB;;oCAGiC;;AAC/B,YAAO;IACT;;;QAxFgB;;QACA;;QACA;;QACA;;QACA;;QACT;QACA;QACA;QACS;;QACT;IAvBK,yBAAuB;IACvB,mBAAiB;IAab;IACA;IACA;IACA;IACA;IACT;IACA;IACA;IACS;IACT;AAVP;AAY0C,IAAxC,AAAiB,+BAAQ;AACoB,IAA7C,AAAiB,+BAAsB;AACC,IAAxC,AAAiB,qCAAc;AAIZ,IAFnB,AAAW,yBAAiB,AAAW,cAApB,mBAAuB,QACpC,AAAc,+BAAY,OAC1B;AACiC,IAAvC,AAAW,yBAAsB;AACC,IAAlC,AAAW,+BAAc;AAEzB,QAAI,AAAgB,wBAAmB;AACC,MAAtC,AAAW,6BAAsB;UAC5B,KAAI,AAAgB,wBAAmB;AACP,MAArC,AAAW,6BAAsB;;AAEK,MAAtC,AAAW,6BAAsB;AACW,MAA5C,AAAiB,mCAAsB;;EAE3C","file":"../../../../../../../../D:/packages/percent_indicator/linear_percent_indicator.dart.lib.js"}');
  // Exports:
  return {
    linear_percent_indicator: linear_percent_indicator
  };
}));

//# sourceMappingURL=linear_percent_indicator.dart.lib.js.map
