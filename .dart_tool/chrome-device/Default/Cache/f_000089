define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/syncfusion_flutter_core/src/theme/theme_widget.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/syncfusion_flutter_core/src/localizations/global_localizations.dart', 'packages/syncfusion_flutter_core/core.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/intl/src/intl/date_format.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/decoration.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/widgets/scroll_view.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/widgets/overflow_bar.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/rendering/stack.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/widgets/icon.dart', 'packages/flutter/src/material/icons.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/syncfusion_flutter_core/core_internal.dart', 'packages/flutter/src/services/keyboard_key.dart', 'packages/flutter/src/services/raw_keyboard_windows.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/services/text_editing.dart'], (function load__packages__syncfusion_flutter_datepicker__src__date_picker__year_view_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__strut_style$46dart, packages__syncfusion_flutter_core__src__theme__theme_widget$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__syncfusion_flutter_core__src__localizations__global_localizations$46dart, packages__syncfusion_flutter_core__core$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__intl__src__intl__date_format$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__decoration$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__widgets__scroll_view$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__widgets__overflow_bar$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__rendering__stack$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__rendering__flex$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__widgets__icon$46dart, packages__flutter__src__material__icons$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__syncfusion_flutter_core__core_internal$46dart, packages__flutter__src__services__keyboard_key$46dart, packages__flutter__src__services__raw_keyboard_windows$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__services__text_editing$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const localizations$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__localizations;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const sliver = packages__flutter__src__widgets__widget_span$46dart.src__widgets__sliver;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const text$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const scrollable = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scrollable;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const focus_scope = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_scope;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const daterangepicker_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__daterangepicker_theme;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const global_localizations = packages__syncfusion_flutter_core__src__localizations__global_localizations$46dart.src__localizations__global_localizations;
  const core$ = packages__syncfusion_flutter_core__core$46dart.core;
  const box$ = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const semantics$ = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const decoration = packages__flutter__src__painting__decoration$46dart.src__painting__decoration;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const platform$ = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const theme = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const divider = packages__flutter__src__material__icon_button$46dart.src__material__divider;
  const text_button = packages__flutter__src__material__icon_button$46dart.src__material__text_button;
  const material_button = packages__flutter__src__material__icon_button$46dart.src__material__material_button;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const scroll_view = packages__flutter__src__widgets__scroll_view$46dart.src__widgets__scroll_view;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const colors$ = packages__flutter__src__material__colors$46dart.src__material__colors;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const overflow_bar = packages__flutter__src__widgets__overflow_bar$46dart.src__widgets__overflow_bar;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const stack = packages__flutter__src__rendering__stack$46dart.src__rendering__stack;
  const viewport = packages__flutter__src__rendering__sliver$46dart.src__rendering__viewport;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const icon = packages__flutter__src__widgets__icon$46dart.src__widgets__icon;
  const icons = packages__flutter__src__material__icons$46dart.src__material__icons;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const core_internal = packages__syncfusion_flutter_core__core_internal$46dart.core_internal;
  const keyboard_key = packages__flutter__src__services__keyboard_key$46dart.src__services__keyboard_key;
  const raw_keyboard = packages__flutter__src__services__raw_keyboard_windows$46dart.src__services__raw_keyboard;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  var year_view = Object.create(dart.library);
  var month_view = Object.create(dart.library);
  var hijri_date_picker_manager = Object.create(dart.library);
  var picker_helper = Object.create(dart.library);
  var date_picker_manager = Object.create(dart.library);
  var date_picker = Object.create(dart.library);
  var datepicker = Object.create(dart.library);
  var $clear = dartx.clear;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $truncate = dartx.truncate;
  var $modulo = dartx['%'];
  var $_get = dartx._get;
  var $cast = dartx.cast;
  var $add = dartx.add;
  var $isInfinite = dartx.isInfinite;
  var $isNotEmpty = dartx.isNotEmpty;
  var $removeAt = dartx.removeAt;
  var $addAll = dartx.addAll;
  var $toString = dartx.toString;
  var $contains = dartx.contains;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $remove = dartx.remove;
  var $round = dartx.round;
  var $_set = dartx._set;
  var $sublist = dartx.sublist;
  var $toList = dartx.toList;
  var $map = dartx.map;
  var $insert = dartx.insert;
  var $replaceAll = dartx.replaceAll;
  var $toUpperCase = dartx.toUpperCase;
  var $indexOf = dartx.indexOf;
  var $abs = dartx.abs;
  var $removeLast = dartx.removeLast;
  var $sort = dartx.sort;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfSemanticsNode: () => (T.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics$.SemanticsNode)))(),
    JSArrayOfCustomPainterSemantics: () => (T.JSArrayOfCustomPainterSemantics = dart.constFn(_interceptors.JSArray$(custom_paint.CustomPainterSemantics)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    VoidTo_ExtendableRangeSelectionRenderObject: () => (T.VoidTo_ExtendableRangeSelectionRenderObject = dart.constFn(dart.fnType(year_view._ExtendableRangeSelectionRenderObject, [])))(),
    _ExtendableRangeSelectionRenderObjectTodynamic: () => (T._ExtendableRangeSelectionRenderObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [year_view._ExtendableRangeSelectionRenderObject])))(),
    TextStyleN: () => (T.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    DecorationN: () => (T.DecorationN = dart.constFn(dart.nullable(decoration.Decoration)))(),
    JSArrayOfbool: () => (T.JSArrayOfbool = dart.constFn(_interceptors.JSArray$(core.bool)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfListOfint: () => (T.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T.ListOfint())))(),
    VoidTo_MonthViewExtendableRangeSelectionRenderObject: () => (T.VoidTo_MonthViewExtendableRangeSelectionRenderObject = dart.constFn(dart.fnType(month_view._MonthViewExtendableRangeSelectionRenderObject, [])))(),
    _MonthViewExtendableRangeSelectionRenderObjectTodynamic: () => (T._MonthViewExtendableRangeSelectionRenderObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [month_view._MonthViewExtendableRangeSelectionRenderObject])))(),
    VoidToRect: () => (T.VoidToRect = dart.constFn(dart.fnType(ui.Rect, [])))(),
    RectTodynamic: () => (T.RectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ui.Rect])))(),
    VoidToHijriDatePickerMonthViewSettings: () => (T.VoidToHijriDatePickerMonthViewSettings = dart.constFn(dart.fnType(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, [])))(),
    HijriDatePickerMonthViewSettingsTodynamic: () => (T.HijriDatePickerMonthViewSettingsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [hijri_date_picker_manager.HijriDatePickerMonthViewSettings])))(),
    IterableDiagnosticsOfHijriDateTime: () => (T.IterableDiagnosticsOfHijriDateTime = dart.constFn(date_picker_manager.IterableDiagnostics$(core$.HijriDateTime)))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    IterablePropertyOfint: () => (T.IterablePropertyOfint = dart.constFn(diagnostics.IterableProperty$(core.int)))(),
    VoidToHijriDatePickerYearCellStyle: () => (T.VoidToHijriDatePickerYearCellStyle = dart.constFn(dart.fnType(hijri_date_picker_manager.HijriDatePickerYearCellStyle, [])))(),
    HijriDatePickerYearCellStyleTodynamic: () => (T.HijriDatePickerYearCellStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [hijri_date_picker_manager.HijriDatePickerYearCellStyle])))(),
    DiagnosticsPropertyOfTextStyle: () => (T.DiagnosticsPropertyOfTextStyle = dart.constFn(diagnostics.DiagnosticsProperty$(text_style.TextStyle)))(),
    DiagnosticsPropertyOfDecoration: () => (T.DiagnosticsPropertyOfDecoration = dart.constFn(diagnostics.DiagnosticsProperty$(decoration.Decoration)))(),
    VoidToHijriDatePickerMonthCellStyle: () => (T.VoidToHijriDatePickerMonthCellStyle = dart.constFn(dart.fnType(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, [])))(),
    HijriDatePickerMonthCellStyleTodynamic: () => (T.HijriDatePickerMonthCellStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [hijri_date_picker_manager.HijriDatePickerMonthCellStyle])))(),
    DiagnosticsPropertyOfHijriDateTime: () => (T.DiagnosticsPropertyOfHijriDateTime = dart.constFn(diagnostics.DiagnosticsProperty$(core$.HijriDateTime)))(),
    DiagnosticsPropertyOfHijriDateRange: () => (T.DiagnosticsPropertyOfHijriDateRange = dart.constFn(diagnostics.DiagnosticsProperty$(hijri_date_picker_manager.HijriDateRange)))(),
    IterableDiagnosticsOfHijriDateRange: () => (T.IterableDiagnosticsOfHijriDateRange = dart.constFn(date_picker_manager.IterableDiagnostics$(hijri_date_picker_manager.HijriDateRange)))(),
    EnumPropertyOfHijriDatePickerView: () => (T.EnumPropertyOfHijriDatePickerView = dart.constFn(diagnostics.EnumProperty$(hijri_date_picker_manager.HijriDatePickerView)))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    JSArrayOfStringTovoid: () => (T.JSArrayOfStringTovoid = dart.constFn(_interceptors.JSArray$(T.StringTovoid())))(),
    IdentityMapOfString$double: () => (T.IdentityMapOfString$double = dart.constFn(_js_helper.IdentityMap$(core.String, core.double)))(),
    JSArrayOfHijriDateTime: () => (T.JSArrayOfHijriDateTime = dart.constFn(_interceptors.JSArray$(core$.HijriDateTime)))(),
    JSArrayOfDateTime: () => (T.JSArrayOfDateTime = dart.constFn(_interceptors.JSArray$(core.DateTime)))(),
    VoidToDateTime: () => (T.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    DateTimeTodynamic: () => (T.DateTimeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.DateTime])))(),
    intToint: () => (T.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    JSArrayOfdouble: () => (T.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    VoidToDateRangePickerHeaderStyle: () => (T.VoidToDateRangePickerHeaderStyle = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerHeaderStyle, [])))(),
    DateRangePickerHeaderStyleTodynamic: () => (T.DateRangePickerHeaderStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerHeaderStyle])))(),
    EnumPropertyOfTextAlign: () => (T.EnumPropertyOfTextAlign = dart.constFn(diagnostics.EnumProperty$(ui.TextAlign)))(),
    VoidToDateRangePickerViewHeaderStyle: () => (T.VoidToDateRangePickerViewHeaderStyle = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerViewHeaderStyle, [])))(),
    DateRangePickerViewHeaderStyleTodynamic: () => (T.DateRangePickerViewHeaderStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerViewHeaderStyle])))(),
    VoidToDateRangePickerWeekNumberStyle: () => (T.VoidToDateRangePickerWeekNumberStyle = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerWeekNumberStyle, [])))(),
    DateRangePickerWeekNumberStyleTodynamic: () => (T.DateRangePickerWeekNumberStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerWeekNumberStyle])))(),
    VoidToDateRangePickerMonthViewSettings: () => (T.VoidToDateRangePickerMonthViewSettings = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerMonthViewSettings, [])))(),
    DateRangePickerMonthViewSettingsTodynamic: () => (T.DateRangePickerMonthViewSettingsTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerMonthViewSettings])))(),
    IterableDiagnosticsOfDateTime: () => (T.IterableDiagnosticsOfDateTime = dart.constFn(date_picker_manager.IterableDiagnostics$(core.DateTime)))(),
    VoidToDateRangePickerYearCellStyle: () => (T.VoidToDateRangePickerYearCellStyle = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerYearCellStyle, [])))(),
    DateRangePickerYearCellStyleTodynamic: () => (T.DateRangePickerYearCellStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerYearCellStyle])))(),
    VoidToDateRangePickerMonthCellStyle: () => (T.VoidToDateRangePickerMonthCellStyle = dart.constFn(dart.fnType(date_picker_manager.DateRangePickerMonthCellStyle, [])))(),
    DateRangePickerMonthCellStyleTodynamic: () => (T.DateRangePickerMonthCellStyleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [date_picker_manager.DateRangePickerMonthCellStyle])))(),
    DiagnosticsPropertyOfDateTime: () => (T.DiagnosticsPropertyOfDateTime = dart.constFn(diagnostics.DiagnosticsProperty$(core.DateTime)))(),
    DiagnosticsPropertyOfPickerDateRange: () => (T.DiagnosticsPropertyOfPickerDateRange = dart.constFn(diagnostics.DiagnosticsProperty$(date_picker_manager.PickerDateRange)))(),
    IterableDiagnosticsOfPickerDateRange: () => (T.IterableDiagnosticsOfPickerDateRange = dart.constFn(date_picker_manager.IterableDiagnostics$(date_picker_manager.PickerDateRange)))(),
    EnumPropertyOfDateRangePickerView: () => (T.EnumPropertyOfDateRangePickerView = dart.constFn(diagnostics.EnumProperty$(date_picker_manager.DateRangePickerView)))(),
    EnumPropertyOfDateRangePickerSelectionMode: () => (T.EnumPropertyOfDateRangePickerSelectionMode = dart.constFn(diagnostics.EnumProperty$(date_picker_manager.DateRangePickerSelectionMode)))(),
    EnumPropertyOfDateRangePickerSelectionShape: () => (T.EnumPropertyOfDateRangePickerSelectionShape = dart.constFn(diagnostics.EnumProperty$(date_picker_manager.DateRangePickerSelectionShape)))(),
    EnumPropertyOfDateRangePickerNavigationDirection: () => (T.EnumPropertyOfDateRangePickerNavigationDirection = dart.constFn(diagnostics.EnumProperty$(date_picker_manager.DateRangePickerNavigationDirection)))(),
    EnumPropertyOfDateRangePickerNavigationMode: () => (T.EnumPropertyOfDateRangePickerNavigationMode = dart.constFn(diagnostics.EnumProperty$(date_picker_manager.DateRangePickerNavigationMode)))(),
    BuildContextAndDateRangePickerCellDetailsToWidget: () => (T.BuildContextAndDateRangePickerCellDetailsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, date_picker_manager.DateRangePickerCellDetails])))(),
    DiagnosticsPropertyOfBuildContextAndDateRangePickerCellDetailsToWidget: () => (T.DiagnosticsPropertyOfBuildContextAndDateRangePickerCellDetailsToWidget = dart.constFn(diagnostics.DiagnosticsProperty$(T.BuildContextAndDateRangePickerCellDetailsToWidget())))(),
    DateRangePickerViewChangedArgsTovoid: () => (T.DateRangePickerViewChangedArgsTovoid = dart.constFn(dart.fnType(dart.void, [date_picker_manager.DateRangePickerViewChangedArgs])))(),
    DiagnosticsPropertyOfDateRangePickerViewChangedArgsTovoid: () => (T.DiagnosticsPropertyOfDateRangePickerViewChangedArgsTovoid = dart.constFn(diagnostics.DiagnosticsProperty$(T.DateRangePickerViewChangedArgsTovoid())))(),
    DateRangePickerSelectionChangedArgsTovoid: () => (T.DateRangePickerSelectionChangedArgsTovoid = dart.constFn(dart.fnType(dart.void, [date_picker_manager.DateRangePickerSelectionChangedArgs])))(),
    DiagnosticsPropertyOfDateRangePickerSelectionChangedArgsTovoid: () => (T.DiagnosticsPropertyOfDateRangePickerSelectionChangedArgsTovoid = dart.constFn(diagnostics.DiagnosticsProperty$(T.DateRangePickerSelectionChangedArgsTovoid())))(),
    DiagnosticsPropertyOfVoidTovoid: () => (T.DiagnosticsPropertyOfVoidTovoid = dart.constFn(diagnostics.DiagnosticsProperty$(T.VoidTovoid())))(),
    ObjectTodynamic: () => (T.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    DiagnosticsPropertyOfObjectTodynamic: () => (T.DiagnosticsPropertyOfObjectTodynamic = dart.constFn(diagnostics.DiagnosticsProperty$(T.ObjectTodynamic())))(),
    DiagnosticsPropertyOfDateRangePickerController: () => (T.DiagnosticsPropertyOfDateRangePickerController = dart.constFn(diagnostics.DiagnosticsProperty$(date_picker_manager.DateRangePickerController)))(),
    BuildContextAndHijriDateRangePickerCellDetailsToWidget: () => (T.BuildContextAndHijriDateRangePickerCellDetailsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, hijri_date_picker_manager.HijriDateRangePickerCellDetails])))(),
    DiagnosticsPropertyOfBuildContextAndHijriDateRangePickerCellDetailsToWidget: () => (T.DiagnosticsPropertyOfBuildContextAndHijriDateRangePickerCellDetailsToWidget = dart.constFn(diagnostics.DiagnosticsProperty$(T.BuildContextAndHijriDateRangePickerCellDetailsToWidget())))(),
    HijriDatePickerViewChangedArgsTovoid: () => (T.HijriDatePickerViewChangedArgsTovoid = dart.constFn(dart.fnType(dart.void, [hijri_date_picker_manager.HijriDatePickerViewChangedArgs])))(),
    DiagnosticsPropertyOfHijriDatePickerViewChangedArgsTovoid: () => (T.DiagnosticsPropertyOfHijriDatePickerViewChangedArgsTovoid = dart.constFn(diagnostics.DiagnosticsProperty$(T.HijriDatePickerViewChangedArgsTovoid())))(),
    DiagnosticsPropertyOfHijriDatePickerController: () => (T.DiagnosticsPropertyOfHijriDatePickerController = dart.constFn(diagnostics.DiagnosticsProperty$(hijri_date_picker_manager.HijriDatePickerController)))(),
    GlobalKeyOf_PickerScrollViewState: () => (T.GlobalKeyOf_PickerScrollViewState = dart.constFn(framework.GlobalKey$(date_picker._PickerScrollViewState)))(),
    JSArrayOfList: () => (T.JSArrayOfList = dart.constFn(_interceptors.JSArray$(core.List)))(),
    ValueNotifierOfList: () => (T.ValueNotifierOfList = dart.constFn(change_notifier.ValueNotifier$(core.List)))(),
    BuildContextAndBoxConstraintsToContainer: () => (T.BuildContextAndBoxConstraintsToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, box$.BoxConstraints])))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndintToWidgetN: () => (T.BuildContextAndintToWidgetN = dart.constFn(dart.fnType(T.WidgetN(), [framework.BuildContext, core.int])))(),
    VoidToNvoid: () => (T.VoidToNvoid = dart.constFn(dart.nullable(T.VoidTovoid())))(),
    TapUpDetailsTovoid: () => (T.TapUpDetailsTovoid = dart.constFn(dart.fnType(dart.void, [tap.TapUpDetails])))(),
    PickerStateArgsTovoid: () => (T.PickerStateArgsTovoid = dart.constFn(dart.fnType(dart.void, [picker_helper.PickerStateArgs])))(),
    doubleN: () => (T.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    HijriDateTimeN: () => (T.HijriDateTimeN = dart.constFn(dart.nullable(core$.HijriDateTime)))(),
    DateTimeN: () => (T.DateTimeN = dart.constFn(dart.nullable(core.DateTime)))(),
    JSArrayOfHijriDateRange: () => (T.JSArrayOfHijriDateRange = dart.constFn(_interceptors.JSArray$(hijri_date_picker_manager.HijriDateRange)))(),
    JSArrayOfPickerDateRange: () => (T.JSArrayOfPickerDateRange = dart.constFn(_interceptors.JSArray$(date_picker_manager.PickerDateRange)))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    PointerEnterEventTovoid: () => (T.PointerEnterEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerEnterEvent])))(),
    PointerHoverEventTovoid: () => (T.PointerHoverEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerHoverEvent])))(),
    PointerExitEventTovoid: () => (T.PointerExitEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerExitEvent])))(),
    ListOfCustomPainterSemantics: () => (T.ListOfCustomPainterSemantics = dart.constFn(core.List$(custom_paint.CustomPainterSemantics)))(),
    SizeToListOfCustomPainterSemantics: () => (T.SizeToListOfCustomPainterSemantics = dart.constFn(dart.fnType(T.ListOfCustomPainterSemantics(), [ui.Size])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOf_PickerView: () => (T.JSArrayOf_PickerView = dart.constFn(_interceptors.JSArray$(date_picker._PickerView)))(),
    GlobalKeyOf_PickerViewState: () => (T.GlobalKeyOf_PickerViewState = dart.constFn(framework.GlobalKey$(date_picker._PickerViewState)))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    HoveringDetailsN: () => (T.HoveringDetailsN = dart.constFn(dart.nullable(picker_helper.HoveringDetails)))(),
    ValueNotifierOfHoveringDetailsN: () => (T.ValueNotifierOfHoveringDetailsN = dart.constFn(change_notifier.ValueNotifier$(T.HoveringDetailsN())))(),
    ValueNotifierOfbool: () => (T.ValueNotifierOfbool = dart.constFn(change_notifier.ValueNotifier$(core.bool)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 305,
        [_Location_file]: null
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 306,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 307,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 308,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 309,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 310,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 311,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 312,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 313,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 314,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 22,
        [_Location_line]: 315,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 316,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 317,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 318,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 319,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 320,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 321,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 322,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 323,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 324,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedDate",
        [_Location_column]: 42,
        [_Location_line]: 325,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 326,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 327,
        [_Location_file]: null
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 328,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 329,
        [_Location_file]: null
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 330,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 22,
        [_Location_line]: 331,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 332,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 333,
        [_Location_file]: null
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 334,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 335,
        [_Location_file]: null
      });
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32], widget_inspector._Location);
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1] || CT.C1,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 304,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionMode.prototype,
        [_name$]: "DateRangePickerSelectionMode.single",
        index: 0
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 340,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 341,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 342,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 343,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 344,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 345,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 346,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 347,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 348,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 349,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 22,
        [_Location_line]: 350,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 351,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 352,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 353,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 354,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 355,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 356,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 357,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 358,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 359,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedDates",
        [_Location_column]: 42,
        [_Location_line]: 360,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 361,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 362,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 363,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 364,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 365,
        [_Location_file]: null
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 22,
        [_Location_line]: 366,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 367,
        [_Location_file]: null
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 368,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 369,
        [_Location_file]: null
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 370,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.constList([C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63, C[64] || CT.C64, C[65] || CT.C65, C[66] || CT.C66], widget_inspector._Location);
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[35] || CT.C35,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 339,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart"
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionMode.prototype,
        [_name$]: "DateRangePickerSelectionMode.multiple",
        index: 1
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 375,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 376,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 377,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 378,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 379,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 380,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 381,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 382,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 383,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 384,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 22,
        [_Location_line]: 385,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 386,
        [_Location_file]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 387,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 388,
        [_Location_file]: null
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 389,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 390,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 391,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 392,
        [_Location_file]: null
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 393,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 394,
        [_Location_file]: null
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRange",
        [_Location_column]: 42,
        [_Location_line]: 395,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 396,
        [_Location_file]: null
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 397,
        [_Location_file]: null
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 398,
        [_Location_file]: null
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 399,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 400,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 22,
        [_Location_line]: 401,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 402,
        [_Location_file]: null
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 403,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 404,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 405,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.constList([C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91, C[92] || CT.C92, C[93] || CT.C93, C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100], widget_inspector._Location);
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[69] || CT.C69,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 374,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart"
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionMode.prototype,
        [_name$]: "DateRangePickerSelectionMode.range",
        index: 2
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 410,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 411,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 412,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 413,
        [_Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 414,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 415,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 416,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 417,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 418,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 419,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 22,
        [_Location_line]: 420,
        [_Location_file]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 421,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 422,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 423,
        [_Location_file]: null
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 424,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 425,
        [_Location_file]: null
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 426,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 427,
        [_Location_file]: null
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 428,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 429,
        [_Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRange",
        [_Location_column]: 42,
        [_Location_line]: 430,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 431,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 432,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 433,
        [_Location_file]: null
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 434,
        [_Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 435,
        [_Location_file]: null
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 22,
        [_Location_line]: 436,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 437,
        [_Location_file]: null
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 438,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 439,
        [_Location_file]: null
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 440,
        [_Location_file]: null
      });
    },
    get C103() {
      return C[103] = dart.constList([C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119, C[120] || CT.C120, C[121] || CT.C121, C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128, C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134], widget_inspector._Location);
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[103] || CT.C103,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 409,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart"
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionMode.prototype,
        [_name$]: "DateRangePickerSelectionMode.extendableRange",
        index: 4
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 445,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 446,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 447,
        [_Location_file]: null
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 448,
        [_Location_file]: null
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 449,
        [_Location_file]: null
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 450,
        [_Location_file]: null
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 451,
        [_Location_file]: null
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 452,
        [_Location_file]: null
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 453,
        [_Location_file]: null
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 454,
        [_Location_file]: null
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 22,
        [_Location_line]: 455,
        [_Location_file]: null
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 456,
        [_Location_file]: null
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 457,
        [_Location_file]: null
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 458,
        [_Location_file]: null
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 459,
        [_Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 460,
        [_Location_file]: null
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 461,
        [_Location_file]: null
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 462,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 463,
        [_Location_file]: null
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 464,
        [_Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRanges",
        [_Location_column]: 42,
        [_Location_line]: 465,
        [_Location_file]: null
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 466,
        [_Location_file]: null
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 467,
        [_Location_file]: null
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 468,
        [_Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 469,
        [_Location_file]: null
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 470,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 22,
        [_Location_line]: 471,
        [_Location_file]: null
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 472,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 473,
        [_Location_file]: null
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 474,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 475,
        [_Location_file]: null
      });
    },
    get C137() {
      return C[137] = dart.constList([C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142, C[143] || CT.C143, C[144] || CT.C144, C[145] || CT.C145, C[146] || CT.C146, C[147] || CT.C147, C[148] || CT.C148, C[149] || CT.C149, C[150] || CT.C150, C[151] || CT.C151, C[152] || CT.C152, C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155, C[156] || CT.C156, C[157] || CT.C157, C[158] || CT.C158, C[159] || CT.C159, C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167, C[168] || CT.C168], widget_inspector._Location);
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[137] || CT.C137,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 444,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionMode.prototype,
        [_name$]: "DateRangePickerSelectionMode.multiRange",
        index: 3
      });
    },
    get C170() {
      return C[170] = dart.constList([], semantics$.SemanticsNode);
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionShape.prototype,
        [_name$]: "DateRangePickerSelectionShape.rectangle",
        index: 1
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: date_picker_manager.DateRangePickerSelectionShape.prototype,
        [_name$]: "DateRangePickerSelectionShape.circle",
        index: 0
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 2,
        [Radius_x]: 2
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 400,
        [_Location_file]: null
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 22,
        [_Location_line]: 401,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 402,
        [_Location_file]: null
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 403,
        [_Location_file]: null
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 404,
        [_Location_file]: null
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 405,
        [_Location_file]: null
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 406,
        [_Location_file]: null
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 407,
        [_Location_file]: null
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 408,
        [_Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 409,
        [_Location_file]: null
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 410,
        [_Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 411,
        [_Location_file]: null
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 22,
        [_Location_line]: 415,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 22,
        [_Location_line]: 416,
        [_Location_file]: null
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 22,
        [_Location_line]: 417,
        [_Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 22,
        [_Location_line]: 418,
        [_Location_file]: null
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 419,
        [_Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 420,
        [_Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 424,
        [_Location_file]: null
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 425,
        [_Location_file]: null
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 426,
        [_Location_file]: null
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 427,
        [_Location_file]: null
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedDate",
        [_Location_column]: 15,
        [_Location_line]: 428,
        [_Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 429,
        [_Location_file]: null
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 430,
        [_Location_file]: null
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 431,
        [_Location_file]: null
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 22,
        [_Location_line]: 432,
        [_Location_file]: null
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 22,
        [_Location_line]: 433,
        [_Location_file]: null
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberPanelWidth",
        [_Location_column]: 15,
        [_Location_line]: 434,
        [_Location_file]: null
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 435,
        [_Location_file]: null
      });
    },
    get C175() {
      return C[175] = dart.constList([C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179, C[180] || CT.C180, C[181] || CT.C181, C[182] || CT.C182, C[183] || CT.C183, C[184] || CT.C184, C[185] || CT.C185, C[186] || CT.C186, C[187] || CT.C187, C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[194] || CT.C194, C[195] || CT.C195, C[196] || CT.C196, C[197] || CT.C197, C[198] || CT.C198, C[199] || CT.C199, C[200] || CT.C200, C[201] || CT.C201, C[202] || CT.C202, C[203] || CT.C203, C[204] || CT.C204, C[205] || CT.C205], widget_inspector._Location);
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[175] || CT.C175,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 399,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart"
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 440,
        [_Location_file]: null
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 22,
        [_Location_line]: 441,
        [_Location_file]: null
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 442,
        [_Location_file]: null
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 443,
        [_Location_file]: null
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 444,
        [_Location_file]: null
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 445,
        [_Location_file]: null
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 446,
        [_Location_file]: null
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 447,
        [_Location_file]: null
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 448,
        [_Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 449,
        [_Location_file]: null
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 450,
        [_Location_file]: null
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 451,
        [_Location_file]: null
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 452,
        [_Location_file]: null
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 453,
        [_Location_file]: null
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 454,
        [_Location_file]: null
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 22,
        [_Location_line]: 455,
        [_Location_file]: null
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 22,
        [_Location_line]: 456,
        [_Location_file]: null
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 22,
        [_Location_line]: 457,
        [_Location_file]: null
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 22,
        [_Location_line]: 458,
        [_Location_file]: null
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 459,
        [_Location_file]: null
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 460,
        [_Location_file]: null
      });
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 461,
        [_Location_file]: null
      });
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 462,
        [_Location_file]: null
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 463,
        [_Location_file]: null
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 464,
        [_Location_file]: null
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 465,
        [_Location_file]: null
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 466,
        [_Location_file]: null
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 467,
        [_Location_file]: null
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedDates",
        [_Location_column]: 15,
        [_Location_line]: 468,
        [_Location_file]: null
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 469,
        [_Location_file]: null
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 470,
        [_Location_file]: null
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 471,
        [_Location_file]: null
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 22,
        [_Location_line]: 472,
        [_Location_file]: null
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 22,
        [_Location_line]: 473,
        [_Location_file]: null
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberPanelWidth",
        [_Location_column]: 15,
        [_Location_line]: 474,
        [_Location_file]: null
      });
    },
    get C207() {
      return C[207] = dart.constList([C[208] || CT.C208, C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211, C[212] || CT.C212, C[213] || CT.C213, C[214] || CT.C214, C[215] || CT.C215, C[216] || CT.C216, C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220, C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223, C[224] || CT.C224, C[225] || CT.C225, C[226] || CT.C226, C[227] || CT.C227, C[228] || CT.C228, C[229] || CT.C229, C[230] || CT.C230, C[231] || CT.C231, C[232] || CT.C232, C[233] || CT.C233, C[234] || CT.C234, C[235] || CT.C235, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239, C[240] || CT.C240, C[241] || CT.C241, C[242] || CT.C242, C[168] || CT.C168], widget_inspector._Location);
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[207] || CT.C207,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 439,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart"
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 20,
        [_Location_line]: 479,
        [_Location_file]: null
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 20,
        [_Location_line]: 480,
        [_Location_file]: null
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 20,
        [_Location_line]: 481,
        [_Location_file]: null
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 20,
        [_Location_line]: 482,
        [_Location_file]: null
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 20,
        [_Location_line]: 483,
        [_Location_file]: null
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 20,
        [_Location_line]: 484,
        [_Location_file]: null
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 20,
        [_Location_line]: 485,
        [_Location_file]: null
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 20,
        [_Location_line]: 486,
        [_Location_file]: null
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 20,
        [_Location_line]: 487,
        [_Location_file]: null
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 20,
        [_Location_line]: 488,
        [_Location_file]: null
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 20,
        [_Location_line]: 489,
        [_Location_file]: null
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 20,
        [_Location_line]: 490,
        [_Location_file]: null
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 20,
        [_Location_line]: 491,
        [_Location_file]: null
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 20,
        [_Location_line]: 492,
        [_Location_file]: null
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 20,
        [_Location_line]: 493,
        [_Location_file]: null
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 20,
        [_Location_line]: 494,
        [_Location_file]: null
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 20,
        [_Location_line]: 495,
        [_Location_file]: null
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 20,
        [_Location_line]: 496,
        [_Location_file]: null
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 20,
        [_Location_line]: 497,
        [_Location_file]: null
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 20,
        [_Location_line]: 498,
        [_Location_file]: null
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 20,
        [_Location_line]: 499,
        [_Location_file]: null
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 20,
        [_Location_line]: 500,
        [_Location_file]: null
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 20,
        [_Location_line]: 501,
        [_Location_file]: null
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 20,
        [_Location_line]: 502,
        [_Location_file]: null
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 20,
        [_Location_line]: 503,
        [_Location_file]: null
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 20,
        [_Location_line]: 504,
        [_Location_file]: null
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 20,
        [_Location_line]: 505,
        [_Location_file]: null
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 20,
        [_Location_line]: 506,
        [_Location_file]: null
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRange",
        [_Location_column]: 13,
        [_Location_line]: 507,
        [_Location_file]: null
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 20,
        [_Location_line]: 508,
        [_Location_file]: null
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 20,
        [_Location_line]: 509,
        [_Location_file]: null
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 20,
        [_Location_line]: 510,
        [_Location_file]: null
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 20,
        [_Location_line]: 511,
        [_Location_file]: null
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 20,
        [_Location_line]: 512,
        [_Location_file]: null
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberPanelWidth",
        [_Location_column]: 13,
        [_Location_line]: 513,
        [_Location_file]: null
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 13,
        [_Location_line]: 514,
        [_Location_file]: null
      });
    },
    get C244() {
      return C[244] = dart.constList([C[245] || CT.C245, C[246] || CT.C246, C[247] || CT.C247, C[248] || CT.C248, C[249] || CT.C249, C[250] || CT.C250, C[251] || CT.C251, C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254, C[255] || CT.C255, C[256] || CT.C256, C[257] || CT.C257, C[258] || CT.C258, C[259] || CT.C259, C[260] || CT.C260, C[261] || CT.C261, C[262] || CT.C262, C[263] || CT.C263, C[264] || CT.C264, C[265] || CT.C265, C[266] || CT.C266, C[267] || CT.C267, C[268] || CT.C268, C[269] || CT.C269, C[270] || CT.C270, C[271] || CT.C271, C[272] || CT.C272, C[273] || CT.C273, C[274] || CT.C274, C[275] || CT.C275, C[276] || CT.C276, C[277] || CT.C277, C[278] || CT.C278, C[279] || CT.C279, C[280] || CT.C280], widget_inspector._Location);
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[244] || CT.C244,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 478,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart"
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 518,
        [_Location_file]: null
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 22,
        [_Location_line]: 519,
        [_Location_file]: null
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 520,
        [_Location_file]: null
      });
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 521,
        [_Location_file]: null
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 522,
        [_Location_file]: null
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 523,
        [_Location_file]: null
      });
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 524,
        [_Location_file]: null
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 525,
        [_Location_file]: null
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 526,
        [_Location_file]: null
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 527,
        [_Location_file]: null
      });
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 528,
        [_Location_file]: null
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 529,
        [_Location_file]: null
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 530,
        [_Location_file]: null
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 531,
        [_Location_file]: null
      });
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 532,
        [_Location_file]: null
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 22,
        [_Location_line]: 533,
        [_Location_file]: null
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 22,
        [_Location_line]: 534,
        [_Location_file]: null
      });
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 22,
        [_Location_line]: 535,
        [_Location_file]: null
      });
    },
    get C301() {
      return C[301] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 22,
        [_Location_line]: 536,
        [_Location_file]: null
      });
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 537,
        [_Location_file]: null
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 538,
        [_Location_file]: null
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 539,
        [_Location_file]: null
      });
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 540,
        [_Location_file]: null
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 541,
        [_Location_file]: null
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 542,
        [_Location_file]: null
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 543,
        [_Location_file]: null
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 544,
        [_Location_file]: null
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 545,
        [_Location_file]: null
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRange",
        [_Location_column]: 15,
        [_Location_line]: 546,
        [_Location_file]: null
      });
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 547,
        [_Location_file]: null
      });
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 548,
        [_Location_file]: null
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 549,
        [_Location_file]: null
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 22,
        [_Location_line]: 550,
        [_Location_file]: null
      });
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 22,
        [_Location_line]: 551,
        [_Location_file]: null
      });
    },
    get C317() {
      return C[317] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberPanelWidth",
        [_Location_column]: 15,
        [_Location_line]: 552,
        [_Location_file]: null
      });
    },
    get C318() {
      return C[318] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 553,
        [_Location_file]: null
      });
    },
    get C282() {
      return C[282] = dart.constList([C[283] || CT.C283, C[284] || CT.C284, C[285] || CT.C285, C[286] || CT.C286, C[287] || CT.C287, C[288] || CT.C288, C[289] || CT.C289, C[290] || CT.C290, C[291] || CT.C291, C[292] || CT.C292, C[293] || CT.C293, C[294] || CT.C294, C[295] || CT.C295, C[296] || CT.C296, C[297] || CT.C297, C[298] || CT.C298, C[299] || CT.C299, C[300] || CT.C300, C[301] || CT.C301, C[302] || CT.C302, C[303] || CT.C303, C[304] || CT.C304, C[305] || CT.C305, C[306] || CT.C306, C[307] || CT.C307, C[308] || CT.C308, C[309] || CT.C309, C[310] || CT.C310, C[311] || CT.C311, C[312] || CT.C312, C[313] || CT.C313, C[314] || CT.C314, C[315] || CT.C315, C[316] || CT.C316, C[317] || CT.C317, C[318] || CT.C318], widget_inspector._Location);
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[282] || CT.C282,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 517,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart"
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 22,
        [_Location_line]: 558,
        [_Location_file]: null
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 22,
        [_Location_line]: 559,
        [_Location_file]: null
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 22,
        [_Location_line]: 560,
        [_Location_file]: null
      });
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 561,
        [_Location_file]: null
      });
    },
    get C325() {
      return C[325] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 22,
        [_Location_line]: 562,
        [_Location_file]: null
      });
    },
    get C326() {
      return C[326] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 22,
        [_Location_line]: 563,
        [_Location_file]: null
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 564,
        [_Location_file]: null
      });
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 565,
        [_Location_file]: null
      });
    },
    get C329() {
      return C[329] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 22,
        [_Location_line]: 566,
        [_Location_file]: null
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 22,
        [_Location_line]: 567,
        [_Location_file]: null
      });
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 22,
        [_Location_line]: 568,
        [_Location_file]: null
      });
    },
    get C332() {
      return C[332] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 22,
        [_Location_line]: 569,
        [_Location_file]: null
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 570,
        [_Location_file]: null
      });
    },
    get C334() {
      return C[334] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 571,
        [_Location_file]: null
      });
    },
    get C335() {
      return C[335] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 22,
        [_Location_line]: 572,
        [_Location_file]: null
      });
    },
    get C336() {
      return C[336] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 22,
        [_Location_line]: 573,
        [_Location_file]: null
      });
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 22,
        [_Location_line]: 574,
        [_Location_file]: null
      });
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 22,
        [_Location_line]: 575,
        [_Location_file]: null
      });
    },
    get C339() {
      return C[339] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 22,
        [_Location_line]: 576,
        [_Location_file]: null
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 22,
        [_Location_line]: 577,
        [_Location_file]: null
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 22,
        [_Location_line]: 578,
        [_Location_file]: null
      });
    },
    get C342() {
      return C[342] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 22,
        [_Location_line]: 579,
        [_Location_file]: null
      });
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 22,
        [_Location_line]: 580,
        [_Location_file]: null
      });
    },
    get C344() {
      return C[344] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 581,
        [_Location_file]: null
      });
    },
    get C345() {
      return C[345] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 22,
        [_Location_line]: 582,
        [_Location_file]: null
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 22,
        [_Location_line]: 583,
        [_Location_file]: null
      });
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 584,
        [_Location_file]: null
      });
    },
    get C348() {
      return C[348] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 22,
        [_Location_line]: 585,
        [_Location_file]: null
      });
    },
    get C349() {
      return C[349] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedRanges",
        [_Location_column]: 15,
        [_Location_line]: 586,
        [_Location_file]: null
      });
    },
    get C350() {
      return C[350] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 587,
        [_Location_file]: null
      });
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 22,
        [_Location_line]: 588,
        [_Location_file]: null
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 589,
        [_Location_file]: null
      });
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 22,
        [_Location_line]: 590,
        [_Location_file]: null
      });
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 22,
        [_Location_line]: 591,
        [_Location_file]: null
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberPanelWidth",
        [_Location_column]: 15,
        [_Location_line]: 592,
        [_Location_file]: null
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widgets",
        [_Location_column]: 15,
        [_Location_line]: 593,
        [_Location_file]: null
      });
    },
    get C320() {
      return C[320] = dart.constList([C[321] || CT.C321, C[322] || CT.C322, C[323] || CT.C323, C[324] || CT.C324, C[325] || CT.C325, C[326] || CT.C326, C[327] || CT.C327, C[328] || CT.C328, C[329] || CT.C329, C[330] || CT.C330, C[331] || CT.C331, C[332] || CT.C332, C[333] || CT.C333, C[334] || CT.C334, C[335] || CT.C335, C[336] || CT.C336, C[337] || CT.C337, C[338] || CT.C338, C[339] || CT.C339, C[340] || CT.C340, C[341] || CT.C341, C[342] || CT.C342, C[343] || CT.C343, C[344] || CT.C344, C[345] || CT.C345, C[346] || CT.C346, C[347] || CT.C347, C[348] || CT.C348, C[349] || CT.C349, C[350] || CT.C350, C[351] || CT.C351, C[352] || CT.C352, C[353] || CT.C353, C[354] || CT.C354, C[355] || CT.C355, C[356] || CT.C356], widget_inspector._Location);
    },
    get C319() {
      return C[319] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[320] || CT.C320,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 557,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart"
      });
    },
    get C357() {
      return C[357] = dart.constList([], framework.Widget);
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: date_picker_manager.DateRangePickerNavigationDirection.prototype,
        [_name$]: "DateRangePickerNavigationDirection.horizontal",
        index: 1
      });
    },
    get C359() {
      return C[359] = dart.const({
        __proto__: date_picker_manager.DateRangePickerNavigationDirection.prototype,
        [_name$]: "DateRangePickerNavigationDirection.vertical",
        index: 0
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: date_picker_manager.DateRangePickerViewHeaderStyle.prototype,
        [DateRangePickerViewHeaderStyle_textStyle]: null,
        [DateRangePickerViewHeaderStyle_backgroundColor]: null
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: date_picker_manager.DateRangePickerWeekNumberStyle.prototype,
        [DateRangePickerWeekNumberStyle_textStyle]: null,
        [DateRangePickerWeekNumberStyle_backgroundColor]: null
      });
    },
    get C362() {
      return C[362] = dart.constList([6, 7], core.int);
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerView.prototype,
        [_name$0]: "HijriDatePickerView.month",
        index: 0
      });
    },
    get C364() {
      return C[364] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerView.prototype,
        [_name$0]: "HijriDatePickerView.year",
        index: 1
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerView.prototype,
        [_name$0]: "HijriDatePickerView.decade",
        index: 2
      });
    },
    get C366() {
      return C[366] = dart.constList([C[363] || CT.C363, C[364] || CT.C364, C[365] || CT.C365], hijri_date_picker_manager.HijriDatePickerView);
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: date_picker_manager.DateRangePickerView.prototype,
        [_name$]: "DateRangePickerView.month",
        index: 0
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: date_picker_manager.DateRangePickerView.prototype,
        [_name$]: "DateRangePickerView.year",
        index: 1
      });
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: date_picker_manager.DateRangePickerView.prototype,
        [_name$]: "DateRangePickerView.decade",
        index: 2
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: date_picker_manager.DateRangePickerView.prototype,
        [_name$]: "DateRangePickerView.century",
        index: 3
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name]: "TextAlign.left",
        index: 0
      });
    },
    get C372() {
      return C[372] = dart.constList([C[33] || CT.C33, C[67] || CT.C67, C[101] || CT.C101, C[169] || CT.C169, C[135] || CT.C135], date_picker_manager.DateRangePickerSelectionMode);
    },
    get C373() {
      return C[373] = dart.constList([C[367] || CT.C367, C[368] || CT.C368, C[369] || CT.C369, C[370] || CT.C370], date_picker_manager.DateRangePickerView);
    },
    get C374() {
      return C[374] = dart.constList([C[172] || CT.C172, C[171] || CT.C171], date_picker_manager.DateRangePickerSelectionShape);
    },
    get C375() {
      return C[375] = dart.constList([C[359] || CT.C359, C[358] || CT.C358], date_picker_manager.DateRangePickerNavigationDirection);
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: date_picker_manager.DateRangePickerNavigationMode.prototype,
        [_name$]: "DateRangePickerNavigationMode.none",
        index: 0
      });
    },
    get C377() {
      return C[377] = dart.const({
        __proto__: date_picker_manager.DateRangePickerNavigationMode.prototype,
        [_name$]: "DateRangePickerNavigationMode.snap",
        index: 1
      });
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: date_picker_manager.DateRangePickerNavigationMode.prototype,
        [_name$]: "DateRangePickerNavigationMode.scroll",
        index: 2
      });
    },
    get C379() {
      return C[379] = dart.constList([C[376] || CT.C376, C[377] || CT.C377, C[378] || CT.C378], date_picker_manager.DateRangePickerNavigationMode);
    },
    get C380() {
      return C[380] = dart.const({
        __proto__: date_picker_manager.DateRangePickerHeaderStyle.prototype,
        [backgroundColor$]: null,
        [textAlign$]: C[371] || CT.C371,
        [textStyle$1]: null
      });
    },
    get C381() {
      return C[381] = dart.const({
        __proto__: date_picker_manager.DateRangePickerYearCellStyle.prototype,
        [leadingDatesDecoration$]: null,
        [todayCellDecoration$1]: null,
        [cellDecoration$1]: null,
        [disabledDatesDecoration$1]: null,
        [disabledDatesTextStyle$1]: null,
        [leadingDatesTextStyle$]: null,
        [todayTextStyle$1]: null,
        [textStyle$4]: null
      });
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: date_picker_manager.DateRangePickerMonthViewSettings.prototype,
        [weekNumberStyle$1]: C[361] || CT.C361,
        [showWeekNumber$1]: false,
        [weekendDays$1]: C[362] || CT.C362,
        [specialDates$1]: null,
        [blackoutDates$1]: null,
        [showTrailingAndLeadingDates$]: false,
        [selectionRadius$1]: -1,
        [viewHeaderHeight$0]: 30,
        [viewHeaderStyle$0]: C[360] || CT.C360,
        [firstDayOfWeek$0]: 7,
        [enableSwipeSelection$0]: true,
        [numberOfWeeksInView$]: 6,
        [dayFormat$0]: "EE"
      });
    },
    get C383() {
      return C[383] = dart.const({
        __proto__: date_picker_manager.DateRangePickerMonthCellStyle.prototype,
        [endRangeSelectionColor$1]: null,
        [rangeSelectionColor$1]: null,
        [startRangeSelectionColor$1]: null,
        [selectionColor$1]: null,
        [leadingDatesDecoration$0]: null,
        [trailingDatesDecoration$]: null,
        [todayCellDecoration$2]: null,
        [cellDecoration$2]: null,
        [disabledDatesDecoration$2]: null,
        [blackoutDatesDecoration$0]: null,
        [weekendDatesDecoration$0]: null,
        [specialDatesDecoration$0]: null,
        [specialDatesTextStyle$0]: null,
        [weekendTextStyle$0]: null,
        [blackoutDateTextStyle$0]: null,
        [rangeTextStyle$1]: null,
        [selectionTextStyle$1]: null,
        [disabledDatesTextStyle$2]: null,
        [leadingDatesTextStyle$0]: null,
        [trailingDatesTextStyle$]: null,
        [todayTextStyle$2]: null,
        [textStyle$5]: null
      });
    },
    get C386() {
      return C[386] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 1679,
        [_Location_file]: null
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 7,
        [_Location_line]: 1680,
        [_Location_file]: null
      });
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 7,
        [_Location_line]: 1681,
        [_Location_file]: null
      });
    },
    get C389() {
      return C[389] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerHeight",
        [_Location_column]: 7,
        [_Location_line]: 1682,
        [_Location_file]: null
      });
    },
    get C390() {
      return C[390] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 7,
        [_Location_line]: 1683,
        [_Location_file]: null
      });
    },
    get C391() {
      return C[391] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 1684,
        [_Location_file]: null
      });
    },
    get C392() {
      return C[392] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedDate",
        [_Location_column]: 7,
        [_Location_line]: 1685,
        [_Location_file]: null
      });
    },
    get C393() {
      return C[393] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedDates",
        [_Location_column]: 7,
        [_Location_line]: 1686,
        [_Location_file]: null
      });
    },
    get C394() {
      return C[394] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedRange",
        [_Location_column]: 7,
        [_Location_line]: 1687,
        [_Location_file]: null
      });
    },
    get C395() {
      return C[395] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedRanges",
        [_Location_column]: 7,
        [_Location_line]: 1688,
        [_Location_file]: null
      });
    },
    get C396() {
      return C[396] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "toggleDaySelection",
        [_Location_column]: 7,
        [_Location_line]: 1689,
        [_Location_file]: null
      });
    },
    get C397() {
      return C[397] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 7,
        [_Location_line]: 1690,
        [_Location_file]: null
      });
    },
    get C398() {
      return C[398] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showNavigationArrow",
        [_Location_column]: 7,
        [_Location_line]: 1691,
        [_Location_file]: null
      });
    },
    get C399() {
      return C[399] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 7,
        [_Location_line]: 1692,
        [_Location_file]: null
      });
    },
    get C400() {
      return C[400] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 7,
        [_Location_line]: 1693,
        [_Location_file]: null
      });
    },
    get C401() {
      return C[401] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 1694,
        [_Location_file]: null
      });
    },
    get C402() {
      return C[402] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onViewChanged",
        [_Location_column]: 7,
        [_Location_line]: 1695,
        [_Location_file]: null
      });
    },
    get C403() {
      return C[403] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 7,
        [_Location_line]: 1696,
        [_Location_file]: null
      });
    },
    get C404() {
      return C[404] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onCancel",
        [_Location_column]: 7,
        [_Location_line]: 1697,
        [_Location_file]: null
      });
    },
    get C405() {
      return C[405] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSubmit",
        [_Location_column]: 7,
        [_Location_line]: 1698,
        [_Location_file]: null
      });
    },
    get C406() {
      return C[406] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerStyle",
        [_Location_column]: 7,
        [_Location_line]: 1699,
        [_Location_file]: null
      });
    },
    get C407() {
      return C[407] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "yearCellStyle",
        [_Location_column]: 7,
        [_Location_line]: 1700,
        [_Location_file]: null
      });
    },
    get C408() {
      return C[408] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthViewSettings",
        [_Location_column]: 7,
        [_Location_line]: 1701,
        [_Location_file]: null
      });
    },
    get C409() {
      return C[409] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialDisplayDate",
        [_Location_column]: 7,
        [_Location_line]: 1702,
        [_Location_file]: null
      });
    },
    get C410() {
      return C[410] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 7,
        [_Location_line]: 1703,
        [_Location_file]: null
      });
    },
    get C411() {
      return C[411] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 7,
        [_Location_line]: 1704,
        [_Location_file]: null
      });
    },
    get C412() {
      return C[412] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthCellStyle",
        [_Location_column]: 7,
        [_Location_line]: 1705,
        [_Location_file]: null
      });
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "allowViewNavigation",
        [_Location_column]: 7,
        [_Location_line]: 1706,
        [_Location_file]: null
      });
    },
    get C414() {
      return C[414] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 7,
        [_Location_line]: 1707,
        [_Location_file]: null
      });
    },
    get C415() {
      return C[415] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewSpacing",
        [_Location_column]: 7,
        [_Location_line]: 1708,
        [_Location_file]: null
      });
    },
    get C416() {
      return C[416] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 7,
        [_Location_line]: 1709,
        [_Location_file]: null
      });
    },
    get C417() {
      return C[417] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 7,
        [_Location_line]: 1710,
        [_Location_file]: null
      });
    },
    get C418() {
      return C[418] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 1711,
        [_Location_file]: null
      });
    },
    get C419() {
      return C[419] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 1712,
        [_Location_file]: null
      });
    },
    get C420() {
      return C[420] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 1713,
        [_Location_file]: null
      });
    },
    get C421() {
      return C[421] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 7,
        [_Location_line]: 1714,
        [_Location_file]: null
      });
    },
    get C422() {
      return C[422] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 7,
        [_Location_line]: 1715,
        [_Location_file]: null
      });
    },
    get C423() {
      return C[423] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 7,
        [_Location_line]: 1716,
        [_Location_file]: null
      });
    },
    get C424() {
      return C[424] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellBuilder",
        [_Location_column]: 7,
        [_Location_line]: 1717,
        [_Location_file]: null
      });
    },
    get C425() {
      return C[425] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationMode",
        [_Location_column]: 7,
        [_Location_line]: 1718,
        [_Location_file]: null
      });
    },
    get C426() {
      return C[426] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "confirmText",
        [_Location_column]: 7,
        [_Location_line]: 1719,
        [_Location_file]: null
      });
    },
    get C427() {
      return C[427] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cancelText",
        [_Location_column]: 7,
        [_Location_line]: 1720,
        [_Location_file]: null
      });
    },
    get C428() {
      return C[428] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showActionButtons",
        [_Location_column]: 7,
        [_Location_line]: 1721,
        [_Location_file]: null
      });
    },
    get C385() {
      return C[385] = dart.constList([C[386] || CT.C386, C[387] || CT.C387, C[388] || CT.C388, C[389] || CT.C389, C[390] || CT.C390, C[391] || CT.C391, C[392] || CT.C392, C[393] || CT.C393, C[394] || CT.C394, C[395] || CT.C395, C[396] || CT.C396, C[397] || CT.C397, C[398] || CT.C398, C[399] || CT.C399, C[400] || CT.C400, C[401] || CT.C401, C[402] || CT.C402, C[403] || CT.C403, C[404] || CT.C404, C[405] || CT.C405, C[406] || CT.C406, C[407] || CT.C407, C[408] || CT.C408, C[409] || CT.C409, C[410] || CT.C410, C[411] || CT.C411, C[412] || CT.C412, C[413] || CT.C413, C[414] || CT.C414, C[415] || CT.C415, C[416] || CT.C416, C[417] || CT.C417, C[418] || CT.C418, C[419] || CT.C419, C[420] || CT.C420, C[421] || CT.C421, C[422] || CT.C422, C[423] || CT.C423, C[424] || CT.C424, C[425] || CT.C425, C[426] || CT.C426, C[427] || CT.C427, C[428] || CT.C428], widget_inspector._Location);
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[385] || CT.C385,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1678,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C429() {
      return C[429] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerYearCellStyle.prototype,
        [todayCellDecoration$]: null,
        [cellDecoration$]: null,
        [disabledDatesDecoration$]: null,
        [disabledDatesTextStyle$]: null,
        [todayTextStyle$]: null,
        [textStyle$]: null
      });
    },
    get C430() {
      return C[430] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerMonthViewSettings.prototype,
        [weekendDays$0]: C[362] || CT.C362,
        [weekNumberStyle$0]: C[361] || CT.C361,
        [showWeekNumber$0]: false,
        [specialDates$0]: null,
        [blackoutDates$0]: null,
        [viewHeaderHeight$]: 30,
        [viewHeaderStyle$]: C[360] || CT.C360,
        [firstDayOfWeek$]: 7,
        [enableSwipeSelection$]: true,
        [dayFormat$]: "EE"
      });
    },
    get C431() {
      return C[431] = dart.const({
        __proto__: hijri_date_picker_manager.HijriDatePickerMonthCellStyle.prototype,
        [todayCellDecoration$0]: null,
        [cellDecoration$0]: null,
        [disabledDatesDecoration$0]: null,
        [blackoutDatesDecoration$]: null,
        [weekendDatesDecoration$]: null,
        [specialDatesDecoration$]: null,
        [specialDatesTextStyle$]: null,
        [weekendTextStyle$]: null,
        [blackoutDateTextStyle$]: null,
        [disabledDatesTextStyle$0]: null,
        [todayTextStyle$0]: null,
        [textStyle$0]: null
      });
    },
    get C434() {
      return C[434] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 3384,
        [_Location_file]: null
      });
    },
    get C435() {
      return C[435] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 7,
        [_Location_line]: 3385,
        [_Location_file]: null
      });
    },
    get C436() {
      return C[436] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 7,
        [_Location_line]: 3386,
        [_Location_file]: null
      });
    },
    get C437() {
      return C[437] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerHeight",
        [_Location_column]: 7,
        [_Location_line]: 3387,
        [_Location_file]: null
      });
    },
    get C438() {
      return C[438] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 7,
        [_Location_line]: 3388,
        [_Location_file]: null
      });
    },
    get C439() {
      return C[439] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 3389,
        [_Location_file]: null
      });
    },
    get C440() {
      return C[440] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedDate",
        [_Location_column]: 7,
        [_Location_line]: 3390,
        [_Location_file]: null
      });
    },
    get C441() {
      return C[441] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedDates",
        [_Location_column]: 7,
        [_Location_line]: 3391,
        [_Location_file]: null
      });
    },
    get C442() {
      return C[442] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedRange",
        [_Location_column]: 7,
        [_Location_line]: 3392,
        [_Location_file]: null
      });
    },
    get C443() {
      return C[443] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialSelectedRanges",
        [_Location_column]: 7,
        [_Location_line]: 3393,
        [_Location_file]: null
      });
    },
    get C444() {
      return C[444] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "toggleDaySelection",
        [_Location_column]: 7,
        [_Location_line]: 3394,
        [_Location_file]: null
      });
    },
    get C445() {
      return C[445] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 7,
        [_Location_line]: 3395,
        [_Location_file]: null
      });
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showNavigationArrow",
        [_Location_column]: 7,
        [_Location_line]: 3396,
        [_Location_file]: null
      });
    },
    get C447() {
      return C[447] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 7,
        [_Location_line]: 3397,
        [_Location_file]: null
      });
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 7,
        [_Location_line]: 3398,
        [_Location_file]: null
      });
    },
    get C449() {
      return C[449] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 3399,
        [_Location_file]: null
      });
    },
    get C450() {
      return C[450] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onViewChanged",
        [_Location_column]: 7,
        [_Location_line]: 3400,
        [_Location_file]: null
      });
    },
    get C451() {
      return C[451] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelectionChanged",
        [_Location_column]: 7,
        [_Location_line]: 3401,
        [_Location_file]: null
      });
    },
    get C452() {
      return C[452] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onCancel",
        [_Location_column]: 7,
        [_Location_line]: 3402,
        [_Location_file]: null
      });
    },
    get C453() {
      return C[453] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSubmit",
        [_Location_column]: 7,
        [_Location_line]: 3403,
        [_Location_file]: null
      });
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerStyle",
        [_Location_column]: 7,
        [_Location_line]: 3404,
        [_Location_file]: null
      });
    },
    get C455() {
      return C[455] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "yearCellStyle",
        [_Location_column]: 7,
        [_Location_line]: 3405,
        [_Location_file]: null
      });
    },
    get C456() {
      return C[456] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthViewSettings",
        [_Location_column]: 7,
        [_Location_line]: 3406,
        [_Location_file]: null
      });
    },
    get C457() {
      return C[457] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "initialDisplayDate",
        [_Location_column]: 7,
        [_Location_line]: 3407,
        [_Location_file]: null
      });
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 7,
        [_Location_line]: 3408,
        [_Location_file]: null
      });
    },
    get C459() {
      return C[459] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 7,
        [_Location_line]: 3409,
        [_Location_file]: null
      });
    },
    get C460() {
      return C[460] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthCellStyle",
        [_Location_column]: 7,
        [_Location_line]: 3410,
        [_Location_file]: null
      });
    },
    get C461() {
      return C[461] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "allowViewNavigation",
        [_Location_column]: 7,
        [_Location_line]: 3411,
        [_Location_file]: null
      });
    },
    get C462() {
      return C[462] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 7,
        [_Location_line]: 3412,
        [_Location_file]: null
      });
    },
    get C463() {
      return C[463] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewSpacing",
        [_Location_column]: 7,
        [_Location_line]: 3413,
        [_Location_file]: null
      });
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 7,
        [_Location_line]: 3414,
        [_Location_file]: null
      });
    },
    get C465() {
      return C[465] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 7,
        [_Location_line]: 3415,
        [_Location_file]: null
      });
    },
    get C466() {
      return C[466] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 3416,
        [_Location_file]: null
      });
    },
    get C467() {
      return C[467] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 3417,
        [_Location_file]: null
      });
    },
    get C468() {
      return C[468] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 7,
        [_Location_line]: 3418,
        [_Location_file]: null
      });
    },
    get C469() {
      return C[469] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 7,
        [_Location_line]: 3419,
        [_Location_file]: null
      });
    },
    get C470() {
      return C[470] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 7,
        [_Location_line]: 3420,
        [_Location_file]: null
      });
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 7,
        [_Location_line]: 3421,
        [_Location_file]: null
      });
    },
    get C472() {
      return C[472] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellBuilder",
        [_Location_column]: 7,
        [_Location_line]: 3422,
        [_Location_file]: null
      });
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationMode",
        [_Location_column]: 7,
        [_Location_line]: 3423,
        [_Location_file]: null
      });
    },
    get C474() {
      return C[474] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "confirmText",
        [_Location_column]: 7,
        [_Location_line]: 3424,
        [_Location_file]: null
      });
    },
    get C475() {
      return C[475] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cancelText",
        [_Location_column]: 7,
        [_Location_line]: 3425,
        [_Location_file]: null
      });
    },
    get C476() {
      return C[476] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showActionButtons",
        [_Location_column]: 7,
        [_Location_line]: 3426,
        [_Location_file]: null
      });
    },
    get C477() {
      return C[477] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 7,
        [_Location_line]: 3427,
        [_Location_file]: null
      });
    },
    get C433() {
      return C[433] = dart.constList([C[434] || CT.C434, C[435] || CT.C435, C[436] || CT.C436, C[437] || CT.C437, C[438] || CT.C438, C[439] || CT.C439, C[440] || CT.C440, C[441] || CT.C441, C[442] || CT.C442, C[443] || CT.C443, C[444] || CT.C444, C[445] || CT.C445, C[446] || CT.C446, C[447] || CT.C447, C[448] || CT.C448, C[449] || CT.C449, C[450] || CT.C450, C[451] || CT.C451, C[452] || CT.C452, C[453] || CT.C453, C[454] || CT.C454, C[455] || CT.C455, C[456] || CT.C456, C[457] || CT.C457, C[458] || CT.C458, C[459] || CT.C459, C[460] || CT.C460, C[461] || CT.C461, C[462] || CT.C462, C[463] || CT.C463, C[464] || CT.C464, C[465] || CT.C465, C[466] || CT.C466, C[467] || CT.C467, C[468] || CT.C468, C[469] || CT.C469, C[470] || CT.C470, C[471] || CT.C471, C[472] || CT.C472, C[473] || CT.C473, C[474] || CT.C474, C[475] || CT.C475, C[476] || CT.C476, C[477] || CT.C477], widget_inspector._Location);
    },
    get C432() {
      return C[432] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[433] || CT.C433,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 3383,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C480() {
      return C[480] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 3967,
        [_Location_file]: null
      });
    },
    get C481() {
      return C[481] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 3968,
        [_Location_file]: null
      });
    },
    get C482() {
      return C[482] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 3969,
        [_Location_file]: null
      });
    },
    get C483() {
      return C[483] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 3970,
        [_Location_file]: null
      });
    },
    get C479() {
      return C[479] = dart.constList([C[480] || CT.C480, C[481] || CT.C481, C[482] || CT.C482, C[483] || CT.C483], widget_inspector._Location);
    },
    get C478() {
      return C[478] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[479] || CT.C479,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 3966,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C486() {
      return C[486] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 3939,
        [_Location_file]: null
      });
    },
    get C485() {
      return C[485] = dart.constList([C[486] || CT.C486], widget_inspector._Location);
    },
    get C484() {
      return C[484] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[485] || CT.C485,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 3938,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C489() {
      return C[489] = dart.const({
        __proto__: scroll_physics.RangeMaintainingScrollPhysics.prototype,
        [ScrollPhysics_parent]: null
      });
    },
    get C488() {
      return C[488] = dart.const({
        __proto__: scroll_physics.ClampingScrollPhysics.prototype,
        [ScrollPhysics_parent]: C[489] || CT.C489
      });
    },
    get C487() {
      return C[487] = dart.const({
        __proto__: scroll_physics.AlwaysScrollableScrollPhysics.prototype,
        [ScrollPhysics_parent]: C[488] || CT.C488
      });
    },
    get C492() {
      return C[492] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "itemExtent",
        [_Location_column]: 11,
        [_Location_line]: 4613,
        [_Location_file]: null
      });
    },
    get C493() {
      return C[493] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 11,
        [_Location_line]: 4614,
        [_Location_file]: null
      });
    },
    get C491() {
      return C[491] = dart.constList([C[492] || CT.C492, C[493] || CT.C493], widget_inspector._Location);
    },
    get C490() {
      return C[490] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[491] || CT.C491,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 4612,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C496() {
      return C[496] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "itemExtent",
        [_Location_column]: 11,
        [_Location_line]: 4631,
        [_Location_file]: null
      });
    },
    get C497() {
      return C[497] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 11,
        [_Location_line]: 4632,
        [_Location_file]: null
      });
    },
    get C498() {
      return C[498] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 4645,
        [_Location_file]: null
      });
    },
    get C495() {
      return C[495] = dart.constList([C[496] || CT.C496, C[497] || CT.C497, C[498] || CT.C498], widget_inspector._Location);
    },
    get C494() {
      return C[494] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[495] || CT.C495,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 4630,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C501() {
      return C[501] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "scrollDirection",
        [_Location_column]: 7,
        [_Location_line]: 4604,
        [_Location_file]: null
      });
    },
    get C502() {
      return C[502] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 4605,
        [_Location_file]: null
      });
    },
    get C503() {
      return C[503] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "physics",
        [_Location_column]: 7,
        [_Location_line]: 4606,
        [_Location_file]: null
      });
    },
    get C504() {
      return C[504] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 4609,
        [_Location_file]: null
      });
    },
    get C505() {
      return C[505] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "center",
        [_Location_column]: 7,
        [_Location_line]: 4610,
        [_Location_file]: null
      });
    },
    get C506() {
      return C[506] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "slivers",
        [_Location_column]: 7,
        [_Location_line]: 4611,
        [_Location_file]: null
      });
    },
    get C500() {
      return C[500] = dart.constList([C[501] || CT.C501, C[502] || CT.C502, C[503] || CT.C503, C[504] || CT.C504, C[505] || CT.C505, C[506] || CT.C506], widget_inspector._Location);
    },
    get C499() {
      return C[499] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[500] || CT.C500,
        [_Location_name]: null,
        [_Location_column]: 31,
        [_Location_line]: 4603,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C509() {
      return C[509] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 4652,
        [_Location_file]: null
      });
    },
    get C508() {
      return C[508] = dart.constList([C[509] || CT.C509], widget_inspector._Location);
    },
    get C507() {
      return C[507] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[508] || CT.C508,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4651,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C512() {
      return C[512] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 13,
        [_Location_line]: 4662,
        [_Location_file]: null
      });
    },
    get C513() {
      return C[513] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 13,
        [_Location_line]: 4663,
        [_Location_file]: null
      });
    },
    get C514() {
      return C[514] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 13,
        [_Location_line]: 4664,
        [_Location_file]: null
      });
    },
    get C515() {
      return C[515] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 13,
        [_Location_line]: 4665,
        [_Location_file]: null
      });
    },
    get C516() {
      return C[516] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 4666,
        [_Location_file]: null
      });
    },
    get C511() {
      return C[511] = dart.constList([C[512] || CT.C512, C[513] || CT.C513, C[514] || CT.C514, C[515] || CT.C515, C[516] || CT.C516], widget_inspector._Location);
    },
    get C510() {
      return C[510] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[511] || CT.C511,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 4661,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C519() {
      return C[519] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 20,
        [_Location_line]: 4659,
        [_Location_file]: null
      });
    },
    get C518() {
      return C[518] = dart.constList([C[519] || CT.C519], widget_inspector._Location);
    },
    get C517() {
      return C[517] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[518] || CT.C518,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4659,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C522() {
      return C[522] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 15,
        [_Location_line]: 4767,
        [_Location_file]: null
      });
    },
    get C523() {
      return C[523] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerStyle",
        [_Location_column]: 22,
        [_Location_line]: 4768,
        [_Location_file]: null
      });
    },
    get C524() {
      return C[524] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 22,
        [_Location_line]: 4769,
        [_Location_file]: null
      });
    },
    get C525() {
      return C[525] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 15,
        [_Location_line]: 4770,
        [_Location_file]: null
      });
    },
    get C526() {
      return C[526] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "numberOfWeeksInView",
        [_Location_column]: 37,
        [_Location_line]: 4771,
        [_Location_file]: null
      });
    },
    get C527() {
      return C[527] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showNavigationArrow",
        [_Location_column]: 22,
        [_Location_line]: 4773,
        [_Location_file]: null
      });
    },
    get C528() {
      return C[528] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 22,
        [_Location_line]: 4774,
        [_Location_file]: null
      });
    },
    get C529() {
      return C[529] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableSwipeSelection",
        [_Location_column]: 40,
        [_Location_line]: 4775,
        [_Location_file]: null
      });
    },
    get C530() {
      return C[530] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationMode",
        [_Location_column]: 22,
        [_Location_line]: 4776,
        [_Location_file]: null
      });
    },
    get C531() {
      return C[531] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 22,
        [_Location_line]: 4777,
        [_Location_file]: null
      });
    },
    get C532() {
      return C[532] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 22,
        [_Location_line]: 4778,
        [_Location_file]: null
      });
    },
    get C533() {
      return C[533] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 22,
        [_Location_line]: 4779,
        [_Location_file]: null
      });
    },
    get C534() {
      return C[534] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 15,
        [_Location_line]: 4780,
        [_Location_file]: null
      });
    },
    get C535() {
      return C[535] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 15,
        [_Location_line]: 4781,
        [_Location_file]: null
      });
    },
    get C536() {
      return C[536] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 15,
        [_Location_line]: 4782,
        [_Location_file]: null
      });
    },
    get C537() {
      return C[537] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 22,
        [_Location_line]: 4783,
        [_Location_file]: null
      });
    },
    get C538() {
      return C[538] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "allowViewNavigation",
        [_Location_column]: 22,
        [_Location_line]: 4784,
        [_Location_file]: null
      });
    },
    get C539() {
      return C[539] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "previousNavigationCallback",
        [_Location_column]: 27,
        [_Location_line]: 4785,
        [_Location_file]: null
      });
    },
    get C540() {
      return C[540] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "nextNavigationCallback",
        [_Location_column]: 27,
        [_Location_line]: 4786,
        [_Location_file]: null
      });
    },
    get C541() {
      return C[541] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 15,
        [_Location_line]: 4787,
        [_Location_file]: null
      });
    },
    get C542() {
      return C[542] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 22,
        [_Location_line]: 4788,
        [_Location_file]: null
      });
    },
    get C543() {
      return C[543] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 37,
        [_Location_line]: 4789,
        [_Location_file]: null
      });
    },
    get C544() {
      return C[544] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 15,
        [_Location_line]: 4790,
        [_Location_file]: null
      });
    },
    get C545() {
      return C[545] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 15,
        [_Location_line]: 4791,
        [_Location_file]: null
      });
    },
    get C546() {
      return C[546] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 22,
        [_Location_line]: 4792,
        [_Location_file]: null
      });
    },
    get C547() {
      return C[547] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 15,
        [_Location_line]: 4793,
        [_Location_file]: null
      });
    },
    get C521() {
      return C[521] = dart.constList([C[522] || CT.C522, C[523] || CT.C523, C[524] || CT.C524, C[525] || CT.C525, C[526] || CT.C526, C[527] || CT.C527, C[528] || CT.C528, C[529] || CT.C529, C[530] || CT.C530, C[531] || CT.C531, C[532] || CT.C532, C[533] || CT.C533, C[534] || CT.C534, C[535] || CT.C535, C[536] || CT.C536, C[537] || CT.C537, C[538] || CT.C538, C[539] || CT.C539, C[540] || CT.C540, C[541] || CT.C541, C[542] || CT.C542, C[543] || CT.C543, C[544] || CT.C544, C[545] || CT.C545, C[546] || CT.C546, C[547] || CT.C547], widget_inspector._Location);
    },
    get C520() {
      return C[520] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[521] || CT.C521,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 4766,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C550() {
      return C[550] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 11,
        [_Location_line]: 4765,
        [_Location_file]: null
      });
    },
    get C551() {
      return C[551] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 4766,
        [_Location_file]: null
      });
    },
    get C552() {
      return C[552] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 4794,
        [_Location_file]: null
      });
    },
    get C549() {
      return C[549] = dart.constList([C[550] || CT.C550, C[551] || CT.C551, C[552] || CT.C552], widget_inspector._Location);
    },
    get C548() {
      return C[548] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[549] || CT.C549,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 4764,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C555() {
      return C[555] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4764,
        [_Location_file]: null
      });
    },
    get C556() {
      return C[556] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 9,
        [_Location_line]: 4796,
        [_Location_file]: null
      });
    },
    get C554() {
      return C[554] = dart.constList([C[555] || CT.C555, C[556] || CT.C556], widget_inspector._Location);
    },
    get C553() {
      return C[553] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[554] || CT.C554,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4763,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C559() {
      return C[559] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 4759,
        [_Location_file]: null
      });
    },
    get C560() {
      return C[560] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 4760,
        [_Location_file]: null
      });
    },
    get C561() {
      return C[561] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 4761,
        [_Location_file]: null
      });
    },
    get C562() {
      return C[562] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 4762,
        [_Location_file]: null
      });
    },
    get C563() {
      return C[563] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 4763,
        [_Location_file]: null
      });
    },
    get C558() {
      return C[558] = dart.constList([C[559] || CT.C559, C[560] || CT.C560, C[561] || CT.C561, C[562] || CT.C562, C[563] || CT.C563], widget_inspector._Location);
    },
    get C557() {
      return C[557] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[558] || CT.C558,
        [_Location_name]: null,
        [_Location_column]: 27,
        [_Location_line]: 4758,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C566() {
      return C[566] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "picker",
        [_Location_column]: 9,
        [_Location_line]: 4843,
        [_Location_file]: null
      });
    },
    get C567() {
      return C[567] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 9,
        [_Location_line]: 4844,
        [_Location_file]: null
      });
    },
    get C568() {
      return C[568] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 9,
        [_Location_line]: 4845,
        [_Location_file]: null
      });
    },
    get C569() {
      return C[569] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 9,
        [_Location_line]: 4846,
        [_Location_file]: null
      });
    },
    get C570() {
      return C[570] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 4847,
        [_Location_file]: null
      });
    },
    get C571() {
      return C[571] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 4848,
        [_Location_file]: null
      });
    },
    get C572() {
      return C[572] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 9,
        [_Location_line]: 4849,
        [_Location_file]: null
      });
    },
    get C573() {
      return C[573] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 9,
        [_Location_line]: 4850,
        [_Location_file]: null
      });
    },
    get C574() {
      return C[574] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 9,
        [_Location_line]: 4851,
        [_Location_file]: null
      });
    },
    get C575() {
      return C[575] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "getPickerStateDetails",
        [_Location_column]: 9,
        [_Location_line]: 4852,
        [_Location_file]: null
      });
    },
    get C576() {
      return C[576] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "updatePickerStateDetails",
        [_Location_column]: 9,
        [_Location_line]: 4853,
        [_Location_file]: null
      });
    },
    get C577() {
      return C[577] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 9,
        [_Location_line]: 4854,
        [_Location_file]: null
      });
    },
    get C565() {
      return C[565] = dart.constList([C[566] || CT.C566, C[567] || CT.C567, C[568] || CT.C568, C[569] || CT.C569, C[570] || CT.C570, C[571] || CT.C571, C[572] || CT.C572, C[573] || CT.C573, C[574] || CT.C574, C[575] || CT.C575, C[576] || CT.C576, C[577] || CT.C577], widget_inspector._Location);
    },
    get C564() {
      return C[564] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[565] || CT.C565,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4842,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C580() {
      return C[580] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 4838,
        [_Location_file]: null
      });
    },
    get C581() {
      return C[581] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 4839,
        [_Location_file]: null
      });
    },
    get C582() {
      return C[582] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 4840,
        [_Location_file]: null
      });
    },
    get C583() {
      return C[583] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 4841,
        [_Location_file]: null
      });
    },
    get C584() {
      return C[584] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 4842,
        [_Location_file]: null
      });
    },
    get C579() {
      return C[579] = dart.constList([C[580] || CT.C580, C[581] || CT.C581, C[582] || CT.C582, C[583] || CT.C583, C[584] || CT.C584], widget_inspector._Location);
    },
    get C578() {
      return C[578] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[579] || CT.C579,
        [_Location_name]: null,
        [_Location_column]: 31,
        [_Location_line]: 4837,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C588() {
      return C[588] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "thickness",
        [_Location_column]: 11,
        [_Location_line]: 4866,
        [_Location_file]: null
      });
    },
    get C587() {
      return C[587] = dart.constList([C[588] || CT.C588], widget_inspector._Location);
    },
    get C586() {
      return C[586] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[587] || CT.C587,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 4865,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C585() {
      return C[585] = dart.const({
        __proto__: divider.VerticalDivider.prototype,
        [Widget__location]: C[586] || CT.C586,
        [Widget_key]: null,
        [VerticalDivider_color]: null,
        [VerticalDivider_endIndent]: null,
        [VerticalDivider_indent]: null,
        [VerticalDivider_thickness]: 1,
        [VerticalDivider_width]: null
      });
    },
    get C591() {
      return C[591] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 9,
        [_Location_line]: 4861,
        [_Location_file]: null
      });
    },
    get C592() {
      return C[592] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 9,
        [_Location_line]: 4862,
        [_Location_file]: null
      });
    },
    get C593() {
      return C[593] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 4863,
        [_Location_file]: null
      });
    },
    get C594() {
      return C[594] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 4864,
        [_Location_file]: null
      });
    },
    get C595() {
      return C[595] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4865,
        [_Location_file]: null
      });
    },
    get C590() {
      return C[590] = dart.constList([C[591] || CT.C591, C[592] || CT.C592, C[593] || CT.C593, C[594] || CT.C594, C[595] || CT.C595], widget_inspector._Location);
    },
    get C589() {
      return C[589] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[590] || CT.C590,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 4860,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C598() {
      return C[598] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHorizontal",
        [_Location_column]: 11,
        [_Location_line]: 4876,
        [_Location_file]: null
      });
    },
    get C599() {
      return C[599] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRTL",
        [_Location_column]: 11,
        [_Location_line]: 4877,
        [_Location_file]: null
      });
    },
    get C600() {
      return C[600] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 4878,
        [_Location_file]: null
      });
    },
    get C597() {
      return C[597] = dart.constList([C[598] || CT.C598, C[599] || CT.C599, C[600] || CT.C600], widget_inspector._Location);
    },
    get C596() {
      return C[596] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[597] || CT.C597,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 4875,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C603() {
      return C[603] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 4873,
        [_Location_file]: null
      });
    },
    get C604() {
      return C[604] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 4874,
        [_Location_file]: null
      });
    },
    get C605() {
      return C[605] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4875,
        [_Location_file]: null
      });
    },
    get C602() {
      return C[602] = dart.constList([C[603] || CT.C603, C[604] || CT.C604, C[605] || CT.C605], widget_inspector._Location);
    },
    get C601() {
      return C[601] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[602] || CT.C602,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 4872,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C608() {
      return C[608] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 17,
        [_Location_line]: 4897,
        [_Location_file]: null
      });
    },
    get C609() {
      return C[609] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "headerStyle",
        [_Location_column]: 24,
        [_Location_line]: 4898,
        [_Location_file]: null
      });
    },
    get C610() {
      return C[610] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 24,
        [_Location_line]: 4899,
        [_Location_file]: null
      });
    },
    get C611() {
      return C[611] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 17,
        [_Location_line]: 4900,
        [_Location_file]: null
      });
    },
    get C612() {
      return C[612] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "numberOfWeeksInView",
        [_Location_column]: 39,
        [_Location_line]: 4901,
        [_Location_file]: null
      });
    },
    get C613() {
      return C[613] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showNavigationArrow",
        [_Location_column]: 24,
        [_Location_line]: 4903,
        [_Location_file]: null
      });
    },
    get C614() {
      return C[614] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 24,
        [_Location_line]: 4904,
        [_Location_file]: null
      });
    },
    get C615() {
      return C[615] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableSwipeSelection",
        [_Location_column]: 42,
        [_Location_line]: 4905,
        [_Location_file]: null
      });
    },
    get C616() {
      return C[616] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationMode",
        [_Location_column]: 24,
        [_Location_line]: 4906,
        [_Location_file]: null
      });
    },
    get C617() {
      return C[617] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 24,
        [_Location_line]: 4907,
        [_Location_file]: null
      });
    },
    get C618() {
      return C[618] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 24,
        [_Location_line]: 4908,
        [_Location_file]: null
      });
    },
    get C619() {
      return C[619] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 24,
        [_Location_line]: 4909,
        [_Location_file]: null
      });
    },
    get C620() {
      return C[620] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 17,
        [_Location_line]: 4910,
        [_Location_file]: null
      });
    },
    get C621() {
      return C[621] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 17,
        [_Location_line]: 4911,
        [_Location_file]: null
      });
    },
    get C622() {
      return C[622] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 17,
        [_Location_line]: 4912,
        [_Location_file]: null
      });
    },
    get C623() {
      return C[623] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 24,
        [_Location_line]: 4913,
        [_Location_file]: null
      });
    },
    get C624() {
      return C[624] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "allowViewNavigation",
        [_Location_column]: 24,
        [_Location_line]: 4914,
        [_Location_file]: null
      });
    },
    get C625() {
      return C[625] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "previousNavigationCallback",
        [_Location_column]: 29,
        [_Location_line]: 4915,
        [_Location_file]: null
      });
    },
    get C626() {
      return C[626] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "nextNavigationCallback",
        [_Location_column]: 29,
        [_Location_line]: 4916,
        [_Location_file]: null
      });
    },
    get C627() {
      return C[627] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 17,
        [_Location_line]: 4917,
        [_Location_file]: null
      });
    },
    get C628() {
      return C[628] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 24,
        [_Location_line]: 4918,
        [_Location_file]: null
      });
    },
    get C629() {
      return C[629] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 39,
        [_Location_line]: 4919,
        [_Location_file]: null
      });
    },
    get C630() {
      return C[630] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 17,
        [_Location_line]: 4920,
        [_Location_file]: null
      });
    },
    get C631() {
      return C[631] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 17,
        [_Location_line]: 4921,
        [_Location_file]: null
      });
    },
    get C632() {
      return C[632] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 24,
        [_Location_line]: 4922,
        [_Location_file]: null
      });
    },
    get C633() {
      return C[633] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 17,
        [_Location_line]: 4923,
        [_Location_file]: null
      });
    },
    get C607() {
      return C[607] = dart.constList([C[608] || CT.C608, C[609] || CT.C609, C[610] || CT.C610, C[611] || CT.C611, C[612] || CT.C612, C[613] || CT.C613, C[614] || CT.C614, C[615] || CT.C615, C[616] || CT.C616, C[617] || CT.C617, C[618] || CT.C618, C[619] || CT.C619, C[620] || CT.C620, C[621] || CT.C621, C[622] || CT.C622, C[623] || CT.C623, C[624] || CT.C624, C[625] || CT.C625, C[626] || CT.C626, C[627] || CT.C627, C[628] || CT.C628, C[629] || CT.C629, C[630] || CT.C630, C[631] || CT.C631, C[632] || CT.C632, C[633] || CT.C633], widget_inspector._Location);
    },
    get C606() {
      return C[606] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[607] || CT.C607,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 4896,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C636() {
      return C[636] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 13,
        [_Location_line]: 4894,
        [_Location_file]: null
      });
    },
    get C637() {
      return C[637] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 4896,
        [_Location_file]: null
      });
    },
    get C638() {
      return C[638] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 13,
        [_Location_line]: 4924,
        [_Location_file]: null
      });
    },
    get C635() {
      return C[635] = dart.constList([C[636] || CT.C636, C[637] || CT.C637, C[638] || CT.C638], widget_inspector._Location);
    },
    get C634() {
      return C[634] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[635] || CT.C635,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 4893,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C641() {
      return C[641] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 4893,
        [_Location_file]: null
      });
    },
    get C642() {
      return C[642] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 11,
        [_Location_line]: 4926,
        [_Location_file]: null
      });
    },
    get C640() {
      return C[640] = dart.constList([C[641] || CT.C641, C[642] || CT.C642], widget_inspector._Location);
    },
    get C639() {
      return C[639] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[640] || CT.C640,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 4892,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C645() {
      return C[645] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 9,
        [_Location_line]: 4888,
        [_Location_file]: null
      });
    },
    get C646() {
      return C[646] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 9,
        [_Location_line]: 4889,
        [_Location_file]: null
      });
    },
    get C647() {
      return C[647] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 9,
        [_Location_line]: 4890,
        [_Location_file]: null
      });
    },
    get C648() {
      return C[648] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 4891,
        [_Location_file]: null
      });
    },
    get C649() {
      return C[649] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4892,
        [_Location_file]: null
      });
    },
    get C644() {
      return C[644] = dart.constList([C[645] || CT.C645, C[646] || CT.C646, C[647] || CT.C647, C[648] || CT.C648, C[649] || CT.C649], widget_inspector._Location);
    },
    get C643() {
      return C[643] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[644] || CT.C644,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 4887,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C652() {
      return C[652] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "picker",
        [_Location_column]: 11,
        [_Location_line]: 4938,
        [_Location_file]: null
      });
    },
    get C653() {
      return C[653] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 11,
        [_Location_line]: 4939,
        [_Location_file]: null
      });
    },
    get C654() {
      return C[654] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 11,
        [_Location_line]: 4940,
        [_Location_file]: null
      });
    },
    get C655() {
      return C[655] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 4941,
        [_Location_file]: null
      });
    },
    get C656() {
      return C[656] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 11,
        [_Location_line]: 4942,
        [_Location_file]: null
      });
    },
    get C657() {
      return C[657] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 11,
        [_Location_line]: 4943,
        [_Location_file]: null
      });
    },
    get C658() {
      return C[658] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 11,
        [_Location_line]: 4944,
        [_Location_file]: null
      });
    },
    get C659() {
      return C[659] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 11,
        [_Location_line]: 4945,
        [_Location_file]: null
      });
    },
    get C660() {
      return C[660] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "getPickerStateValues",
        [_Location_column]: 11,
        [_Location_line]: 4946,
        [_Location_file]: null
      });
    },
    get C661() {
      return C[661] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "updatePickerStateValues",
        [_Location_column]: 11,
        [_Location_line]: 4949,
        [_Location_file]: null
      });
    },
    get C662() {
      return C[662] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 4952,
        [_Location_file]: null
      });
    },
    get C651() {
      return C[651] = dart.constList([C[652] || CT.C652, C[653] || CT.C653, C[654] || CT.C654, C[655] || CT.C655, C[656] || CT.C656, C[657] || CT.C657, C[658] || CT.C658, C[659] || CT.C659, C[660] || CT.C660, C[661] || CT.C661, C[662] || CT.C662], widget_inspector._Location);
    },
    get C650() {
      return C[650] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[651] || CT.C651,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 4937,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C665() {
      return C[665] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 9,
        [_Location_line]: 4933,
        [_Location_file]: null
      });
    },
    get C666() {
      return C[666] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 9,
        [_Location_line]: 4934,
        [_Location_file]: null
      });
    },
    get C667() {
      return C[667] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 9,
        [_Location_line]: 4935,
        [_Location_file]: null
      });
    },
    get C668() {
      return C[668] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 4936,
        [_Location_file]: null
      });
    },
    get C669() {
      return C[669] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4937,
        [_Location_file]: null
      });
    },
    get C664() {
      return C[664] = dart.constList([C[665] || CT.C665, C[666] || CT.C666, C[667] || CT.C667, C[668] || CT.C668, C[669] || CT.C669], widget_inspector._Location);
    },
    get C663() {
      return C[663] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[664] || CT.C664,
        [_Location_name]: null,
        [_Location_column]: 7,
        [_Location_line]: 4932,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C672() {
      return C[672] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 18,
        [_Location_line]: 4886,
        [_Location_file]: null
      });
    },
    get C671() {
      return C[671] = dart.constList([C[672] || CT.C672], widget_inspector._Location);
    },
    get C670() {
      return C[670] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[671] || CT.C671,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 4886,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C675() {
      return C[675] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 24,
        [_Location_line]: 4961,
        [_Location_file]: null
      });
    },
    get C676() {
      return C[676] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 34,
        [_Location_line]: 4961,
        [_Location_file]: null
      });
    },
    get C674() {
      return C[674] = dart.constList([C[675] || CT.C675, C[676] || CT.C676], widget_inspector._Location);
    },
    get C673() {
      return C[673] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[674] || CT.C674,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4961,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C677() {
      return C[677] = dart.const({
        __proto__: box$.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 52,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C678() {
      return C[678] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 8
      });
    },
    get C681() {
      return C[681] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 24,
        [_Location_line]: 4987,
        [_Location_file]: null
      });
    },
    get C682() {
      return C[682] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 17,
        [_Location_line]: 4988,
        [_Location_file]: null
      });
    },
    get C680() {
      return C[680] = dart.constList([C[681] || CT.C681, C[682] || CT.C682], widget_inspector._Location);
    },
    get C679() {
      return C[679] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[680] || CT.C680,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 4986,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C685() {
      return C[685] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 4986,
        [_Location_file]: null
      });
    },
    get C686() {
      return C[686] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 15,
        [_Location_line]: 4990,
        [_Location_file]: null
      });
    },
    get C684() {
      return C[684] = dart.constList([C[685] || CT.C685, C[686] || CT.C686], widget_inspector._Location);
    },
    get C683() {
      return C[683] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[684] || CT.C684,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 4985,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C689() {
      return C[689] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 24,
        [_Location_line]: 4994,
        [_Location_file]: null
      });
    },
    get C690() {
      return C[690] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 17,
        [_Location_line]: 4995,
        [_Location_file]: null
      });
    },
    get C688() {
      return C[688] = dart.constList([C[689] || CT.C689, C[690] || CT.C690], widget_inspector._Location);
    },
    get C687() {
      return C[687] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[688] || CT.C688,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 4993,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C693() {
      return C[693] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 4993,
        [_Location_file]: null
      });
    },
    get C694() {
      return C[694] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 15,
        [_Location_line]: 4997,
        [_Location_file]: null
      });
    },
    get C692() {
      return C[692] = dart.constList([C[693] || CT.C693, C[694] || CT.C694], widget_inspector._Location);
    },
    get C691() {
      return C[691] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[692] || CT.C692,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 4992,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C697() {
      return C[697] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "spacing",
        [_Location_column]: 11,
        [_Location_line]: 4983,
        [_Location_file]: null
      });
    },
    get C698() {
      return C[698] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 4984,
        [_Location_file]: null
      });
    },
    get C696() {
      return C[696] = dart.constList([C[697] || CT.C697, C[698] || CT.C698], widget_inspector._Location);
    },
    get C695() {
      return C[695] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[696] || CT.C696,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 4982,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C701() {
      return C[701] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 9,
        [_Location_line]: 4979,
        [_Location_file]: null
      });
    },
    get C702() {
      return C[702] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 9,
        [_Location_line]: 4980,
        [_Location_file]: null
      });
    },
    get C703() {
      return C[703] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 9,
        [_Location_line]: 4981,
        [_Location_file]: null
      });
    },
    get C704() {
      return C[704] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 4982,
        [_Location_file]: null
      });
    },
    get C700() {
      return C[700] = dart.constList([C[701] || CT.C701, C[702] || CT.C702, C[703] || CT.C703, C[704] || CT.C704], widget_inspector._Location);
    },
    get C699() {
      return C[699] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[700] || CT.C700,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 4978,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C707() {
      return C[707] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 4974,
        [_Location_file]: null
      });
    },
    get C708() {
      return C[708] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 4975,
        [_Location_file]: null
      });
    },
    get C709() {
      return C[709] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 7,
        [_Location_line]: 4976,
        [_Location_file]: null
      });
    },
    get C710() {
      return C[710] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 4977,
        [_Location_file]: null
      });
    },
    get C711() {
      return C[711] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 4978,
        [_Location_file]: null
      });
    },
    get C706() {
      return C[706] = dart.constList([C[707] || CT.C707, C[708] || CT.C708, C[709] || CT.C709, C[710] || CT.C710, C[711] || CT.C711], widget_inspector._Location);
    },
    get C705() {
      return C[705] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[706] || CT.C706,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 4973,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C714() {
      return C[714] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 5122,
        [_Location_file]: null
      });
    },
    get C713() {
      return C[713] = dart.constList([C[714] || CT.C714], widget_inspector._Location);
    },
    get C712() {
      return C[712] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[713] || CT.C713,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 5121,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C717() {
      return C[717] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 5121,
        [_Location_file]: null
      });
    },
    get C716() {
      return C[716] = dart.constList([C[717] || CT.C717], widget_inspector._Location);
    },
    get C715() {
      return C[715] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[716] || CT.C716,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 5120,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C720() {
      return C[720] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 11,
        [_Location_line]: 5118,
        [_Location_file]: null
      });
    },
    get C721() {
      return C[721] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 5120,
        [_Location_file]: null
      });
    },
    get C719() {
      return C[719] = dart.constList([C[720] || CT.C720, C[721] || CT.C721], widget_inspector._Location);
    },
    get C718() {
      return C[718] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[719] || CT.C719,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 5117,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C724() {
      return C[724] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 9,
        [_Location_line]: 5113,
        [_Location_file]: null
      });
    },
    get C725() {
      return C[725] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 9,
        [_Location_line]: 5114,
        [_Location_file]: null
      });
    },
    get C726() {
      return C[726] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 9,
        [_Location_line]: 5115,
        [_Location_file]: null
      });
    },
    get C727() {
      return C[727] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 5116,
        [_Location_file]: null
      });
    },
    get C728() {
      return C[728] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 5117,
        [_Location_file]: null
      });
    },
    get C723() {
      return C[723] = dart.constList([C[724] || CT.C724, C[725] || CT.C725, C[726] || CT.C726, C[727] || CT.C727, C[728] || CT.C728], widget_inspector._Location);
    },
    get C722() {
      return C[722] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[723] || CT.C723,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 5112,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C730() {
      return C[730] = dart.constList([], widget_inspector._Location);
    },
    get C729() {
      return C[729] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[730] || CT.C730,
        [_Location_name]: null,
        [_Location_column]: 68,
        [_Location_line]: 5147,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C733() {
      return C[733] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 23,
        [_Location_line]: 5147,
        [_Location_file]: null
      });
    },
    get C734() {
      return C[734] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 32,
        [_Location_line]: 5147,
        [_Location_file]: null
      });
    },
    get C735() {
      return C[735] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 40,
        [_Location_line]: 5147,
        [_Location_file]: null
      });
    },
    get C736() {
      return C[736] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 50,
        [_Location_line]: 5147,
        [_Location_file]: null
      });
    },
    get C737() {
      return C[737] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 61,
        [_Location_line]: 5147,
        [_Location_file]: null
      });
    },
    get C732() {
      return C[732] = dart.constList([C[733] || CT.C733, C[734] || CT.C734, C[735] || CT.C735, C[736] || CT.C736, C[737] || CT.C737], widget_inspector._Location);
    },
    get C731() {
      return C[731] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[732] || CT.C732,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 5147,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C738() {
      return C[738] = dart.const({
        __proto__: alignment.AlignmentDirectional.prototype,
        [AlignmentDirectional_y]: -1,
        [AlignmentDirectional_start]: -1
      });
    },
    get C741() {
      return C[741] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5908,
        [_Location_file]: null
      });
    },
    get C742() {
      return C[742] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5909,
        [_Location_file]: null
      });
    },
    get C743() {
      return C[743] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 5910,
        [_Location_file]: null
      });
    },
    get C740() {
      return C[740] = dart.constList([C[741] || CT.C741, C[742] || CT.C742, C[743] || CT.C743], widget_inspector._Location);
    },
    get C739() {
      return C[739] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[740] || CT.C740,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 5907,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C746() {
      return C[746] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5918,
        [_Location_file]: null
      });
    },
    get C747() {
      return C[747] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5919,
        [_Location_file]: null
      });
    },
    get C748() {
      return C[748] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 5920,
        [_Location_file]: null
      });
    },
    get C745() {
      return C[745] = dart.constList([C[746] || CT.C746, C[747] || CT.C747, C[748] || CT.C748], widget_inspector._Location);
    },
    get C744() {
      return C[744] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[745] || CT.C745,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 5917,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C751() {
      return C[751] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mainAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5927,
        [_Location_file]: null
      });
    },
    get C752() {
      return C[752] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "crossAxisAlignment",
        [_Location_column]: 11,
        [_Location_line]: 5928,
        [_Location_file]: null
      });
    },
    get C753() {
      return C[753] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 5929,
        [_Location_file]: null
      });
    },
    get C750() {
      return C[750] = dart.constList([C[751] || CT.C751, C[752] || CT.C752, C[753] || CT.C753], widget_inspector._Location);
    },
    get C749() {
      return C[749] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[750] || CT.C750,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 5926,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C756() {
      return C[756] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 11,
        [_Location_line]: 6002,
        [_Location_file]: null
      });
    },
    get C757() {
      return C[757] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 11,
        [_Location_line]: 6019,
        [_Location_file]: null
      });
    },
    get C755() {
      return C[755] = dart.constList([C[756] || CT.C756, C[757] || CT.C757], widget_inspector._Location);
    },
    get C754() {
      return C[754] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[755] || CT.C755,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 6000,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C760() {
      return C[760] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 6000,
        [_Location_file]: null
      });
    },
    get C759() {
      return C[759] = dart.constList([C[760] || CT.C760], widget_inspector._Location);
    },
    get C758() {
      return C[758] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[759] || CT.C759,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 5999,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C763() {
      return C[763] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEnter",
        [_Location_column]: 9,
        [_Location_line]: 5972,
        [_Location_file]: null
      });
    },
    get C764() {
      return C[764] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHover",
        [_Location_column]: 9,
        [_Location_line]: 5983,
        [_Location_file]: null
      });
    },
    get C765() {
      return C[765] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onExit",
        [_Location_column]: 9,
        [_Location_line]: 5994,
        [_Location_file]: null
      });
    },
    get C766() {
      return C[766] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 5999,
        [_Location_file]: null
      });
    },
    get C762() {
      return C[762] = dart.constList([C[763] || CT.C763, C[764] || CT.C764, C[765] || CT.C765, C[766] || CT.C766], widget_inspector._Location);
    },
    get C761() {
      return C[761] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[762] || CT.C762,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 5971,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C767() {
      return C[767] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C770() {
      return C[770] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 17,
        [_Location_line]: 6051,
        [_Location_file]: null
      });
    },
    get C771() {
      return C[771] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 13,
        [_Location_line]: 6053,
        [_Location_file]: null
      });
    },
    get C772() {
      return C[772] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 13,
        [_Location_line]: 6054,
        [_Location_file]: null
      });
    },
    get C769() {
      return C[769] = dart.constList([C[770] || CT.C770, C[771] || CT.C771, C[772] || CT.C772], widget_inspector._Location);
    },
    get C768() {
      return C[768] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[769] || CT.C769,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 6048,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C775() {
      return C[775] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 11,
        [_Location_line]: 6047,
        [_Location_file]: null
      });
    },
    get C776() {
      return C[776] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 6048,
        [_Location_file]: null
      });
    },
    get C774() {
      return C[774] = dart.constList([C[775] || CT.C775, C[776] || CT.C776], widget_inspector._Location);
    },
    get C773() {
      return C[773] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[774] || CT.C774,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 6046,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C779() {
      return C[779] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashColor",
        [_Location_column]: 9,
        [_Location_line]: 6033,
        [_Location_file]: null
      });
    },
    get C780() {
      return C[780] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 9,
        [_Location_line]: 6034,
        [_Location_file]: null
      });
    },
    get C781() {
      return C[781] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightColor",
        [_Location_column]: 9,
        [_Location_line]: 6035,
        [_Location_file]: null
      });
    },
    get C782() {
      return C[782] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 6037,
        [_Location_file]: null
      });
    },
    get C783() {
      return C[783] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 6039,
        [_Location_file]: null
      });
    },
    get C784() {
      return C[784] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 9,
        [_Location_line]: 6040,
        [_Location_file]: null
      });
    },
    get C785() {
      return C[785] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 9,
        [_Location_line]: 6041,
        [_Location_file]: null
      });
    },
    get C786() {
      return C[786] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusElevation",
        [_Location_column]: 9,
        [_Location_line]: 6042,
        [_Location_file]: null
      });
    },
    get C787() {
      return C[787] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightElevation",
        [_Location_column]: 9,
        [_Location_line]: 6043,
        [_Location_file]: null
      });
    },
    get C788() {
      return C[788] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledElevation",
        [_Location_column]: 9,
        [_Location_line]: 6044,
        [_Location_file]: null
      });
    },
    get C789() {
      return C[789] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverElevation",
        [_Location_column]: 9,
        [_Location_line]: 6045,
        [_Location_file]: null
      });
    },
    get C790() {
      return C[790] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 6046,
        [_Location_file]: null
      });
    },
    get C778() {
      return C[778] = dart.constList([C[779] || CT.C779, C[780] || CT.C780, C[781] || CT.C781, C[782] || CT.C782, C[783] || CT.C783, C[784] || CT.C784, C[785] || CT.C785, C[786] || CT.C786, C[787] || CT.C787, C[788] || CT.C788, C[789] || CT.C789, C[790] || CT.C790], widget_inspector._Location);
    },
    get C777() {
      return C[777] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[778] || CT.C778,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 6031,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C793() {
      return C[793] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 7,
        [_Location_line]: 6026,
        [_Location_file]: null
      });
    },
    get C794() {
      return C[794] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 7,
        [_Location_line]: 6027,
        [_Location_file]: null
      });
    },
    get C795() {
      return C[795] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 6029,
        [_Location_file]: null
      });
    },
    get C796() {
      return C[796] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 6030,
        [_Location_file]: null
      });
    },
    get C797() {
      return C[797] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 6031,
        [_Location_file]: null
      });
    },
    get C792() {
      return C[792] = dart.constList([C[793] || CT.C793, C[794] || CT.C794, C[795] || CT.C795, C[796] || CT.C796, C[797] || CT.C797], widget_inspector._Location);
    },
    get C791() {
      return C[791] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[792] || CT.C792,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 6025,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C800() {
      return C[800] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 17,
        [_Location_line]: 6089,
        [_Location_file]: null
      });
    },
    get C801() {
      return C[801] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 13,
        [_Location_line]: 6091,
        [_Location_file]: null
      });
    },
    get C802() {
      return C[802] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 13,
        [_Location_line]: 6092,
        [_Location_file]: null
      });
    },
    get C799() {
      return C[799] = dart.constList([C[800] || CT.C800, C[801] || CT.C801, C[802] || CT.C802], widget_inspector._Location);
    },
    get C798() {
      return C[798] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[799] || CT.C799,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 6086,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C805() {
      return C[805] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 11,
        [_Location_line]: 6085,
        [_Location_file]: null
      });
    },
    get C806() {
      return C[806] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 6086,
        [_Location_file]: null
      });
    },
    get C804() {
      return C[804] = dart.constList([C[805] || CT.C805, C[806] || CT.C806], widget_inspector._Location);
    },
    get C803() {
      return C[803] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[804] || CT.C804,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 6084,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C809() {
      return C[809] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashColor",
        [_Location_column]: 9,
        [_Location_line]: 6071,
        [_Location_file]: null
      });
    },
    get C810() {
      return C[810] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverColor",
        [_Location_column]: 9,
        [_Location_line]: 6072,
        [_Location_file]: null
      });
    },
    get C811() {
      return C[811] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightColor",
        [_Location_column]: 9,
        [_Location_line]: 6073,
        [_Location_file]: null
      });
    },
    get C812() {
      return C[812] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 6075,
        [_Location_file]: null
      });
    },
    get C813() {
      return C[813] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 9,
        [_Location_line]: 6077,
        [_Location_file]: null
      });
    },
    get C814() {
      return C[814] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 9,
        [_Location_line]: 6078,
        [_Location_file]: null
      });
    },
    get C815() {
      return C[815] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 9,
        [_Location_line]: 6079,
        [_Location_file]: null
      });
    },
    get C816() {
      return C[816] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusElevation",
        [_Location_column]: 9,
        [_Location_line]: 6080,
        [_Location_file]: null
      });
    },
    get C817() {
      return C[817] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "highlightElevation",
        [_Location_column]: 9,
        [_Location_line]: 6081,
        [_Location_file]: null
      });
    },
    get C818() {
      return C[818] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledElevation",
        [_Location_column]: 9,
        [_Location_line]: 6082,
        [_Location_file]: null
      });
    },
    get C819() {
      return C[819] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "hoverElevation",
        [_Location_column]: 9,
        [_Location_line]: 6083,
        [_Location_file]: null
      });
    },
    get C820() {
      return C[820] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 6084,
        [_Location_file]: null
      });
    },
    get C808() {
      return C[808] = dart.constList([C[809] || CT.C809, C[810] || CT.C810, C[811] || CT.C811, C[812] || CT.C812, C[813] || CT.C813, C[814] || CT.C814, C[815] || CT.C815, C[816] || CT.C816, C[817] || CT.C817, C[818] || CT.C818, C[819] || CT.C819, C[820] || CT.C820], widget_inspector._Location);
    },
    get C807() {
      return C[807] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[808] || CT.C808,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 6069,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C823() {
      return C[823] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "alignment",
        [_Location_column]: 7,
        [_Location_line]: 6064,
        [_Location_file]: null
      });
    },
    get C824() {
      return C[824] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 7,
        [_Location_line]: 6065,
        [_Location_file]: null
      });
    },
    get C825() {
      return C[825] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 6067,
        [_Location_file]: null
      });
    },
    get C826() {
      return C[826] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 6068,
        [_Location_file]: null
      });
    },
    get C827() {
      return C[827] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 6069,
        [_Location_file]: null
      });
    },
    get C822() {
      return C[822] = dart.constList([C[823] || CT.C823, C[824] || CT.C824, C[825] || CT.C825, C[826] || CT.C826, C[827] || CT.C827], widget_inspector._Location);
    },
    get C821() {
      return C[821] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[822] || CT.C822,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 6063,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C828() {
      return C[828] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 250000
      });
    },
    get C831() {
      return C[831] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 19,
        [_Location_line]: 6799,
        [_Location_file]: null
      });
    },
    get C832() {
      return C[832] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "_navigationDirection",
        [_Location_column]: 23,
        [_Location_line]: 6802,
        [_Location_file]: null
      });
    },
    get C833() {
      return C[833] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "_position",
        [_Location_column]: 19,
        [_Location_line]: 6804,
        [_Location_file]: null
      });
    },
    get C834() {
      return C[834] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "_currentChildIndex",
        [_Location_column]: 19,
        [_Location_line]: 6805,
        [_Location_file]: null
      });
    },
    get C830() {
      return C[830] = dart.constList([C[831] || CT.C831, C[832] || CT.C832, C[833] || CT.C833, C[834] || CT.C834], widget_inspector._Location);
    },
    get C829() {
      return C[829] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[830] || CT.C830,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 6798,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C837() {
      return C[837] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "node",
        [_Location_column]: 15,
        [_Location_line]: 6796,
        [_Location_file]: null
      });
    },
    get C838() {
      return C[838] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onKey",
        [_Location_column]: 15,
        [_Location_line]: 6797,
        [_Location_file]: null
      });
    },
    get C839() {
      return C[839] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 6798,
        [_Location_file]: null
      });
    },
    get C836() {
      return C[836] = dart.constList([C[837] || CT.C837, C[838] || CT.C838, C[839] || CT.C839], widget_inspector._Location);
    },
    get C835() {
      return C[835] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[836] || CT.C836,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 6795,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C842() {
      return C[842] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 6795,
        [_Location_file]: null
      });
    },
    get C843() {
      return C[843] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 6807,
        [_Location_file]: null
      });
    },
    get C844() {
      return C[844] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 6813,
        [_Location_file]: null
      });
    },
    get C845() {
      return C[845] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragEnd",
        [_Location_column]: 13,
        [_Location_line]: 6819,
        [_Location_file]: null
      });
    },
    get C846() {
      return C[846] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 6825,
        [_Location_file]: null
      });
    },
    get C847() {
      return C[847] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 6831,
        [_Location_file]: null
      });
    },
    get C848() {
      return C[848] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragEnd",
        [_Location_column]: 13,
        [_Location_line]: 6837,
        [_Location_file]: null
      });
    },
    get C841() {
      return C[841] = dart.constList([C[842] || CT.C842, C[843] || CT.C843, C[844] || CT.C844, C[845] || CT.C845, C[846] || CT.C846, C[847] || CT.C847, C[848] || CT.C848], widget_inspector._Location);
    },
    get C840() {
      return C[840] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[841] || CT.C841,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 6794,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C851() {
      return C[851] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 11,
        [_Location_line]: 6790,
        [_Location_file]: null
      });
    },
    get C852() {
      return C[852] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 11,
        [_Location_line]: 6791,
        [_Location_file]: null
      });
    },
    get C853() {
      return C[853] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "bottom",
        [_Location_column]: 11,
        [_Location_line]: 6792,
        [_Location_file]: null
      });
    },
    get C854() {
      return C[854] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 11,
        [_Location_line]: 6793,
        [_Location_file]: null
      });
    },
    get C855() {
      return C[855] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 6794,
        [_Location_file]: null
      });
    },
    get C850() {
      return C[850] = dart.constList([C[851] || CT.C851, C[852] || CT.C852, C[853] || CT.C853, C[854] || CT.C854, C[855] || CT.C855], widget_inspector._Location);
    },
    get C849() {
      return C[849] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[850] || CT.C850,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 6789,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C858() {
      return C[858] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 6788,
        [_Location_file]: null
      });
    },
    get C857() {
      return C[857] = dart.constList([C[858] || CT.C858], widget_inspector._Location);
    },
    get C856() {
      return C[856] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[857] || CT.C857,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 6787,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C859() {
      return C[859] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 500000
      });
    },
    get C862() {
      return C[862] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "picker",
        [_Location_column]: 14,
        [_Location_line]: 7281,
        [_Location_file]: null
      });
    },
    get C863() {
      return C[863] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 14,
        [_Location_line]: 7282,
        [_Location_file]: null
      });
    },
    get C864() {
      return C[864] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 7,
        [_Location_line]: 7283,
        [_Location_file]: null
      });
    },
    get C865() {
      return C[865] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 7,
        [_Location_line]: 7284,
        [_Location_file]: null
      });
    },
    get C866() {
      return C[866] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 14,
        [_Location_line]: 7285,
        [_Location_file]: null
      });
    },
    get C867() {
      return C[867] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 14,
        [_Location_line]: 7286,
        [_Location_file]: null
      });
    },
    get C868() {
      return C[868] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 14,
        [_Location_line]: 7287,
        [_Location_file]: null
      });
    },
    get C869() {
      return C[869] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 7288,
        [_Location_file]: null
      });
    },
    get C870() {
      return C[870] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 14,
        [_Location_line]: 7289,
        [_Location_file]: null
      });
    },
    get C871() {
      return C[871] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 7290,
        [_Location_file]: null
      });
    },
    get C872() {
      return C[872] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "getPickerStateDetails",
        [_Location_column]: 7,
        [_Location_line]: 7291,
        [_Location_file]: null
      });
    },
    get C873() {
      return C[873] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "updatePickerStateDetails",
        [_Location_column]: 7,
        [_Location_line]: 7294,
        [_Location_file]: null
      });
    },
    get C874() {
      return C[874] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 7,
        [_Location_line]: 7297,
        [_Location_file]: null
      });
    },
    get C861() {
      return C[861] = dart.constList([C[862] || CT.C862, C[863] || CT.C863, C[864] || CT.C864, C[865] || CT.C865, C[866] || CT.C866, C[867] || CT.C867, C[868] || CT.C868, C[869] || CT.C869, C[870] || CT.C870, C[871] || CT.C871, C[872] || CT.C872, C[873] || CT.C873, C[874] || CT.C874], widget_inspector._Location);
    },
    get C860() {
      return C[860] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[861] || CT.C861,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 7280,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C877() {
      return C[877] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 19,
        [_Location_line]: 8902,
        [_Location_file]: null
      });
    },
    get C878() {
      return C[878] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 19,
        [_Location_line]: 8903,
        [_Location_file]: null
      });
    },
    get C879() {
      return C[879] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 8904,
        [_Location_file]: null
      });
    },
    get C876() {
      return C[876] = dart.constList([C[877] || CT.C877, C[878] || CT.C878, C[879] || CT.C879], widget_inspector._Location);
    },
    get C875() {
      return C[875] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[876] || CT.C876,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 8901,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C882() {
      return C[882] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEnter",
        [_Location_column]: 17,
        [_Location_line]: 8898,
        [_Location_file]: null
      });
    },
    get C883() {
      return C[883] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHover",
        [_Location_column]: 17,
        [_Location_line]: 8899,
        [_Location_file]: null
      });
    },
    get C884() {
      return C[884] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onExit",
        [_Location_column]: 17,
        [_Location_line]: 8900,
        [_Location_file]: null
      });
    },
    get C885() {
      return C[885] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 17,
        [_Location_line]: 8901,
        [_Location_file]: null
      });
    },
    get C881() {
      return C[881] = dart.constList([C[882] || CT.C882, C[883] || CT.C883, C[884] || CT.C884, C[885] || CT.C885], widget_inspector._Location);
    },
    get C880() {
      return C[880] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[881] || CT.C881,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 8897,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C888() {
      return C[888] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 8897,
        [_Location_file]: null
      });
    },
    get C889() {
      return C[889] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 13,
        [_Location_line]: 8907,
        [_Location_file]: null
      });
    },
    get C890() {
      return C[890] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 8908,
        [_Location_file]: null
      });
    },
    get C891() {
      return C[891] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 8909,
        [_Location_file]: null
      });
    },
    get C892() {
      return C[892] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 8910,
        [_Location_file]: null
      });
    },
    get C893() {
      return C[893] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 8911,
        [_Location_file]: null
      });
    },
    get C887() {
      return C[887] = dart.constList([C[888] || CT.C888, C[889] || CT.C889, C[890] || CT.C890, C[891] || CT.C891, C[892] || CT.C892, C[893] || CT.C893], widget_inspector._Location);
    },
    get C886() {
      return C[886] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[887] || CT.C887,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 8896,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C896() {
      return C[896] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onEnter",
        [_Location_column]: 15,
        [_Location_line]: 8920,
        [_Location_file]: null
      });
    },
    get C897() {
      return C[897] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHover",
        [_Location_column]: 15,
        [_Location_line]: 8921,
        [_Location_file]: null
      });
    },
    get C898() {
      return C[898] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onExit",
        [_Location_column]: 15,
        [_Location_line]: 8922,
        [_Location_file]: null
      });
    },
    get C899() {
      return C[899] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 8923,
        [_Location_file]: null
      });
    },
    get C895() {
      return C[895] = dart.constList([C[896] || CT.C896, C[897] || CT.C897, C[898] || CT.C898, C[899] || CT.C899], widget_inspector._Location);
    },
    get C894() {
      return C[894] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[895] || CT.C895,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 8919,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C902() {
      return C[902] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 8919,
        [_Location_file]: null
      });
    },
    get C903() {
      return C[903] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 13,
        [_Location_line]: 8925,
        [_Location_file]: null
      });
    },
    get C904() {
      return C[904] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 8926,
        [_Location_file]: null
      });
    },
    get C905() {
      return C[905] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragStart",
        [_Location_column]: 13,
        [_Location_line]: 8927,
        [_Location_file]: null
      });
    },
    get C906() {
      return C[906] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHorizontalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 8928,
        [_Location_file]: null
      });
    },
    get C907() {
      return C[907] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onVerticalDragUpdate",
        [_Location_column]: 13,
        [_Location_line]: 8929,
        [_Location_file]: null
      });
    },
    get C901() {
      return C[901] = dart.constList([C[902] || CT.C902, C[903] || CT.C903, C[904] || CT.C904, C[905] || CT.C905, C[906] || CT.C906, C[907] || CT.C907], widget_inspector._Location);
    },
    get C900() {
      return C[900] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[901] || CT.C901,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 8918,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C910() {
      return C[910] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 8982,
        [_Location_file]: null
      });
    },
    get C909() {
      return C[909] = dart.constList([C[910] || CT.C910], widget_inspector._Location);
    },
    get C908() {
      return C[908] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[909] || CT.C909,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 8981,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C913() {
      return C[913] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 11,
        [_Location_line]: 8977,
        [_Location_file]: null
      });
    },
    get C914() {
      return C[914] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 11,
        [_Location_line]: 8978,
        [_Location_file]: null
      });
    },
    get C915() {
      return C[915] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 11,
        [_Location_line]: 8979,
        [_Location_file]: null
      });
    },
    get C916() {
      return C[916] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 8980,
        [_Location_file]: null
      });
    },
    get C917() {
      return C[917] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 8981,
        [_Location_file]: null
      });
    },
    get C912() {
      return C[912] = dart.constList([C[913] || CT.C913, C[914] || CT.C914, C[915] || CT.C915, C[916] || CT.C916, C[917] || CT.C917], widget_inspector._Location);
    },
    get C911() {
      return C[911] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[912] || CT.C912,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 8976,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C920() {
      return C[920] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 7,
        [_Location_line]: 8974,
        [_Location_file]: null
      });
    },
    get C919() {
      return C[919] = dart.constList([C[920] || CT.C920], widget_inspector._Location);
    },
    get C918() {
      return C[918] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[919] || CT.C919,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 8973,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C923() {
      return C[923] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 16,
        [_Location_line]: 8998,
        [_Location_file]: null
      });
    },
    get C924() {
      return C[924] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rowCount",
        [_Location_column]: 9,
        [_Location_line]: 8999,
        [_Location_file]: null
      });
    },
    get C925() {
      return C[925] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 23,
        [_Location_line]: 9000,
        [_Location_file]: null
      });
    },
    get C926() {
      return C[926] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 23,
        [_Location_line]: 9001,
        [_Location_file]: null
      });
    },
    get C927() {
      return C[927] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 23,
        [_Location_line]: 9002,
        [_Location_file]: null
      });
    },
    get C928() {
      return C[928] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9003,
        [_Location_file]: null
      });
    },
    get C929() {
      return C[929] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9004,
        [_Location_file]: null
      });
    },
    get C930() {
      return C[930] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9005,
        [_Location_file]: null
      });
    },
    get C931() {
      return C[931] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9006,
        [_Location_file]: null
      });
    },
    get C932() {
      return C[932] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 16,
        [_Location_line]: 9007,
        [_Location_file]: null
      });
    },
    get C933() {
      return C[933] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 16,
        [_Location_line]: 9008,
        [_Location_file]: null
      });
    },
    get C934() {
      return C[934] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 23,
        [_Location_line]: 9009,
        [_Location_file]: null
      });
    },
    get C935() {
      return C[935] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 23,
        [_Location_line]: 9010,
        [_Location_file]: null
      });
    },
    get C936() {
      return C[936] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 23,
        [_Location_line]: 9011,
        [_Location_file]: null
      });
    },
    get C937() {
      return C[937] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 23,
        [_Location_line]: 9012,
        [_Location_file]: null
      });
    },
    get C938() {
      return C[938] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showLeadingAndTailingDates",
        [_Location_column]: 31,
        [_Location_line]: 9013,
        [_Location_file]: null
      });
    },
    get C939() {
      return C[939] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "blackoutDates",
        [_Location_column]: 41,
        [_Location_line]: 9015,
        [_Location_file]: null
      });
    },
    get C940() {
      return C[940] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "specialDates",
        [_Location_column]: 41,
        [_Location_line]: 9016,
        [_Location_file]: null
      });
    },
    get C941() {
      return C[941] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekendDays",
        [_Location_column]: 41,
        [_Location_line]: 9017,
        [_Location_file]: null
      });
    },
    get C942() {
      return C[942] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 23,
        [_Location_line]: 9018,
        [_Location_file]: null
      });
    },
    get C943() {
      return C[943] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 23,
        [_Location_line]: 9019,
        [_Location_file]: null
      });
    },
    get C944() {
      return C[944] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 9,
        [_Location_line]: 9020,
        [_Location_file]: null
      });
    },
    get C945() {
      return C[945] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 16,
        [_Location_line]: 9021,
        [_Location_file]: null
      });
    },
    get C946() {
      return C[946] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 23,
        [_Location_line]: 9022,
        [_Location_file]: null
      });
    },
    get C947() {
      return C[947] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 9,
        [_Location_line]: 9023,
        [_Location_file]: null
      });
    },
    get C948() {
      return C[948] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 16,
        [_Location_line]: 9024,
        [_Location_file]: null
      });
    },
    get C949() {
      return C[949] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 23,
        [_Location_line]: 9025,
        [_Location_file]: null
      });
    },
    get C950() {
      return C[950] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 23,
        [_Location_line]: 9026,
        [_Location_file]: null
      });
    },
    get C951() {
      return C[951] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 9,
        [_Location_line]: 9027,
        [_Location_file]: null
      });
    },
    get C952() {
      return C[952] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 23,
        [_Location_line]: 9028,
        [_Location_file]: null
      });
    },
    get C953() {
      return C[953] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 9,
        [_Location_line]: 9029,
        [_Location_file]: null
      });
    },
    get C954() {
      return C[954] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 9,
        [_Location_line]: 9030,
        [_Location_file]: null
      });
    },
    get C955() {
      return C[955] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "getPickerStateDetails",
        [_Location_column]: 16,
        [_Location_line]: 9031,
        [_Location_file]: null
      });
    },
    get C956() {
      return C[956] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellBuilder",
        [_Location_column]: 23,
        [_Location_line]: 9032,
        [_Location_file]: null
      });
    },
    get C957() {
      return C[957] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showWeekNumber",
        [_Location_column]: 41,
        [_Location_line]: 9033,
        [_Location_file]: null
      });
    },
    get C958() {
      return C[958] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "weekNumberStyle",
        [_Location_column]: 41,
        [_Location_line]: 9034,
        [_Location_file]: null
      });
    },
    get C959() {
      return C[959] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isMobilePlatform",
        [_Location_column]: 9,
        [_Location_line]: 9035,
        [_Location_file]: null
      });
    },
    get C922() {
      return C[922] = dart.constList([C[923] || CT.C923, C[924] || CT.C924, C[925] || CT.C925, C[926] || CT.C926, C[927] || CT.C927, C[928] || CT.C928, C[929] || CT.C929, C[930] || CT.C930, C[931] || CT.C931, C[932] || CT.C932, C[933] || CT.C933, C[934] || CT.C934, C[935] || CT.C935, C[936] || CT.C936, C[937] || CT.C937, C[938] || CT.C938, C[939] || CT.C939, C[940] || CT.C940, C[941] || CT.C941, C[942] || CT.C942, C[943] || CT.C943, C[944] || CT.C944, C[945] || CT.C945, C[946] || CT.C946, C[947] || CT.C947, C[948] || CT.C948, C[949] || CT.C949, C[950] || CT.C950, C[951] || CT.C951, C[952] || CT.C952, C[953] || CT.C953, C[954] || CT.C954, C[955] || CT.C955, C[956] || CT.C956, C[957] || CT.C957, C[958] || CT.C958, C[959] || CT.C959], widget_inspector._Location);
    },
    get C921() {
      return C[921] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[922] || CT.C922,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 8997,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C960() {
      return C[960] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[730] || CT.C730,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 9046,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C963() {
      return C[963] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 11,
        [_Location_line]: 9042,
        [_Location_file]: null
      });
    },
    get C964() {
      return C[964] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 11,
        [_Location_line]: 9043,
        [_Location_file]: null
      });
    },
    get C965() {
      return C[965] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 11,
        [_Location_line]: 9044,
        [_Location_file]: null
      });
    },
    get C966() {
      return C[966] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 11,
        [_Location_line]: 9045,
        [_Location_file]: null
      });
    },
    get C967() {
      return C[967] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 9046,
        [_Location_file]: null
      });
    },
    get C962() {
      return C[962] = dart.constList([C[963] || CT.C963, C[964] || CT.C964, C[965] || CT.C965, C[966] || CT.C966, C[967] || CT.C967], widget_inspector._Location);
    },
    get C961() {
      return C[961] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[962] || CT.C962,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 9041,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C970() {
      return C[970] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 9069,
        [_Location_file]: null
      });
    },
    get C969() {
      return C[969] = dart.constList([C[970] || CT.C970], widget_inspector._Location);
    },
    get C968() {
      return C[968] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[969] || CT.C969,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 9068,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C973() {
      return C[973] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 9068,
        [_Location_file]: null
      });
    },
    get C972() {
      return C[972] = dart.constList([C[973] || CT.C973], widget_inspector._Location);
    },
    get C971() {
      return C[971] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[972] || CT.C972,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 9067,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C976() {
      return C[976] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 9064,
        [_Location_file]: null
      });
    },
    get C977() {
      return C[977] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 9067,
        [_Location_file]: null
      });
    },
    get C975() {
      return C[975] = dart.constList([C[976] || CT.C976, C[977] || CT.C977], widget_inspector._Location);
    },
    get C974() {
      return C[974] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[975] || CT.C975,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 9063,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C980() {
      return C[980] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 9059,
        [_Location_file]: null
      });
    },
    get C981() {
      return C[981] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 9060,
        [_Location_file]: null
      });
    },
    get C982() {
      return C[982] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "right",
        [_Location_column]: 7,
        [_Location_line]: 9061,
        [_Location_file]: null
      });
    },
    get C983() {
      return C[983] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 9062,
        [_Location_file]: null
      });
    },
    get C984() {
      return C[984] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 9063,
        [_Location_file]: null
      });
    },
    get C979() {
      return C[979] = dart.constList([C[980] || CT.C980, C[981] || CT.C981, C[982] || CT.C982, C[983] || CT.C983, C[984] || CT.C984], widget_inspector._Location);
    },
    get C978() {
      return C[978] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[979] || CT.C979,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 9058,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C987() {
      return C[987] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 9280,
        [_Location_file]: null
      });
    },
    get C986() {
      return C[986] = dart.constList([C[987] || CT.C987], widget_inspector._Location);
    },
    get C985() {
      return C[985] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[986] || CT.C986,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 9279,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C990() {
      return C[990] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visibleDates",
        [_Location_column]: 16,
        [_Location_line]: 9286,
        [_Location_file]: null
      });
    },
    get C991() {
      return C[991] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellStyle",
        [_Location_column]: 23,
        [_Location_line]: 9287,
        [_Location_file]: null
      });
    },
    get C992() {
      return C[992] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minDate",
        [_Location_column]: 23,
        [_Location_line]: 9288,
        [_Location_file]: null
      });
    },
    get C993() {
      return C[993] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxDate",
        [_Location_column]: 23,
        [_Location_line]: 9289,
        [_Location_file]: null
      });
    },
    get C994() {
      return C[994] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enablePastDates",
        [_Location_column]: 23,
        [_Location_line]: 9290,
        [_Location_file]: null
      });
    },
    get C995() {
      return C[995] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "todayHighlightColor",
        [_Location_column]: 23,
        [_Location_line]: 9291,
        [_Location_file]: null
      });
    },
    get C996() {
      return C[996] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionShape",
        [_Location_column]: 23,
        [_Location_line]: 9292,
        [_Location_file]: null
      });
    },
    get C997() {
      return C[997] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "monthFormat",
        [_Location_column]: 23,
        [_Location_line]: 9293,
        [_Location_file]: null
      });
    },
    get C998() {
      return C[998] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isRtl",
        [_Location_column]: 16,
        [_Location_line]: 9294,
        [_Location_file]: null
      });
    },
    get C999() {
      return C[999] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "datePickerTheme",
        [_Location_column]: 16,
        [_Location_line]: 9295,
        [_Location_file]: null
      });
    },
    get C1000() {
      return C[1000] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "locale",
        [_Location_column]: 9,
        [_Location_line]: 9296,
        [_Location_file]: null
      });
    },
    get C1001() {
      return C[1001] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mouseHoverPosition",
        [_Location_column]: 9,
        [_Location_line]: 9297,
        [_Location_file]: null
      });
    },
    get C1002() {
      return C[1002] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableMultiView",
        [_Location_column]: 16,
        [_Location_line]: 9298,
        [_Location_file]: null
      });
    },
    get C1003() {
      return C[1003] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "multiViewSpacing",
        [_Location_column]: 23,
        [_Location_line]: 9299,
        [_Location_file]: null
      });
    },
    get C1004() {
      return C[1004] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionTextStyle",
        [_Location_column]: 23,
        [_Location_line]: 9300,
        [_Location_file]: null
      });
    },
    get C1005() {
      return C[1005] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeTextStyle",
        [_Location_column]: 23,
        [_Location_line]: 9301,
        [_Location_file]: null
      });
    },
    get C1006() {
      return C[1006] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9302,
        [_Location_file]: null
      });
    },
    get C1007() {
      return C[1007] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "startRangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9303,
        [_Location_file]: null
      });
    },
    get C1008() {
      return C[1008] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "endRangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9304,
        [_Location_file]: null
      });
    },
    get C1009() {
      return C[1009] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "rangeSelectionColor",
        [_Location_column]: 23,
        [_Location_line]: 9305,
        [_Location_file]: null
      });
    },
    get C1010() {
      return C[1010] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionMode",
        [_Location_column]: 23,
        [_Location_line]: 9306,
        [_Location_file]: null
      });
    },
    get C1011() {
      return C[1011] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionRadius",
        [_Location_column]: 23,
        [_Location_line]: 9307,
        [_Location_file]: null
      });
    },
    get C1012() {
      return C[1012] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectionNotifier",
        [_Location_column]: 9,
        [_Location_line]: 9308,
        [_Location_file]: null
      });
    },
    get C1013() {
      return C[1013] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textScaleFactor",
        [_Location_column]: 16,
        [_Location_line]: 9309,
        [_Location_file]: null
      });
    },
    get C1014() {
      return C[1014] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "allowViewNavigation",
        [_Location_column]: 23,
        [_Location_line]: 9310,
        [_Location_file]: null
      });
    },
    get C1015() {
      return C[1015] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "cellBuilder",
        [_Location_column]: 23,
        [_Location_line]: 9311,
        [_Location_file]: null
      });
    },
    get C1016() {
      return C[1016] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "getPickerStateDetails",
        [_Location_column]: 16,
        [_Location_line]: 9312,
        [_Location_file]: null
      });
    },
    get C1017() {
      return C[1017] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "view",
        [_Location_column]: 31,
        [_Location_line]: 9313,
        [_Location_file]: null
      });
    },
    get C1018() {
      return C[1018] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isHijri",
        [_Location_column]: 23,
        [_Location_line]: 9314,
        [_Location_file]: null
      });
    },
    get C1019() {
      return C[1019] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "localizations",
        [_Location_column]: 9,
        [_Location_line]: 9315,
        [_Location_file]: null
      });
    },
    get C1020() {
      return C[1020] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "navigationDirection",
        [_Location_column]: 23,
        [_Location_line]: 9316,
        [_Location_file]: null
      });
    },
    get C1021() {
      return C[1021] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 16,
        [_Location_line]: 9317,
        [_Location_file]: null
      });
    },
    get C1022() {
      return C[1022] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 16,
        [_Location_line]: 9318,
        [_Location_file]: null
      });
    },
    get C989() {
      return C[989] = dart.constList([C[990] || CT.C990, C[991] || CT.C991, C[992] || CT.C992, C[993] || CT.C993, C[994] || CT.C994, C[995] || CT.C995, C[996] || CT.C996, C[997] || CT.C997, C[998] || CT.C998, C[999] || CT.C999, C[1000] || CT.C1000, C[1001] || CT.C1001, C[1002] || CT.C1002, C[1003] || CT.C1003, C[1004] || CT.C1004, C[1005] || CT.C1005, C[1006] || CT.C1006, C[1007] || CT.C1007, C[1008] || CT.C1008, C[1009] || CT.C1009, C[1010] || CT.C1010, C[1011] || CT.C1011, C[1012] || CT.C1012, C[1013] || CT.C1013, C[1014] || CT.C1014, C[1015] || CT.C1015, C[1016] || CT.C1016, C[1017] || CT.C1017, C[1018] || CT.C1018, C[1019] || CT.C1019, C[1020] || CT.C1020, C[1021] || CT.C1021, C[1022] || CT.C1022], widget_inspector._Location);
    },
    get C988() {
      return C[988] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[989] || CT.C989,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 9285,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    },
    get C1025() {
      return C[1025] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 5,
        [_Location_line]: 10865,
        [_Location_file]: null
      });
    },
    get C1026() {
      return C[1026] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 5,
        [_Location_line]: 10866,
        [_Location_file]: null
      });
    },
    get C1027() {
      return C[1027] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLines",
        [_Location_column]: 5,
        [_Location_line]: 10867,
        [_Location_file]: null
      });
    },
    get C1028() {
      return C[1028] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "softWrap",
        [_Location_column]: 5,
        [_Location_line]: 10868,
        [_Location_file]: null
      });
    },
    get C1029() {
      return C[1029] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textDirection",
        [_Location_column]: 5,
        [_Location_line]: 10869,
        [_Location_file]: null
      });
    },
    get C1030() {
      return C[1030] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 5,
        [_Location_line]: 10870,
        [_Location_file]: null
      });
    },
    get C1024() {
      return C[1024] = dart.constList([C[1025] || CT.C1025, C[1026] || CT.C1026, C[1027] || CT.C1027, C[1028] || CT.C1028, C[1029] || CT.C1029, C[1030] || CT.C1030], widget_inspector._Location);
    },
    get C1023() {
      return C[1023] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[1024] || CT.C1024,
        [_Location_name]: null,
        [_Location_column]: 29,
        [_Location_line]: 10864,
        [_Location_file]: "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart"
      });
    }
  }, false);
  var C = Array(1031).fill(void 0);
  var I = [
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/year_view.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/year_view.dart",
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/month_view.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/month_view.dart",
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/hijri_date_picker_manager.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/hijri_date_picker_manager.dart",
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker_manager.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/date_picker_manager.dart",
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/picker_helper.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/picker_helper.dart",
    "file:///B:/Programme/flutter/.pub-cache/hosted/pub.dartlang.org/syncfusion_flutter_datepicker-19.2.49/lib/src/date_picker/date_picker.dart",
    "package:syncfusion_flutter_datepicker/src/date_picker/date_picker.dart"
  ];
  var cellStyle$ = dart.privateName(year_view, "YearView.cellStyle");
  var selectionTextStyle$ = dart.privateName(year_view, "YearView.selectionTextStyle");
  var rangeTextStyle$ = dart.privateName(year_view, "YearView.rangeTextStyle");
  var selectionColor$ = dart.privateName(year_view, "YearView.selectionColor");
  var navigationDirection$ = dart.privateName(year_view, "YearView.navigationDirection");
  var startRangeSelectionColor$ = dart.privateName(year_view, "YearView.startRangeSelectionColor");
  var endRangeSelectionColor$ = dart.privateName(year_view, "YearView.endRangeSelectionColor");
  var rangeSelectionColor$ = dart.privateName(year_view, "YearView.rangeSelectionColor");
  var visibleDates$ = dart.privateName(year_view, "YearView.visibleDates");
  var isRtl$ = dart.privateName(year_view, "YearView.isRtl");
  var todayHighlightColor$ = dart.privateName(year_view, "YearView.todayHighlightColor");
  var minDate$ = dart.privateName(year_view, "YearView.minDate");
  var maxDate$ = dart.privateName(year_view, "YearView.maxDate");
  var enablePastDates$ = dart.privateName(year_view, "YearView.enablePastDates");
  var selectionShape$ = dart.privateName(year_view, "YearView.selectionShape");
  var datePickerTheme$ = dart.privateName(year_view, "YearView.datePickerTheme");
  var mouseHoverPosition$ = dart.privateName(year_view, "YearView.mouseHoverPosition");
  var selectionNotifier$ = dart.privateName(year_view, "YearView.selectionNotifier");
  var selectionRadius$ = dart.privateName(year_view, "YearView.selectionRadius");
  var selectionMode$ = dart.privateName(year_view, "YearView.selectionMode");
  var enableMultiView$ = dart.privateName(year_view, "YearView.enableMultiView");
  var multiViewSpacing$ = dart.privateName(year_view, "YearView.multiViewSpacing");
  var textScaleFactor$ = dart.privateName(year_view, "YearView.textScaleFactor");
  var allowViewNavigation$ = dart.privateName(year_view, "YearView.allowViewNavigation");
  var getPickerStateDetails$ = dart.privateName(year_view, "YearView.getPickerStateDetails");
  var view$ = dart.privateName(year_view, "YearView.view");
  var cellBuilder$ = dart.privateName(year_view, "YearView.cellBuilder");
  var monthFormat$ = dart.privateName(year_view, "YearView.monthFormat");
  var locale$ = dart.privateName(year_view, "YearView.locale");
  var width$ = dart.privateName(year_view, "YearView.width");
  var height$ = dart.privateName(year_view, "YearView.height");
  var isHijri$ = dart.privateName(year_view, "YearView.isHijri");
  var localizations$0 = dart.privateName(year_view, "YearView.localizations");
  year_view.YearView = class YearView extends framework.StatefulWidget {
    get cellStyle() {
      return this[cellStyle$];
    }
    set cellStyle(value) {
      super.cellStyle = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get navigationDirection() {
      return this[navigationDirection$];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get visibleDates() {
      return this[visibleDates$];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
    get isRtl() {
      return this[isRtl$];
    }
    set isRtl(value) {
      super.isRtl = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get minDate() {
      return this[minDate$];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get enablePastDates() {
      return this[enablePastDates$];
    }
    set enablePastDates(value) {
      super.enablePastDates = value;
    }
    get selectionShape() {
      return this[selectionShape$];
    }
    set selectionShape(value) {
      super.selectionShape = value;
    }
    get datePickerTheme() {
      return this[datePickerTheme$];
    }
    set datePickerTheme(value) {
      super.datePickerTheme = value;
    }
    get mouseHoverPosition() {
      return this[mouseHoverPosition$];
    }
    set mouseHoverPosition(value) {
      super.mouseHoverPosition = value;
    }
    get selectionNotifier() {
      return this[selectionNotifier$];
    }
    set selectionNotifier(value) {
      super.selectionNotifier = value;
    }
    get selectionRadius() {
      return this[selectionRadius$];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get selectionMode() {
      return this[selectionMode$];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get enableMultiView() {
      return this[enableMultiView$];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get multiViewSpacing() {
      return this[multiViewSpacing$];
    }
    set multiViewSpacing(value) {
      super.multiViewSpacing = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get allowViewNavigation() {
      return this[allowViewNavigation$];
    }
    set allowViewNavigation(value) {
      super.allowViewNavigation = value;
    }
    get getPickerStateDetails() {
      return this[getPickerStateDetails$];
    }
    set getPickerStateDetails(value) {
      super.getPickerStateDetails = value;
    }
    get view() {
      return this[view$];
    }
    set view(value) {
      super.view = value;
    }
    get cellBuilder() {
      return this[cellBuilder$];
    }
    set cellBuilder(value) {
      super.cellBuilder = value;
    }
    get monthFormat() {
      return this[monthFormat$];
    }
    set monthFormat(value) {
      super.monthFormat = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get isHijri() {
      return this[isHijri$];
    }
    set isHijri(value) {
      super.isHijri = value;
    }
    get localizations() {
      return this[localizations$0];
    }
    set localizations(value) {
      super.localizations = value;
    }
    createState() {
      return new year_view._YearViewState.new();
    }
  };
  (year_view.YearView.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionMode, selectionRadius, selectionNotifier, textScaleFactor, allowViewNavigation, cellBuilder, getPickerStateDetails, view, isHijri, localizations, navigationDirection, width, height, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 19, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 23, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 25, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 27, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 28, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 29, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 30, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 31, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 32, 12, "multiViewSpacing");
    if (selectionMode == null) dart.nullFailed(I[0], 39, 12, "selectionMode");
    if (selectionRadius == null) dart.nullFailed(I[0], 40, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 41, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 42, 12, "textScaleFactor");
    if (allowViewNavigation == null) dart.nullFailed(I[0], 43, 12, "allowViewNavigation");
    if (getPickerStateDetails == null) dart.nullFailed(I[0], 45, 12, "getPickerStateDetails");
    if (view == null) dart.nullFailed(I[0], 46, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 47, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 48, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 49, 12, "navigationDirection");
    if (width == null) dart.nullFailed(I[0], 50, 12, "width");
    if (height == null) dart.nullFailed(I[0], 51, 12, "height");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[visibleDates$] = visibleDates;
    this[cellStyle$] = cellStyle;
    this[minDate$] = minDate;
    this[maxDate$] = maxDate;
    this[enablePastDates$] = enablePastDates;
    this[todayHighlightColor$] = todayHighlightColor;
    this[selectionShape$] = selectionShape;
    this[monthFormat$] = monthFormat;
    this[isRtl$] = isRtl;
    this[datePickerTheme$] = datePickerTheme;
    this[locale$] = locale;
    this[mouseHoverPosition$] = mouseHoverPosition;
    this[enableMultiView$] = enableMultiView;
    this[multiViewSpacing$] = multiViewSpacing;
    this[selectionTextStyle$] = selectionTextStyle;
    this[rangeTextStyle$] = rangeTextStyle;
    this[selectionColor$] = selectionColor;
    this[startRangeSelectionColor$] = startRangeSelectionColor;
    this[endRangeSelectionColor$] = endRangeSelectionColor;
    this[rangeSelectionColor$] = rangeSelectionColor;
    this[selectionMode$] = selectionMode;
    this[selectionRadius$] = selectionRadius;
    this[selectionNotifier$] = selectionNotifier;
    this[textScaleFactor$] = textScaleFactor;
    this[allowViewNavigation$] = allowViewNavigation;
    this[cellBuilder$] = cellBuilder;
    this[getPickerStateDetails$] = getPickerStateDetails;
    this[view$] = view;
    this[isHijri$] = isHijri;
    this[localizations$0] = localizations;
    this[navigationDirection$] = navigationDirection;
    this[width$] = width;
    this[height$] = height;
    year_view.YearView.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view.YearView.prototype;
  dart.addTypeTests(year_view.YearView);
  dart.addTypeCaches(year_view.YearView);
  dart.setMethodSignature(year_view.YearView, () => ({
    __proto__: dart.getMethods(year_view.YearView.__proto__),
    createState: dart.fnType(year_view._YearViewState, [])
  }));
  dart.setLibraryUri(year_view.YearView, I[1]);
  dart.setFieldSignature(year_view.YearView, () => ({
    __proto__: dart.getFields(year_view.YearView.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectionRadius: dart.finalFieldType(core.double),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    allowViewNavigation: dart.finalFieldType(core.bool),
    getPickerStateDetails: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    cellBuilder: dart.finalFieldType(dart.dynamic),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  dart.defineLazy(year_view.YearView, {
    /*year_view.YearView.maxColumnCount*/get maxColumnCount() {
      return 3;
    },
    /*year_view.YearView.maxRowCount*/get maxRowCount() {
      return 4;
    }
  }, false);
  var ___YearViewState__pickerStateDetails = dart.privateName(year_view, "_#_YearViewState#_pickerStateDetails");
  var _selectedDate$ = dart.privateName(year_view, "_selectedDate");
  var _selectedDates$ = dart.privateName(year_view, "_selectedDates");
  var _selectedRange$ = dart.privateName(year_view, "_selectedRange");
  var _selectedRanges$ = dart.privateName(year_view, "_selectedRanges");
  var ___YearViewState__children = dart.privateName(year_view, "_#_YearViewState#_children");
  var _pickerStateDetails = dart.privateName(year_view, "_pickerStateDetails");
  var _children = dart.privateName(year_view, "_children");
  var _updateSelection = dart.privateName(year_view, "_updateSelection");
  var _getRenderWidget = dart.privateName(year_view, "_getRenderWidget");
  var _getSelectedDateValue = dart.privateName(year_view, "_getSelectedDateValue");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _name$ = dart.privateName(date_picker_manager, "_name");
  var _isSelectedValueEquals = dart.privateName(year_view, "_isSelectedValueEquals");
  year_view._YearViewState = class _YearViewState extends framework.State$(year_view.YearView) {
    get [_pickerStateDetails]() {
      let t0;
      t0 = this[___YearViewState__pickerStateDetails];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_pickerStateDetails")) : t0;
    }
    set [_pickerStateDetails](t0) {
      if (t0 == null) dart.nullFailed(I[0], 163, 24, "null");
      this[___YearViewState__pickerStateDetails] = t0;
    }
    get [_children]() {
      let t1;
      t1 = this[___YearViewState__children];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_children")) : t1;
    }
    set [_children](t1) {
      if (t1 == null) dart.nullFailed(I[0], 168, 21, "null");
      this[___YearViewState__children] = t1;
    }
    initState() {
      let t3, t2;
      this[_pickerStateDetails] = new picker_helper.PickerStateArgs.new();
      this[_children] = T.JSArrayOfWidget().of([]);
      t2 = this.widget;
      t3 = this[_pickerStateDetails];
      t2.getPickerStateDetails(t3);
      this[_selectedDate$] = this[_pickerStateDetails].selectedDate;
      this[_selectedDates$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedDates);
      this[_selectedRange$] = this[_pickerStateDetails].selectedRange;
      this[_selectedRanges$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedRanges);
      this.widget.selectionNotifier.addListener(dart.bind(this, _updateSelection));
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      year_view.YearView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[0], 186, 33, "oldWidget");
      if (this.widget.height != oldWidget.height || this.widget.width != oldWidget.width || this.widget.enablePastDates != oldWidget.enablePastDates || !dart.equals(this.widget.minDate, oldWidget.minDate) || this.widget.view != oldWidget.view || !dart.equals(this.widget.maxDate, oldWidget.maxDate) || !dart.equals(this.widget.cellBuilder, oldWidget.cellBuilder) || this.widget.selectionMode != oldWidget.selectionMode || this.widget.multiViewSpacing != oldWidget.multiViewSpacing || this.widget.enableMultiView != oldWidget.enableMultiView || this.widget.allowViewNavigation != oldWidget.allowViewNavigation || this.widget.navigationDirection != oldWidget.navigationDirection || !dart.equals(this.widget.visibleDates, oldWidget.visibleDates)) {
        this[_children][$clear]();
      }
      if (!dart.equals(this.widget.selectionNotifier, oldWidget.selectionNotifier)) {
        oldWidget.selectionNotifier.removeListener(dart.bind(this, _updateSelection));
        this.widget.selectionNotifier.addListener(dart.bind(this, _updateSelection));
      }
      this[_updateSelection]({isNeedSetState: false});
      super.didUpdateWidget(oldWidget);
    }
    build(context) {
      let t4, t3, t2;
      if (context == null) dart.nullFailed(I[0], 213, 29, "context");
      if (this.widget.cellBuilder != null && dart.test(this[_children][$isEmpty])) {
        let webUIPadding = 0.0;
        let width = this.widget.width;
        let height = this.widget.height;
        let viewCount = 1;
        let isHorizontalMultiView = dart.test(this.widget.enableMultiView) && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
        let isVerticalMultiView = dart.test(this.widget.enableMultiView) && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical;
        if (isHorizontalMultiView) {
          webUIPadding = this.widget.multiViewSpacing;
          viewCount = 2;
          width = (dart.notNull(width) - dart.notNull(webUIPadding)) / viewCount;
        } else if (isVerticalMultiView) {
          webUIPadding = this.widget.multiViewSpacing;
          viewCount = 2;
          height = (dart.notNull(height) - dart.notNull(webUIPadding)) / viewCount;
        }
        let cellWidth = dart.notNull(width) / 3;
        let cellHeight = dart.notNull(height) / 4;
        let visibleDatesCount = (dart.notNull(this.widget.visibleDates[$length]) / viewCount)[$truncate]();
        for (let j = 0; j < viewCount; j = j + 1) {
          let currentViewIndex = dart.test(this.widget.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(viewCount, j) : j;
          let viewStartIndex = j * visibleDatesCount;
          let viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(width) + dart.notNull(currentViewIndex) * dart.notNull(this.widget.multiViewSpacing);
          let viewEndPosition = viewStartPosition + dart.notNull(width);
          let xPosition = viewStartPosition;
          let yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(this.widget.multiViewSpacing);
          for (let i = 0; i < visibleDatesCount; i = i + 1) {
            let currentIndex = i;
            if (dart.test(this.widget.isRtl)) {
              let rowIndex = (i / 3)[$truncate]();
              currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(3, i[$modulo](3))) + rowIndex * 3;
            }
            currentIndex = currentIndex + viewStartIndex;
            if (xPosition + 1 >= viewEndPosition) {
              xPosition = viewStartPosition;
              yPosition = yPosition + cellHeight;
            }
            if ((dart.test(this.widget.enableMultiView) || dart.test(this.widget.isHijri)) && dart.test(picker_helper.DateRangePickerHelper.isLeadingCellDate(currentIndex, viewStartIndex, this.widget.visibleDates, this.widget.view))) {
              xPosition = xPosition + cellWidth;
              continue;
            }
            let date = this.widget.visibleDates[$_get](currentIndex);
            let child = framework.Widget.as((t2 = this.widget, t3 = context, t4 = dart.test(this.widget.isHijri) ? new hijri_date_picker_manager.HijriDateRangePickerCellDetails.new({date: core$.HijriDateTime.as(date), visibleDates: this.widget.visibleDates[$cast](core$.HijriDateTime), bounds: new ui.Rect.fromLTWH(xPosition, yPosition, cellWidth, cellHeight)}) : new date_picker_manager.DateRangePickerCellDetails.new({date: core.DateTime.as(date), visibleDates: this.widget.visibleDates[$cast](core.DateTime), bounds: new ui.Rect.fromLTWH(xPosition, yPosition, cellWidth, cellHeight)}), dart.dsend(t2, 'cellBuilder', [t3, t4])));
            this[_children][$add](child);
            xPosition = xPosition + cellWidth;
          }
        }
      }
      return this[_getRenderWidget]();
    }
    [_getRenderWidget]() {
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return new year_view._SingleSelectionRenderWidget.new(this.widget.visibleDates, this.widget.cellStyle, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.todayHighlightColor, this.widget.selectionShape, this.widget.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, this.widget.locale, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, dart.test(this.widget.allowViewNavigation) ? null : this[_getSelectedDateValue](), this.widget.selectionRadius, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.width, this.widget.height, this.widget.view, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, {widgets: this[_children], $creationLocationd_0dea112b090073317d4: C[0] || CT.C0});
          }
        }
        case C[67] || CT.C67:
        {
          {
            return new year_view._MultiSelectionRenderWidget.new(this.widget.visibleDates, this.widget.cellStyle, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.todayHighlightColor, this.widget.selectionShape, this.widget.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, this.widget.locale, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, T.ListN().as(dart.test(this.widget.allowViewNavigation) ? null : this[_getSelectedDateValue]()), this.widget.selectionRadius, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.width, this.widget.height, this.widget.view, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, {widgets: this[_children], $creationLocationd_0dea112b090073317d4: C[34] || CT.C34});
          }
        }
        case C[101] || CT.C101:
        {
          {
            return new year_view._RangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.cellStyle, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.todayHighlightColor, this.widget.selectionShape, this.widget.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, this.widget.locale, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, dart.test(this.widget.allowViewNavigation) ? null : this[_getSelectedDateValue](), this.widget.selectionRadius, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.width, this.widget.height, this.widget.view, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, {widgets: this[_children], $creationLocationd_0dea112b090073317d4: C[68] || CT.C68});
          }
        }
        case C[135] || CT.C135:
        {
          {
            return new year_view._ExtendableRangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.cellStyle, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.todayHighlightColor, this.widget.selectionShape, this.widget.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, this.widget.locale, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, dart.test(this.widget.allowViewNavigation) ? null : this[_getSelectedDateValue](), this.widget.selectionRadius, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.width, this.widget.height, this.widget.view, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, {widgets: this[_children], $creationLocationd_0dea112b090073317d4: C[102] || CT.C102});
          }
        }
        case C[169] || CT.C169:
        {
          {
            return new year_view._MultiRangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.cellStyle, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.todayHighlightColor, this.widget.selectionShape, this.widget.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, this.widget.locale, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, T.ListN().as(dart.test(this.widget.allowViewNavigation) ? null : this[_getSelectedDateValue]()), this.widget.selectionRadius, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.width, this.widget.height, this.widget.view, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, {widgets: this[_children], $creationLocationd_0dea112b090073317d4: C[136] || CT.C136});
          }
        }
      }
    }
    [_updateSelection](opts) {
      let t3, t2;
      let isNeedSetState = opts && 'isNeedSetState' in opts ? opts.isNeedSetState : true;
      if (isNeedSetState == null) dart.nullFailed(I[0], 480, 31, "isNeedSetState");
      t2 = this.widget;
      t3 = this[_pickerStateDetails];
      t2.getPickerStateDetails(t3);
      if (dart.test(this.widget.allowViewNavigation)) {
        this[_selectedDate$] = this[_pickerStateDetails].selectedDate;
        this[_selectedDates$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedDates);
        this[_selectedRange$] = this[_pickerStateDetails].selectedRange;
        this[_selectedRanges$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedRanges);
        return;
      }
      if (dart.test(this[_isSelectedValueEquals]())) {
        return;
      }
      this[_children][$clear]();
      this[_selectedDate$] = this[_pickerStateDetails].selectedDate;
      this[_selectedDates$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedDates);
      this[_selectedRange$] = this[_pickerStateDetails].selectedRange;
      this[_selectedRanges$] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails].selectedRanges);
      if (!dart.test(isNeedSetState)) {
        return;
      }
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    [_getSelectedDateValue]() {
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return this[_selectedDate$];
          }
        }
        case C[67] || CT.C67:
        {
          {
            return this[_selectedDates$];
          }
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            return this[_selectedRange$];
          }
        }
        case C[169] || CT.C169:
        {
          {
            return this[_selectedRanges$];
          }
        }
      }
    }
    [_isSelectedValueEquals]() {
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return core$.isSameDate(this[_selectedDate$], this[_pickerStateDetails].selectedDate);
          }
        }
        case C[67] || CT.C67:
        {
          {
            return picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$], this[_pickerStateDetails].selectedDates);
          }
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            return picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$], this[_pickerStateDetails].selectedRange);
          }
        }
        case C[169] || CT.C169:
        {
          {
            return picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$], this[_pickerStateDetails].selectedRanges);
          }
        }
      }
    }
  };
  (year_view._YearViewState.new = function() {
    this[___YearViewState__pickerStateDetails] = null;
    this[_selectedDate$] = null;
    this[_selectedDates$] = null;
    this[_selectedRange$] = null;
    this[_selectedRanges$] = null;
    this[___YearViewState__children] = null;
    year_view._YearViewState.__proto__.new.call(this);
    ;
  }).prototype = year_view._YearViewState.prototype;
  dart.addTypeTests(year_view._YearViewState);
  dart.addTypeCaches(year_view._YearViewState);
  dart.setMethodSignature(year_view._YearViewState, () => ({
    __proto__: dart.getMethods(year_view._YearViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_getRenderWidget]: dart.fnType(framework.MultiChildRenderObjectWidget, []),
    [_updateSelection]: dart.fnType(dart.void, [], {isNeedSetState: core.bool}, {}),
    [_getSelectedDateValue]: dart.fnType(dart.dynamic, []),
    [_isSelectedValueEquals]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(year_view._YearViewState, () => ({
    __proto__: dart.getGetters(year_view._YearViewState.__proto__),
    [_pickerStateDetails]: picker_helper.PickerStateArgs,
    [_children]: core.List$(framework.Widget)
  }));
  dart.setSetterSignature(year_view._YearViewState, () => ({
    __proto__: dart.getSetters(year_view._YearViewState.__proto__),
    [_pickerStateDetails]: picker_helper.PickerStateArgs,
    [_children]: core.List$(framework.Widget)
  }));
  dart.setLibraryUri(year_view._YearViewState, I[1]);
  dart.setFieldSignature(year_view._YearViewState, () => ({
    __proto__: dart.getFields(year_view._YearViewState.__proto__),
    [___YearViewState__pickerStateDetails]: dart.fieldType(dart.nullable(picker_helper.PickerStateArgs)),
    [_selectedDate$]: dart.fieldType(dart.dynamic),
    [_selectedDates$]: dart.fieldType(dart.nullable(core.List)),
    [_selectedRange$]: dart.fieldType(dart.dynamic),
    [_selectedRanges$]: dart.fieldType(dart.nullable(core.List)),
    [___YearViewState__children]: dart.fieldType(dart.nullable(core.List$(framework.Widget)))
  }));
  year_view._SingleSelectionRenderWidget = class _SingleSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 682, 64, "context");
      return new year_view._SingleSelectionRenderObject.new(this.visibleDates, this.cellStyle, this.minDate, this.maxDate, this.enablePastDates, this.todayHighlightColor, this.selectionShape, this.isRtl, this.datePickerTheme, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.selectionRadius, this.textScaleFactor, this.width, this.height, this.monthFormat, this.locale, this.view, this.isHijri, this.navigationDirection, this.localizations, this.selectedDate);
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 717, 20, "context");
      year_view._SingleSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 717, 58, "renderObject");
      t2 = renderObject;
      (() => {
        t2.visibleDates = this.visibleDates;
        t2.cellStyle = this.cellStyle;
        t2.minDate = this.minDate;
        t2.maxDate = this.maxDate;
        t2.enablePastDates = this.enablePastDates;
        t2.todayHighlightColor = this.todayHighlightColor;
        t2.selectionShape = this.selectionShape;
        t2.isRtl = this.isRtl;
        t2.datePickerTheme = this.datePickerTheme;
        t2.mouseHoverPosition = this.mouseHoverPosition;
        t2.enableMultiView = this.enableMultiView;
        t2.multiViewSpacing = this.multiViewSpacing;
        t2.selectionTextStyle = this.selectionTextStyle;
        t2.rangeTextStyle = this.rangeTextStyle;
        t2.selectionColor = this.selectionColor;
        t2.startRangeSelectionColor = this.startRangeSelectionColor;
        t2.endRangeSelectionColor = this.endRangeSelectionColor;
        t2.rangeSelectionColor = this.rangeSelectionColor;
        t2.selectedDate = this.selectedDate;
        t2.selectionRadius = this.selectionRadius;
        t2.textScaleFactor = this.textScaleFactor;
        t2.width = this.width;
        t2.height = this.height;
        t2.isHijri = this.isHijri;
        t2.localizations = this.localizations;
        t2.navigationDirection = this.navigationDirection;
        t2.monthFormat = this.monthFormat;
        t2.locale = this.locale;
        t2.view = this.view;
        return t2;
      })();
    }
  };
  (year_view._SingleSelectionRenderWidget.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectedDate, selectionRadius, selectionNotifier, textScaleFactor, width, height, view, isHijri, localizations, navigationDirection, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 564, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 568, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 570, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 572, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 573, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 574, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 575, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 576, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 577, 12, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 585, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 586, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 587, 12, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 588, 12, "width");
    if (height == null) dart.nullFailed(I[0], 589, 12, "height");
    if (view == null) dart.nullFailed(I[0], 590, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 591, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 592, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 593, 12, "navigationDirection");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[0], 594, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.cellStyle = cellStyle;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.todayHighlightColor = todayHighlightColor;
    this.selectionShape = selectionShape;
    this.monthFormat = monthFormat;
    this.isRtl = isRtl;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.selectedDate = selectedDate;
    this.selectionRadius = selectionRadius;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.width = width;
    this.height = height;
    this.view = view;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    year_view._SingleSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view._SingleSelectionRenderWidget.prototype;
  dart.addTypeTests(year_view._SingleSelectionRenderWidget);
  dart.addTypeCaches(year_view._SingleSelectionRenderWidget);
  dart.setMethodSignature(year_view._SingleSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(year_view._SingleSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(year_view._SingleSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(year_view._SingleSelectionRenderWidget, I[1]);
  dart.setFieldSignature(year_view._SingleSelectionRenderWidget, () => ({
    __proto__: dart.getFields(year_view._SingleSelectionRenderWidget.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectedDate: dart.finalFieldType(dart.dynamic),
    selectionRadius: dart.finalFieldType(core.double),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  year_view._MultiSelectionRenderWidget = class _MultiSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 871, 66, "context");
      return new year_view._MultipleSelectionRenderObject.new(this.visibleDates, this.cellStyle, this.minDate, this.maxDate, this.enablePastDates, this.todayHighlightColor, this.selectionShape, this.isRtl, this.datePickerTheme, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.selectionRadius, this.textScaleFactor, this.width, this.height, this.monthFormat, this.locale, this.view, this.isHijri, this.navigationDirection, this.localizations, this.selectedDates);
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 906, 20, "context");
      year_view._MultipleSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 906, 60, "renderObject");
      t2 = renderObject;
      (() => {
        t2.visibleDates = this.visibleDates;
        t2.cellStyle = this.cellStyle;
        t2.minDate = this.minDate;
        t2.maxDate = this.maxDate;
        t2.enablePastDates = this.enablePastDates;
        t2.todayHighlightColor = this.todayHighlightColor;
        t2.selectionShape = this.selectionShape;
        t2.isRtl = this.isRtl;
        t2.datePickerTheme = this.datePickerTheme;
        t2.mouseHoverPosition = this.mouseHoverPosition;
        t2.enableMultiView = this.enableMultiView;
        t2.multiViewSpacing = this.multiViewSpacing;
        t2.selectionTextStyle = this.selectionTextStyle;
        t2.rangeTextStyle = this.rangeTextStyle;
        t2.selectionColor = this.selectionColor;
        t2.startRangeSelectionColor = this.startRangeSelectionColor;
        t2.endRangeSelectionColor = this.endRangeSelectionColor;
        t2.rangeSelectionColor = this.rangeSelectionColor;
        t2.selectedDates = this.selectedDates;
        t2.selectionRadius = this.selectionRadius;
        t2.textScaleFactor = this.textScaleFactor;
        t2.width = this.width;
        t2.height = this.height;
        t2.isHijri = this.isHijri;
        t2.localizations = this.localizations;
        t2.navigationDirection = this.navigationDirection;
        t2.monthFormat = this.monthFormat;
        t2.locale = this.locale;
        t2.view = this.view;
        return t2;
      })();
    }
  };
  (year_view._MultiSelectionRenderWidget.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectedDates, selectionRadius, selectionNotifier, textScaleFactor, width, height, view, isHijri, localizations, navigationDirection, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 753, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 757, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 759, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 761, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 762, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 763, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 764, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 765, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 766, 12, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 774, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 775, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 776, 12, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 777, 12, "width");
    if (height == null) dart.nullFailed(I[0], 778, 12, "height");
    if (view == null) dart.nullFailed(I[0], 779, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 780, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 781, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 782, 12, "navigationDirection");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[0], 783, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.cellStyle = cellStyle;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.todayHighlightColor = todayHighlightColor;
    this.selectionShape = selectionShape;
    this.monthFormat = monthFormat;
    this.isRtl = isRtl;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.selectedDates = selectedDates;
    this.selectionRadius = selectionRadius;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.width = width;
    this.height = height;
    this.view = view;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    year_view._MultiSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view._MultiSelectionRenderWidget.prototype;
  dart.addTypeTests(year_view._MultiSelectionRenderWidget);
  dart.addTypeCaches(year_view._MultiSelectionRenderWidget);
  dart.setMethodSignature(year_view._MultiSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(year_view._MultiSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(year_view._MultipleSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(year_view._MultiSelectionRenderWidget, I[1]);
  dart.setFieldSignature(year_view._MultiSelectionRenderWidget, () => ({
    __proto__: dart.getFields(year_view._MultiSelectionRenderWidget.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectedDates: dart.finalFieldType(dart.nullable(core.List)),
    selectionRadius: dart.finalFieldType(core.double),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  year_view._RangeSelectionRenderWidget = class _RangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 1060, 63, "context");
      return new year_view._RangeSelectionRenderObject.new(this.visibleDates, this.cellStyle, this.minDate, this.maxDate, this.enablePastDates, this.todayHighlightColor, this.selectionShape, this.isRtl, this.datePickerTheme, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.selectionRadius, this.textScaleFactor, this.width, this.height, this.monthFormat, this.locale, this.view, this.isHijri, this.navigationDirection, this.localizations, this.selectedRange);
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 1095, 20, "context");
      year_view._RangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 1095, 57, "renderObject");
      t2 = renderObject;
      (() => {
        t2.visibleDates = this.visibleDates;
        t2.cellStyle = this.cellStyle;
        t2.minDate = this.minDate;
        t2.maxDate = this.maxDate;
        t2.enablePastDates = this.enablePastDates;
        t2.todayHighlightColor = this.todayHighlightColor;
        t2.selectionShape = this.selectionShape;
        t2.isRtl = this.isRtl;
        t2.datePickerTheme = this.datePickerTheme;
        t2.mouseHoverPosition = this.mouseHoverPosition;
        t2.enableMultiView = this.enableMultiView;
        t2.multiViewSpacing = this.multiViewSpacing;
        t2.selectionTextStyle = this.selectionTextStyle;
        t2.rangeTextStyle = this.rangeTextStyle;
        t2.selectionColor = this.selectionColor;
        t2.startRangeSelectionColor = this.startRangeSelectionColor;
        t2.endRangeSelectionColor = this.endRangeSelectionColor;
        t2.rangeSelectionColor = this.rangeSelectionColor;
        t2.selectedRange = this.selectedRange;
        t2.selectionRadius = this.selectionRadius;
        t2.textScaleFactor = this.textScaleFactor;
        t2.width = this.width;
        t2.height = this.height;
        t2.isHijri = this.isHijri;
        t2.localizations = this.localizations;
        t2.navigationDirection = this.navigationDirection;
        t2.monthFormat = this.monthFormat;
        t2.locale = this.locale;
        t2.view = this.view;
        return t2;
      })();
    }
  };
  (year_view._RangeSelectionRenderWidget.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectedRange, selectionRadius, selectionNotifier, textScaleFactor, width, height, view, isHijri, localizations, navigationDirection, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 942, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 946, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 948, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 950, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 951, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 952, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 953, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 954, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 955, 12, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 963, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 964, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 965, 12, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 966, 12, "width");
    if (height == null) dart.nullFailed(I[0], 967, 12, "height");
    if (view == null) dart.nullFailed(I[0], 968, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 969, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 970, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 971, 12, "navigationDirection");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[0], 972, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.cellStyle = cellStyle;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.todayHighlightColor = todayHighlightColor;
    this.selectionShape = selectionShape;
    this.monthFormat = monthFormat;
    this.isRtl = isRtl;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.selectedRange = selectedRange;
    this.selectionRadius = selectionRadius;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.width = width;
    this.height = height;
    this.view = view;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    year_view._RangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view._RangeSelectionRenderWidget.prototype;
  dart.addTypeTests(year_view._RangeSelectionRenderWidget);
  dart.addTypeCaches(year_view._RangeSelectionRenderWidget);
  dart.setMethodSignature(year_view._RangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(year_view._RangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(year_view._RangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(year_view._RangeSelectionRenderWidget, I[1]);
  dart.setFieldSignature(year_view._RangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(year_view._RangeSelectionRenderWidget.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectedRange: dart.finalFieldType(dart.dynamic),
    selectionRadius: dart.finalFieldType(core.double),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  year_view._ExtendableRangeSelectionRenderWidget = class _ExtendableRangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 1251, 20, "context");
      return new year_view._ExtendableRangeSelectionRenderObject.new(this.visibleDates, this.cellStyle, this.minDate, this.maxDate, this.enablePastDates, this.todayHighlightColor, this.selectionShape, this.isRtl, this.datePickerTheme, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.selectionRadius, this.textScaleFactor, this.width, this.height, this.monthFormat, this.locale, this.view, this.isHijri, this.navigationDirection, this.localizations, this.selectedRange);
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 1285, 40, "context");
      year_view._ExtendableRangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 1286, 45, "renderObject");
      t2 = renderObject;
      (() => {
        t2.visibleDates = this.visibleDates;
        t2.cellStyle = this.cellStyle;
        t2.minDate = this.minDate;
        t2.maxDate = this.maxDate;
        t2.enablePastDates = this.enablePastDates;
        t2.todayHighlightColor = this.todayHighlightColor;
        t2.selectionShape = this.selectionShape;
        t2.isRtl = this.isRtl;
        t2.datePickerTheme = this.datePickerTheme;
        t2.mouseHoverPosition = this.mouseHoverPosition;
        t2.enableMultiView = this.enableMultiView;
        t2.multiViewSpacing = this.multiViewSpacing;
        t2.selectionTextStyle = this.selectionTextStyle;
        t2.rangeTextStyle = this.rangeTextStyle;
        t2.selectionColor = this.selectionColor;
        t2.startRangeSelectionColor = this.startRangeSelectionColor;
        t2.endRangeSelectionColor = this.endRangeSelectionColor;
        t2.rangeSelectionColor = this.rangeSelectionColor;
        t2.selectedRange = this.selectedRange;
        t2.selectionRadius = this.selectionRadius;
        t2.textScaleFactor = this.textScaleFactor;
        t2.width = this.width;
        t2.height = this.height;
        t2.isHijri = this.isHijri;
        t2.localizations = this.localizations;
        t2.navigationDirection = this.navigationDirection;
        t2.monthFormat = this.monthFormat;
        t2.locale = this.locale;
        t2.view = this.view;
        return t2;
      })();
    }
  };
  (year_view._ExtendableRangeSelectionRenderWidget.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectedRange, selectionRadius, selectionNotifier, textScaleFactor, width, height, view, isHijri, localizations, navigationDirection, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 1132, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 1136, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 1138, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 1140, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 1141, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 1142, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 1143, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 1144, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 1145, 12, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 1153, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 1154, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 1155, 12, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 1156, 12, "width");
    if (height == null) dart.nullFailed(I[0], 1157, 12, "height");
    if (view == null) dart.nullFailed(I[0], 1158, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 1159, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 1160, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 1161, 12, "navigationDirection");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[0], 1162, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.cellStyle = cellStyle;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.todayHighlightColor = todayHighlightColor;
    this.selectionShape = selectionShape;
    this.monthFormat = monthFormat;
    this.isRtl = isRtl;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.selectedRange = selectedRange;
    this.selectionRadius = selectionRadius;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.width = width;
    this.height = height;
    this.view = view;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    year_view._ExtendableRangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view._ExtendableRangeSelectionRenderWidget.prototype;
  dart.addTypeTests(year_view._ExtendableRangeSelectionRenderWidget);
  dart.addTypeCaches(year_view._ExtendableRangeSelectionRenderWidget);
  dart.setMethodSignature(year_view._ExtendableRangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(year_view._ExtendableRangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(year_view._ExtendableRangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(year_view._ExtendableRangeSelectionRenderWidget, I[1]);
  dart.setFieldSignature(year_view._ExtendableRangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(year_view._ExtendableRangeSelectionRenderWidget.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectedRange: dart.finalFieldType(dart.dynamic),
    selectionRadius: dart.finalFieldType(core.double),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  year_view._MultiRangeSelectionRenderWidget = class _MultiRangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 1441, 68, "context");
      return new year_view._MultiRangeSelectionRenderObject.new(this.visibleDates, this.cellStyle, this.minDate, this.maxDate, this.enablePastDates, this.todayHighlightColor, this.selectionShape, this.isRtl, this.datePickerTheme, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.selectionRadius, this.textScaleFactor, this.width, this.height, this.monthFormat, this.locale, this.view, this.isHijri, this.navigationDirection, this.localizations, this.selectedRanges);
    }
    updateRenderObject(context, renderObject) {
      let t2;
      if (context == null) dart.nullFailed(I[0], 1476, 20, "context");
      year_view._MultiRangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 1476, 62, "renderObject");
      t2 = renderObject;
      (() => {
        t2.visibleDates = this.visibleDates;
        t2.cellStyle = this.cellStyle;
        t2.minDate = this.minDate;
        t2.maxDate = this.maxDate;
        t2.enablePastDates = this.enablePastDates;
        t2.todayHighlightColor = this.todayHighlightColor;
        t2.selectionShape = this.selectionShape;
        t2.isRtl = this.isRtl;
        t2.datePickerTheme = this.datePickerTheme;
        t2.mouseHoverPosition = this.mouseHoverPosition;
        t2.enableMultiView = this.enableMultiView;
        t2.multiViewSpacing = this.multiViewSpacing;
        t2.selectionTextStyle = this.selectionTextStyle;
        t2.rangeTextStyle = this.rangeTextStyle;
        t2.selectionColor = this.selectionColor;
        t2.startRangeSelectionColor = this.startRangeSelectionColor;
        t2.endRangeSelectionColor = this.endRangeSelectionColor;
        t2.rangeSelectionColor = this.rangeSelectionColor;
        t2.selectedRanges = this.selectedRanges;
        t2.selectionRadius = this.selectionRadius;
        t2.textScaleFactor = this.textScaleFactor;
        t2.width = this.width;
        t2.height = this.height;
        t2.isHijri = this.isHijri;
        t2.localizations = this.localizations;
        t2.monthFormat = this.monthFormat;
        t2.locale = this.locale;
        t2.navigationDirection = this.navigationDirection;
        t2.view = this.view;
        return t2;
      })();
    }
  };
  (year_view._MultiRangeSelectionRenderWidget.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, monthFormat, isRtl, datePickerTheme, locale, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectedRanges, selectionRadius, selectionNotifier, textScaleFactor, width, height, view, isHijri, localizations, navigationDirection, opts) {
    if (visibleDates == null) dart.nullFailed(I[0], 1322, 12, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 1326, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 1328, 12, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 1330, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 1331, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[0], 1332, 12, "locale");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 1333, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 1334, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 1335, 12, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 1343, 12, "selectionRadius");
    if (selectionNotifier == null) dart.nullFailed(I[0], 1344, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[0], 1345, 12, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 1346, 12, "width");
    if (height == null) dart.nullFailed(I[0], 1347, 12, "height");
    if (view == null) dart.nullFailed(I[0], 1348, 12, "view");
    if (isHijri == null) dart.nullFailed(I[0], 1349, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[0], 1350, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[0], 1351, 12, "navigationDirection");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[0], 1352, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.cellStyle = cellStyle;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.todayHighlightColor = todayHighlightColor;
    this.selectionShape = selectionShape;
    this.monthFormat = monthFormat;
    this.isRtl = isRtl;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.selectedRanges = selectedRanges;
    this.selectionRadius = selectionRadius;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.width = width;
    this.height = height;
    this.view = view;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    year_view._MultiRangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = year_view._MultiRangeSelectionRenderWidget.prototype;
  dart.addTypeTests(year_view._MultiRangeSelectionRenderWidget);
  dart.addTypeCaches(year_view._MultiRangeSelectionRenderWidget);
  dart.setMethodSignature(year_view._MultiRangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(year_view._MultiRangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(year_view._MultiRangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(year_view._MultiRangeSelectionRenderWidget, I[1]);
  dart.setFieldSignature(year_view._MultiRangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(year_view._MultiRangeSelectionRenderWidget.__proto__),
    cellStyle: dart.finalFieldType(dart.dynamic),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    selectedRanges: dart.finalFieldType(dart.nullable(core.List)),
    selectionRadius: dart.finalFieldType(core.double),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    textScaleFactor: dart.finalFieldType(core.double),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    locale: dart.finalFieldType(ui.Locale),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations)
  }));
  year_view._DatePickerParentData = class _DatePickerParentData extends box$.ContainerBoxParentData$(box$.RenderBox) {};
  (year_view._DatePickerParentData.new = function() {
    year_view._DatePickerParentData.__proto__.new.call(this);
    ;
  }).prototype = year_view._DatePickerParentData.prototype;
  dart.addTypeTests(year_view._DatePickerParentData);
  dart.addTypeCaches(year_view._DatePickerParentData);
  dart.setLibraryUri(year_view._DatePickerParentData, I[1]);
  var _textPainter = dart.privateName(year_view, "_textPainter");
  var _todayHighlightPaint = dart.privateName(year_view, "_todayHighlightPaint");
  var _cacheNodes = dart.privateName(year_view, "_cacheNodes");
  var _visibleDates$ = dart.privateName(year_view, "_visibleDates");
  var _cellStyle$ = dart.privateName(year_view, "_cellStyle");
  var _minDate$ = dart.privateName(year_view, "_minDate");
  var _maxDate$ = dart.privateName(year_view, "_maxDate");
  var _enablePastDates$ = dart.privateName(year_view, "_enablePastDates");
  var _todayHighlightColor$ = dart.privateName(year_view, "_todayHighlightColor");
  var _selectionShape$ = dart.privateName(year_view, "_selectionShape");
  var _isRtl$ = dart.privateName(year_view, "_isRtl");
  var _datePickerTheme$ = dart.privateName(year_view, "_datePickerTheme");
  var _mouseHoverPosition$ = dart.privateName(year_view, "_mouseHoverPosition");
  var _enableMultiView$ = dart.privateName(year_view, "_enableMultiView");
  var _multiViewSpacing$ = dart.privateName(year_view, "_multiViewSpacing");
  var _selectionTextStyle$ = dart.privateName(year_view, "_selectionTextStyle");
  var _rangeTextStyle$ = dart.privateName(year_view, "_rangeTextStyle");
  var _selectionColor$ = dart.privateName(year_view, "_selectionColor");
  var _startRangeSelectionColor$ = dart.privateName(year_view, "_startRangeSelectionColor");
  var _endRangeSelectionColor$ = dart.privateName(year_view, "_endRangeSelectionColor");
  var _rangeSelectionColor$ = dart.privateName(year_view, "_rangeSelectionColor");
  var _selectionRadius$ = dart.privateName(year_view, "_selectionRadius");
  var _textScaleFactor$ = dart.privateName(year_view, "_textScaleFactor");
  var _width$ = dart.privateName(year_view, "_width");
  var _height$ = dart.privateName(year_view, "_height");
  var _monthFormat$ = dart.privateName(year_view, "_monthFormat");
  var _locale$ = dart.privateName(year_view, "_locale");
  var _view$ = dart.privateName(year_view, "_view");
  var _isHijri$ = dart.privateName(year_view, "_isHijri");
  var _navigationDirection$ = dart.privateName(year_view, "_navigationDirection");
  var _getSemanticsBuilder = dart.privateName(year_view, "_getSemanticsBuilder");
  var _getRangeIndex = dart.privateName(year_view, "_getRangeIndex");
  var _getCellText = dart.privateName(year_view, "_getCellText");
  var _addMouseHovering = dart.privateName(year_view, "_addMouseHovering");
  var _getSelectedRangePosition = dart.privateName(year_view, "_getSelectedRangePosition");
  var _addRangeHoverEffect = dart.privateName(year_view, "_addRangeHoverEffect");
  var _drawTodayHighlight = dart.privateName(year_view, "_drawTodayHighlight");
  var _drawYearDecoration = dart.privateName(year_view, "_drawYearDecoration");
  var _updateCellTextStyle = dart.privateName(year_view, "_updateCellTextStyle");
  var _updateCellDecoration = dart.privateName(year_view, "_updateCellDecoration");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box$.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box$.RenderBox, year_view._DatePickerParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box$.RenderBox, year_view._DatePickerParentData));
  year_view._IYearViewRenderObject = class _IYearViewRenderObject extends RenderBox_ContainerRenderObjectMixin$36 {
    get navigationDirection() {
      return this[_navigationDirection$];
    }
    set navigationDirection(value) {
      if (value == null) dart.nullFailed(I[0], 1549, 62, "value");
      if (this[_navigationDirection$] == value) {
        return;
      }
      this[_navigationDirection$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get cellStyle() {
      return this[_cellStyle$];
    }
    set cellStyle(value) {
      if (dart.equals(this[_cellStyle$], value)) {
        return;
      }
      this[_cellStyle$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get selectionTextStyle() {
      return this[_selectionTextStyle$];
    }
    set selectionTextStyle(value) {
      if (dart.equals(this[_selectionTextStyle$], value)) {
        return;
      }
      this[_selectionTextStyle$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get rangeTextStyle() {
      return this[_rangeTextStyle$];
    }
    set rangeTextStyle(value) {
      if (dart.equals(this[_rangeTextStyle$], value)) {
        return;
      }
      this[_rangeTextStyle$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get selectionColor() {
      return this[_selectionColor$];
    }
    set selectionColor(value) {
      if (dart.equals(this[_selectionColor$], value)) {
        return;
      }
      this[_selectionColor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get startRangeSelectionColor() {
      return this[_startRangeSelectionColor$];
    }
    set startRangeSelectionColor(value) {
      if (dart.equals(this[_startRangeSelectionColor$], value)) {
        return;
      }
      this[_startRangeSelectionColor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get endRangeSelectionColor() {
      return this[_endRangeSelectionColor$];
    }
    set endRangeSelectionColor(value) {
      if (dart.equals(this[_endRangeSelectionColor$], value)) {
        return;
      }
      this[_endRangeSelectionColor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get rangeSelectionColor() {
      return this[_rangeSelectionColor$];
    }
    set rangeSelectionColor(value) {
      if (dart.equals(this[_rangeSelectionColor$], value)) {
        return;
      }
      this[_rangeSelectionColor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get visibleDates() {
      return this[_visibleDates$];
    }
    set visibleDates(value) {
      if (value == null) dart.nullFailed(I[0], 1685, 34, "value");
      if (dart.equals(this[_visibleDates$], value)) {
        return;
      }
      this[_visibleDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get isRtl() {
      return this[_isRtl$];
    }
    set isRtl(value) {
      if (value == null) dart.nullFailed(I[0], 1702, 18, "value");
      if (this[_isRtl$] == value) {
        return;
      }
      this[_isRtl$] = value;
      this.markNeedsPaint();
    }
    get todayHighlightColor() {
      return this[_todayHighlightColor$];
    }
    set todayHighlightColor(value) {
      if (dart.equals(this[_todayHighlightColor$], value)) {
        return;
      }
      this[_todayHighlightColor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get datePickerTheme() {
      return this[_datePickerTheme$];
    }
    set datePickerTheme(value) {
      if (value == null) dart.nullFailed(I[0], 1732, 50, "value");
      if (dart.equals(this[_datePickerTheme$], value)) {
        return;
      }
      this[_datePickerTheme$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get minDate() {
      return this[_minDate$];
    }
    set minDate(value) {
      if (dart.equals(this[_minDate$], value)) {
        return;
      }
      this[_minDate$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get maxDate() {
      return this[_maxDate$];
    }
    set maxDate(value) {
      if (dart.equals(this[_maxDate$], value)) {
        return;
      }
      this[_maxDate$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get enablePastDates() {
      return this[_enablePastDates$];
    }
    set enablePastDates(value) {
      if (value == null) dart.nullFailed(I[0], 1783, 28, "value");
      if (this[_enablePastDates$] == value) {
        return;
      }
      this[_enablePastDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get selectionShape() {
      return this[_selectionShape$];
    }
    set selectionShape(value) {
      if (value == null) dart.nullFailed(I[0], 1800, 52, "value");
      if (this[_selectionShape$] == value) {
        return;
      }
      this[_selectionShape$] = value;
      this.markNeedsPaint();
    }
    get mouseHoverPosition() {
      return this[_mouseHoverPosition$];
    }
    set mouseHoverPosition(value) {
      if (value == null) dart.nullFailed(I[0], 1813, 58, "value");
      if (dart.equals(this[_mouseHoverPosition$], value)) {
        return;
      }
      this[_mouseHoverPosition$].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_mouseHoverPosition$] = value;
      this.markNeedsPaint();
    }
    get selectionRadius() {
      return this[_selectionRadius$];
    }
    set selectionRadius(value) {
      if (value == null) dart.nullFailed(I[0], 1827, 30, "value");
      if (this[_selectionRadius$] == value) {
        return;
      }
      this[_selectionRadius$] = value;
      this.markNeedsPaint();
    }
    get enableMultiView() {
      return this[_enableMultiView$];
    }
    set enableMultiView(value) {
      if (value == null) dart.nullFailed(I[0], 1840, 28, "value");
      if (this[_enableMultiView$] == value) {
        return;
      }
      this[_enableMultiView$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get multiViewSpacing() {
      return this[_multiViewSpacing$];
    }
    set multiViewSpacing(value) {
      if (value == null) dart.nullFailed(I[0], 1858, 31, "value");
      if (this[_multiViewSpacing$] == value) {
        return;
      }
      this[_multiViewSpacing$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get textScaleFactor() {
      return this[_textScaleFactor$];
    }
    set textScaleFactor(value) {
      if (value == null) dart.nullFailed(I[0], 1875, 30, "value");
      if (this[_textScaleFactor$] == value) {
        return;
      }
      this[_textScaleFactor$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get height() {
      return this[_height$];
    }
    set height(value) {
      if (value == null) dart.nullFailed(I[0], 1892, 21, "value");
      if (this[_height$] == value) {
        return;
      }
      this[_height$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get width() {
      return this[_width$];
    }
    set width(value) {
      if (value == null) dart.nullFailed(I[0], 1909, 20, "value");
      if (this[_width$] == value) {
        return;
      }
      this[_width$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get monthFormat() {
      return this[_monthFormat$];
    }
    set monthFormat(value) {
      if (this[_monthFormat$] == value) {
        return;
      }
      this[_monthFormat$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get locale() {
      return this[_locale$];
    }
    set locale(value) {
      if (value == null) dart.nullFailed(I[0], 1943, 21, "value");
      if (dart.equals(this[_locale$], value)) {
        return;
      }
      this[_locale$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get view() {
      return this[_view$];
    }
    set view(value) {
      if (value == null) dart.nullFailed(I[0], 1960, 32, "value");
      if (this[_view$] == value) {
        return;
      }
      this[_view$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get isHijri() {
      return this[_isHijri$];
    }
    set isHijri(value) {
      if (value == null) dart.nullFailed(I[0], 1978, 20, "value");
      if (this[_isHijri$] == value) {
        return;
      }
      this[_isHijri$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[0], 2015, 29, "owner");
      super.attach(owner);
      this[_mouseHoverPosition$].addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      this[_mouseHoverPosition$].removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    setupParentData(child) {
      object.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[0], 2028, 47, "child");
      if (!year_view._DatePickerParentData.is(child.parentData)) {
        child.parentData = new year_view._DatePickerParentData.new();
      }
    }
    performLayout() {
      let widgetSize = this.constraints.biggest;
      this.size = new ui.Size.new(widgetSize.width[$isInfinite] ? this.width : widgetSize.width, widgetSize.height[$isInfinite] ? this.height : widgetSize.height);
      let child = this.firstChild;
      if (child == null) {
        return;
      }
      let currentWidth = this.size.width;
      let currentHeight = this.size.height;
      if (dart.test(this[_enableMultiView$])) {
        if (this[_navigationDirection$] == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
          currentWidth = (dart.notNull(currentWidth) - dart.notNull(this.multiViewSpacing)) / 2;
        } else {
          currentHeight = (dart.notNull(currentHeight) - dart.notNull(this.multiViewSpacing)) / 2;
        }
      }
      let cellWidth = dart.notNull(currentWidth) / 3;
      let cellHeight = dart.notNull(currentHeight) / 4;
      while (child != null) {
        child.layout(this.constraints.copyWith({minHeight: cellHeight, maxHeight: cellHeight, minWidth: cellWidth, maxWidth: cellWidth}));
        child = this.childAfter(child);
      }
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[0], 2071, 62, "config");
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
    }
    assembleSemanticsNode(node, config, children) {
      let t2;
      if (node == null) dart.nullFailed(I[0], 2078, 19, "node");
      if (config == null) dart.nullFailed(I[0], 2079, 28, "config");
      if (children == null) dart.nullFailed(I[0], 2080, 29, "children");
      this[_cacheNodes] == null ? this[_cacheNodes] = T.JSArrayOfSemanticsNode().of([]) : null;
      let semantics = this[_getSemanticsBuilder](this.size);
      let semanticsNodes = T.JSArrayOfSemanticsNode().of([]);
      for (let i = 0; i < dart.notNull(semantics[$length]); i = i + 1) {
        let currentSemantics = semantics[$_get](i);
        let newChild = dart.test(dart.nullCheck(this[_cacheNodes])[$isNotEmpty]) ? dart.nullCheck(this[_cacheNodes])[$removeAt](0) : new semantics$.SemanticsNode.new({key: currentSemantics.key});
        let properties = currentSemantics.properties;
        let config = new semantics$.SemanticsConfiguration.new();
        if (properties.label != null) {
          config.label = dart.nullCheck(properties.label);
        }
        if (properties.textDirection != null) {
          config.textDirection = properties.textDirection;
        }
        newChild.updateWith({config: config, childrenInInversePaintOrder: C[170] || CT.C170});
        t2 = newChild;
        (() => {
          t2.rect = currentSemantics.rect;
          t2.transform = currentSemantics.transform;
          t2.tags = currentSemantics.tags;
          return t2;
        })();
        semanticsNodes[$add](newChild);
      }
      let finalChildren = T.JSArrayOfSemanticsNode().of([]);
      finalChildren[$addAll](semanticsNodes);
      finalChildren[$addAll](children);
      this[_cacheNodes] = semanticsNodes;
      super.assembleSemanticsNode(node, config, finalChildren);
    }
    clearSemantics() {
      super.clearSemantics();
      this[_cacheNodes] = null;
    }
    visitChildrenForSemantics(visitor) {
      if (visitor == null) dart.nullFailed(I[0], 2128, 54, "visitor");
      return;
    }
    [_getSemanticsBuilder](size) {
      if (size == null) dart.nullFailed(I[0], 2149, 58, "size");
      let semanticsBuilder = T.JSArrayOfCustomPainterSemantics().of([]);
      let left = null;
      let top = null;
      let leftAndTopValue = null;
      let count = 1;
      let width = size.width;
      let height = size.height;
      let webUIPadding = 0.0;
      let isHorizontalMultiView = dart.test(this[_enableMultiView$]) && this[_navigationDirection$] == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
      let isVerticalMultiView = dart.test(this[_enableMultiView$]) && this[_navigationDirection$] == date_picker_manager.DateRangePickerNavigationDirection.vertical;
      if (isHorizontalMultiView) {
        webUIPadding = this[_multiViewSpacing$];
        count = 2;
        width = (dart.notNull(width) - dart.notNull(webUIPadding)) / count;
      } else if (isVerticalMultiView) {
        webUIPadding = this[_multiViewSpacing$];
        count = 2;
        height = (dart.notNull(height) - dart.notNull(webUIPadding)) / count;
      }
      let cellWidth = dart.notNull(width) / 3;
      let cellHeight = dart.notNull(height) / 4;
      let datesCount = (dart.notNull(this.visibleDates[$length]) / count)[$truncate]();
      for (let j = 0; j < count; j = j + 1) {
        let currentViewIndex = dart.test(this.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(count, j) : j;
        left = dart.test(this.isRtl) ? dart.notNull(width) - cellWidth : 0.0;
        top = 0.0;
        let startXPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(width) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
        let startYPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
        let startIndex = j * datesCount;
        for (let i = 0; i < datesCount; i = i + 1) {
          let date = this.visibleDates[$_get](startIndex + i);
          if (dart.test(picker_helper.DateRangePickerHelper.isLeadingCellDate(startIndex + i, startIndex, this[_visibleDates$], this[_view$]))) {
            leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this.isRtl, left, top, cellWidth, cellHeight, width);
            left = dart.nullCheck(leftAndTopValue[$_get]("left"));
            top = dart.nullCheck(leftAndTopValue[$_get]("top"));
            continue;
          }
          if (!dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(date, this[_minDate$], this[_maxDate$], this[_enablePastDates$], this[_view$], this[_isHijri$]))) {
            semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(startXPosition + dart.notNull(left), startYPosition + dart.notNull(top), cellWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: dart.notNull(this.getCellSemanticsText(date)) + "Disabled cell", textDirection: ui.TextDirection.ltr})}));
            leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this.isRtl, left, top, cellWidth, cellHeight, width);
            left = dart.nullCheck(leftAndTopValue[$_get]("left"));
            top = dart.nullCheck(leftAndTopValue[$_get]("top"));
            continue;
          }
          semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(startXPosition + dart.notNull(left), startYPosition + dart.notNull(top), cellWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: this.getCellSemanticsText(date), textDirection: ui.TextDirection.ltr})}));
          leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this.isRtl, left, top, cellWidth, cellHeight, width);
          left = dart.nullCheck(leftAndTopValue[$_get]("left"));
          top = dart.nullCheck(leftAndTopValue[$_get]("top"));
        }
      }
      return semanticsBuilder;
    }
    [_getRangeIndex](startDate, endDate, pickerView, viewStartIndex, viewEndIndex) {
      if (pickerView == null) dart.nullFailed(I[0], 2236, 27, "pickerView");
      if (viewStartIndex == null) dart.nullFailed(I[0], 2236, 43, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 2236, 63, "viewEndIndex");
      let startIndex = -1;
      let endIndex = -1;
      let selectedIndex = T.JSArrayOfint().of([]);
      if (startDate != null && dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
        let temp = startDate;
        startDate = endDate;
        endDate = temp;
      }
      let viewStartDate = this.visibleDates[$_get](viewStartIndex);
      let viewEndDate = picker_helper.DateRangePickerHelper.getLastDate(this.visibleDates[$_get](viewEndIndex), pickerView, this[_isHijri$]);
      if (startDate != null) {
        if (dart.equals(dart.dsend(viewStartDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(viewStartDate, 'isBefore', [endDate]), true)) {
          startIndex = -1;
        } else {
          startIndex = picker_helper.DateRangePickerHelper.getDateCellIndex(this.visibleDates, startDate, pickerView, {viewStartIndex: viewStartIndex, viewEndIndex: viewEndIndex});
        }
      }
      if (endDate != null) {
        if (dart.equals(dart.dsend(viewEndDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(viewEndDate, 'isBefore', [endDate]), true)) {
          endIndex = dart.notNull(viewEndIndex) + 1;
        } else {
          endIndex = picker_helper.DateRangePickerHelper.getDateCellIndex(this.visibleDates, endDate, this[_view$], {viewStartIndex: viewStartIndex, viewEndIndex: viewEndIndex});
        }
      }
      if (startIndex !== -1 && endIndex === -1) {
        endIndex = startIndex;
      }
      if (dart.notNull(startIndex) > dart.notNull(endIndex)) {
        let temp = startIndex;
        startIndex = endIndex;
        endIndex = temp;
      }
      for (let i = startIndex; dart.notNull(i) <= dart.notNull(endIndex); i = dart.notNull(i) + 1) {
        selectedIndex[$add](i);
      }
      return selectedIndex;
    }
    [_getCellText](date) {
      if (this[_view$] == date_picker_manager.DateRangePickerView.year) {
        let format = this.monthFormat == null || dart.nullCheck(this.monthFormat)[$isEmpty] ? "MMM" : dart.nullCheck(this.monthFormat);
        if (dart.test(this.isHijri)) {
          return picker_helper.DateRangePickerHelper.getHijriMonthText(date, this.localizations, format);
        } else {
          return dart.toString(new date_format.DateFormat.new(format, dart.toString(this.locale)).format(core.DateTime.as(date)));
        }
      } else if (this[_view$] == date_picker_manager.DateRangePickerView.decade) {
        return dart.toString(dart.dload(date, 'year'));
      } else if (this[_view$] == date_picker_manager.DateRangePickerView.century) {
        return dart.notNull(dart.toString(dart.dload(date, 'year'))) + " - " + dart.notNull(dart.toString(dart.dsend(dart.dload(date, 'year'), '+', [9])));
      }
      return "";
    }
    getCellSemanticsText(date) {
      if (this[_view$] == date_picker_manager.DateRangePickerView.year) {
        if (dart.test(this.isHijri)) {
          return dart.notNull(picker_helper.DateRangePickerHelper.getHijriMonthText(date, this.localizations, "MMMM")) + dart.notNull(dart.toString(dart.dload(date, 'year')));
        } else {
          return dart.toString(new date_format.DateFormat.new("MMMM yyyy").format(core.DateTime.as(date)));
        }
      } else if (this[_view$] == date_picker_manager.DateRangePickerView.decade) {
        return dart.toString(dart.dload(date, 'year'));
      } else if (this[_view$] == date_picker_manager.DateRangePickerView.century) {
        return dart.notNull(dart.toString(dart.dload(date, 'year'))) + " to " + dart.notNull(dart.toString(dart.dsend(dart.dload(date, 'year'), '+', [9])));
      }
      return "";
    }
    [_addMouseHovering](canvas, cellWidth, cellHeight, centerYPosition, currentViewIndex, width, highlightPadding, date, selectionPadding, textHalfHeight, webUIPadding, xOffset, xPosition, yOffset, yPosition) {
      if (canvas == null) dart.nullFailed(I[0], 2336, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 2337, 14, "cellWidth");
      if (cellHeight == null) dart.nullFailed(I[0], 2338, 14, "cellHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 2339, 14, "centerYPosition");
      if (currentViewIndex == null) dart.nullFailed(I[0], 2340, 11, "currentViewIndex");
      if (width == null) dart.nullFailed(I[0], 2341, 14, "width");
      if (highlightPadding == null) dart.nullFailed(I[0], 2342, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 2344, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 2345, 14, "textHalfHeight");
      if (webUIPadding == null) dart.nullFailed(I[0], 2346, 14, "webUIPadding");
      if (xOffset == null) dart.nullFailed(I[0], 2347, 14, "xOffset");
      if (xPosition == null) dart.nullFailed(I[0], 2348, 14, "xPosition");
      if (yOffset == null) dart.nullFailed(I[0], 2349, 14, "yOffset");
      if (yPosition == null) dart.nullFailed(I[0], 2350, 14, "yPosition");
      if (dart.notNull(xPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(this[_mouseHoverPosition$].value).offset).dx) && dart.notNull(xPosition) + dart.notNull(cellWidth) >= dart.notNull(dart.nullCheck(dart.nullCheck(this[_mouseHoverPosition$].value).offset).dx) && dart.notNull(yPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(this[_mouseHoverPosition$].value).offset).dy) && dart.notNull(yPosition) + dart.notNull(cellHeight) >= dart.notNull(dart.nullCheck(dart.nullCheck(this[_mouseHoverPosition$].value).offset).dy)) {
        this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
        this[_todayHighlightPaint].strokeWidth = 2.0;
        this[_todayHighlightPaint].color = this.selectionColor != null ? dart.nullCheck(this.selectionColor).withOpacity(0.4) : dart.nullCheck(this.datePickerTheme.selectionColor).withOpacity(0.4);
        if (dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) < dart.notNull(highlightPadding) / 2) {
          highlightPadding = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) / 2 - 1;
        }
        let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
        let cornerRadius = dart.notNull(rect.height) / 2;
        switch (this.selectionShape) {
          case C[171] || CT.C171:
          {
            {
              cornerRadius = 3.0;
            }
            break;
          }
          case C[172] || CT.C172:
          {
            break;
          }
        }
        canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, new ui.Radius.circular(cornerRadius)), this[_todayHighlightPaint]);
      }
    }
    [_addRangeHoverEffect](canvas, xPosition, yPosition, currentIndex, hoveringIndex, yearView, centerYPosition, textHalfHeight, selectionPadding, highlightPadding, cellWidth, cellHeight) {
      if (canvas == null) dart.nullFailed(I[0], 2390, 14, "canvas");
      if (xPosition == null) dart.nullFailed(I[0], 2391, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 2392, 14, "yPosition");
      if (currentIndex == null) dart.nullFailed(I[0], 2393, 11, "currentIndex");
      if (yearView == null) dart.nullFailed(I[0], 2395, 30, "yearView");
      if (centerYPosition == null) dart.nullFailed(I[0], 2396, 14, "centerYPosition");
      if (textHalfHeight == null) dart.nullFailed(I[0], 2397, 14, "textHalfHeight");
      if (selectionPadding == null) dart.nullFailed(I[0], 2398, 14, "selectionPadding");
      if (highlightPadding == null) dart.nullFailed(I[0], 2399, 14, "highlightPadding");
      if (cellWidth == null) dart.nullFailed(I[0], 2400, 14, "cellWidth");
      if (cellHeight == null) dart.nullFailed(I[0], 2401, 14, "cellHeight");
      if (hoveringIndex == null || dart.test(hoveringIndex[$isEmpty])) {
        return;
      }
      let rangeSelectionYearView = null;
      function rangeSelectionYearView$35get() {
        let t3;
        t3 = rangeSelectionYearView;
        return t3 == null ? dart.throw(new _internal.LateError.localNI("rangeSelectionYearView")) : t3;
      }
      dart.fn(rangeSelectionYearView$35get, T.VoidTo_ExtendableRangeSelectionRenderObject());
      function rangeSelectionYearView$35set(t4) {
        if (t4 == null) dart.nullFailed(I[0], 2405, 48, "null");
        return rangeSelectionYearView = t4;
      }
      dart.fn(rangeSelectionYearView$35set, T._ExtendableRangeSelectionRenderObjectTodynamic());
      if (year_view._ExtendableRangeSelectionRenderObject.is(yearView)) {
        rangeSelectionYearView$35set(yearView);
      }
      let hoveringDetails = rangeSelectionYearView$35get()[_getSelectedRangePosition](currentIndex, hoveringIndex);
      let isSelectedDate = hoveringDetails[$_get](0);
      let isStartRange = hoveringDetails[$_get](1);
      let isEndRange = hoveringDetails[$_get](2);
      let isBetweenRange = hoveringDetails[$_get](3);
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let rect = new ui.Rect.fromLTRB(xPosition, dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = dart.test(isBetweenRange) ? 0.0 : this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      let leftRadius = dart.test(isStartRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      let rightRadius = dart.test(isEndRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      let roundRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: new ui.Radius.circular(leftRadius), bottomLeft: new ui.Radius.circular(leftRadius), bottomRight: new ui.Radius.circular(rightRadius), topRight: new ui.Radius.circular(rightRadius)});
      this[_todayHighlightPaint].style = ui.PaintingStyle.stroke;
      this[_todayHighlightPaint].strokeWidth = 1.0;
      this[_todayHighlightPaint].color = this.selectionColor != null ? dart.nullCheck(this.selectionColor).withOpacity(0.4) : dart.nullCheck(this.datePickerTheme.selectionColor).withOpacity(0.4);
      let path = ui.Path.new();
      if (dart.test(isStartRange) || dart.test(isSelectedDate)) {
        switch (this.selectionShape) {
          case C[172] || CT.C172:
          {
            path.addArc(new ui.Rect.fromCenter({center: new ui.Offset.new(dart.notNull(roundRect.left) + leftRadius, dart.notNull(roundRect.top) + dart.notNull(roundRect.height) / 2), width: leftRadius * 1.5, height: roundRect.height}), 3.141592653589793 / 2, 3.141592653589793);
            break;
          }
          case C[171] || CT.C171:
          {
            path.addRRect(new ui.RRect.fromLTRBR(dart.notNull(rect.left) + dart.notNull(selectionPadding), rect.top, dart.notNull(rect.right) - dart.notNull(selectionPadding), rect.bottom, new ui.Radius.circular(leftRadius)));
          }
        }
        canvas.drawPath(picker_helper.DateRangePickerHelper.getDashedPath(path, dart.test(isStartRange) || dart.test(isSelectedDate), isEndRange, this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.rectangle), this[_todayHighlightPaint]);
      } else if (dart.test(isEndRange)) {
        switch (this.selectionShape) {
          case C[172] || CT.C172:
          {
            path.addArc(new ui.Rect.fromCenter({center: new ui.Offset.new(dart.notNull(roundRect.right) - rightRadius, dart.notNull(roundRect.top) + dart.notNull(roundRect.height) / 2), width: rightRadius * 1.5, height: roundRect.height}), -(3.141592653589793 / 2), 3.141592653589793);
            break;
          }
          case C[171] || CT.C171:
          {
            path.addRRect(new ui.RRect.fromLTRBR(dart.notNull(rect.left) + dart.notNull(selectionPadding), rect.top, dart.notNull(rect.right) - dart.notNull(selectionPadding), rect.bottom, new ui.Radius.circular(rightRadius)));
          }
        }
        canvas.drawPath(picker_helper.DateRangePickerHelper.getDashedPath(path, dart.test(isStartRange) || dart.test(isSelectedDate), isEndRange, this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.rectangle), this[_todayHighlightPaint]);
      }
      picker_helper.DateRangePickerHelper.drawDashedLine(dart.notNull(roundRect.left) + leftRadius, roundRect.top, dart.notNull(roundRect.right) - rightRadius, canvas, this[_todayHighlightPaint]);
      picker_helper.DateRangePickerHelper.drawDashedLine(dart.notNull(roundRect.left) + leftRadius, roundRect.bottom, dart.notNull(roundRect.right) - rightRadius, canvas, this[_todayHighlightPaint]);
    }
    [_drawTodayHighlight](canvas, cellWidth, cellHeight, centerYPosition, highlightPadding, selectionPadding, textHalfHeight, xPosition, yPosition) {
      let t6;
      if (canvas == null) dart.nullFailed(I[0], 2519, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 2520, 14, "cellWidth");
      if (cellHeight == null) dart.nullFailed(I[0], 2521, 14, "cellHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 2522, 14, "centerYPosition");
      if (highlightPadding == null) dart.nullFailed(I[0], 2523, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 2524, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 2525, 14, "textHalfHeight");
      if (xPosition == null) dart.nullFailed(I[0], 2526, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 2527, 14, "yPosition");
      this[_todayHighlightPaint].color = (t6 = this.todayHighlightColor, t6 == null ? dart.nullCheck(this.datePickerTheme.todayHighlightColor) : t6);
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].strokeWidth = 1.0;
      this[_todayHighlightPaint].style = ui.PaintingStyle.stroke;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = dart.notNull(rect.height) / 2;
      switch (this.selectionShape) {
        case C[171] || CT.C171:
        {
          {
            cornerRadius = 3.0;
          }
          break;
        }
        case C[172] || CT.C172:
        {
          break;
        }
      }
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, new ui.Radius.circular(cornerRadius)), this[_todayHighlightPaint]);
    }
    [_drawYearDecoration](canvas, yearDecoration, xPosition, yPosition, decorationPadding, cellWidth, cellHeight) {
      if (canvas == null) dart.nullFailed(I[0], 2561, 14, "canvas");
      if (yearDecoration == null) dart.nullFailed(I[0], 2562, 18, "yearDecoration");
      if (xPosition == null) dart.nullFailed(I[0], 2563, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 2564, 14, "yPosition");
      if (decorationPadding == null) dart.nullFailed(I[0], 2565, 14, "decorationPadding");
      if (cellWidth == null) dart.nullFailed(I[0], 2566, 14, "cellWidth");
      if (cellHeight == null) dart.nullFailed(I[0], 2567, 14, "cellHeight");
      let boxPainter = yearDecoration.createBoxPainter(dart.bind(this, 'markNeedsPaint'));
      boxPainter.paint(canvas, new ui.Offset.new(dart.notNull(xPosition) + dart.notNull(decorationPadding), dart.notNull(yPosition) + dart.notNull(decorationPadding)), new image_provider.ImageConfiguration.new({size: new ui.Size.new(dart.notNull(cellWidth) - 2 * dart.notNull(decorationPadding), dart.notNull(cellHeight) - 2 * dart.notNull(decorationPadding))}));
    }
    [_updateCellTextStyle](j, isCurrentDate, isSelected, isEnableDate, isActiveDate) {
      let t6, t6$, t6$0, t6$1, t6$2;
      if (j == null) dart.nullFailed(I[0], 2578, 38, "j");
      if (isCurrentDate == null) dart.nullFailed(I[0], 2578, 46, "isCurrentDate");
      if (isSelected == null) dart.nullFailed(I[0], 2578, 66, "isSelected");
      if (isEnableDate == null) dart.nullFailed(I[0], 2579, 12, "isEnableDate");
      if (isActiveDate == null) dart.nullFailed(I[0], 2579, 31, "isActiveDate");
      if (!dart.test(isEnableDate)) {
        t6 = T.TextStyleN().as(dart.dload(this.cellStyle, 'disabledDatesTextStyle'));
        return t6 == null ? this.datePickerTheme.disabledCellTextStyle : t6;
      }
      if (dart.test(isSelected)) {
        t6$ = this.selectionTextStyle;
        return t6$ == null ? this.datePickerTheme.selectionTextStyle : t6$;
      }
      if (dart.test(isCurrentDate)) {
        t6$0 = T.TextStyleN().as(dart.dload(this.cellStyle, 'todayTextStyle'));
        return t6$0 == null ? this.datePickerTheme.todayCellTextStyle : t6$0;
      }
      if (!dart.test(isActiveDate) && !dart.test(this[_isHijri$])) {
        t6$1 = T.TextStyleN().as(dart.dload(this.cellStyle, 'leadingDatesTextStyle'));
        return t6$1 == null ? this.datePickerTheme.leadingCellTextStyle : t6$1;
      }
      t6$2 = T.TextStyleN().as(dart.dload(this.cellStyle, 'textStyle'));
      return t6$2 == null ? this.datePickerTheme.cellTextStyle : t6$2;
    }
    [_updateCellDecoration](j, isCurrentDate, isEnableDate, isActiveDate) {
      let t6;
      if (j == null) dart.nullFailed(I[0], 2603, 11, "j");
      if (isCurrentDate == null) dart.nullFailed(I[0], 2603, 19, "isCurrentDate");
      if (isEnableDate == null) dart.nullFailed(I[0], 2603, 39, "isEnableDate");
      if (isActiveDate == null) dart.nullFailed(I[0], 2603, 58, "isActiveDate");
      if (!dart.test(isEnableDate)) {
        return T.DecorationN().as(dart.dload(this.cellStyle, 'disabledDatesDecoration'));
      }
      if (dart.test(isCurrentDate)) {
        t6 = T.DecorationN().as(dart.dload(this.cellStyle, 'todayCellDecoration'));
        return t6 == null ? T.DecorationN().as(dart.dload(this.cellStyle, 'cellDecoration')) : t6;
      }
      if (!dart.test(isActiveDate) && !dart.test(this[_isHijri$])) {
        return T.DecorationN().as(dart.dload(this.cellStyle, 'leadingDatesDecoration'));
      }
      return T.DecorationN().as(dart.dload(this.cellStyle, 'cellDecoration'));
    }
  };
  (year_view._IYearViewRenderObject.new = function(_visibleDates, _cellStyle, _minDate, _maxDate, _enablePastDates, _todayHighlightColor, _selectionShape, _isRtl, _datePickerTheme, _mouseHoverPosition, _enableMultiView, _multiViewSpacing, _selectionTextStyle, _rangeTextStyle, _selectionColor, _startRangeSelectionColor, _endRangeSelectionColor, _rangeSelectionColor, _selectionRadius, _textScaleFactor, _width, _height, _monthFormat, _locale, _view, _isHijri, _navigationDirection, localizations) {
    if (_visibleDates == null) dart.nullFailed(I[0], 1515, 12, "_visibleDates");
    if (_enablePastDates == null) dart.nullFailed(I[0], 1519, 12, "_enablePastDates");
    if (_selectionShape == null) dart.nullFailed(I[0], 1521, 12, "_selectionShape");
    if (_isRtl == null) dart.nullFailed(I[0], 1522, 12, "_isRtl");
    if (_datePickerTheme == null) dart.nullFailed(I[0], 1523, 12, "_datePickerTheme");
    if (_mouseHoverPosition == null) dart.nullFailed(I[0], 1524, 12, "_mouseHoverPosition");
    if (_enableMultiView == null) dart.nullFailed(I[0], 1525, 12, "_enableMultiView");
    if (_multiViewSpacing == null) dart.nullFailed(I[0], 1526, 12, "_multiViewSpacing");
    if (_selectionRadius == null) dart.nullFailed(I[0], 1533, 12, "_selectionRadius");
    if (_textScaleFactor == null) dart.nullFailed(I[0], 1534, 12, "_textScaleFactor");
    if (_width == null) dart.nullFailed(I[0], 1535, 12, "_width");
    if (_height == null) dart.nullFailed(I[0], 1536, 12, "_height");
    if (_locale == null) dart.nullFailed(I[0], 1538, 12, "_locale");
    if (_view == null) dart.nullFailed(I[0], 1539, 12, "_view");
    if (_isHijri == null) dart.nullFailed(I[0], 1540, 12, "_isHijri");
    if (_navigationDirection == null) dart.nullFailed(I[0], 1541, 12, "_navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 1542, 12, "localizations");
    this[_textPainter] = new text_painter.TextPainter.new({textAlign: ui.TextAlign.start, textDirection: ui.TextDirection.ltr, maxLines: 2, textWidthBasis: text_painter.TextWidthBasis.longestLine});
    this[_todayHighlightPaint] = ui.Paint.new();
    this[_cacheNodes] = null;
    this[_visibleDates$] = _visibleDates;
    this[_cellStyle$] = _cellStyle;
    this[_minDate$] = _minDate;
    this[_maxDate$] = _maxDate;
    this[_enablePastDates$] = _enablePastDates;
    this[_todayHighlightColor$] = _todayHighlightColor;
    this[_selectionShape$] = _selectionShape;
    this[_isRtl$] = _isRtl;
    this[_datePickerTheme$] = _datePickerTheme;
    this[_mouseHoverPosition$] = _mouseHoverPosition;
    this[_enableMultiView$] = _enableMultiView;
    this[_multiViewSpacing$] = _multiViewSpacing;
    this[_selectionTextStyle$] = _selectionTextStyle;
    this[_rangeTextStyle$] = _rangeTextStyle;
    this[_selectionColor$] = _selectionColor;
    this[_startRangeSelectionColor$] = _startRangeSelectionColor;
    this[_endRangeSelectionColor$] = _endRangeSelectionColor;
    this[_rangeSelectionColor$] = _rangeSelectionColor;
    this[_selectionRadius$] = _selectionRadius;
    this[_textScaleFactor$] = _textScaleFactor;
    this[_width$] = _width;
    this[_height$] = _height;
    this[_monthFormat$] = _monthFormat;
    this[_locale$] = _locale;
    this[_view$] = _view;
    this[_isHijri$] = _isHijri;
    this[_navigationDirection$] = _navigationDirection;
    this.localizations = localizations;
    year_view._IYearViewRenderObject.__proto__.new.call(this);
    ;
  }).prototype = year_view._IYearViewRenderObject.prototype;
  dart.addTypeTests(year_view._IYearViewRenderObject);
  dart.addTypeCaches(year_view._IYearViewRenderObject);
  dart.setMethodSignature(year_view._IYearViewRenderObject, () => ({
    __proto__: dart.getMethods(year_view._IYearViewRenderObject.__proto__),
    [_getSemanticsBuilder]: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]),
    [_getRangeIndex]: dart.fnType(core.List$(core.int), [dart.dynamic, dart.dynamic, date_picker_manager.DateRangePickerView, core.int, core.int]),
    [_getCellText]: dart.fnType(core.String, [dart.dynamic]),
    getCellSemanticsText: dart.fnType(core.String, [dart.dynamic]),
    [_addMouseHovering]: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.double, core.int, core.double, core.double, dart.dynamic, core.double, core.double, core.double, core.double, core.double, core.double, core.double]),
    [_addRangeHoverEffect]: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int, dart.nullable(core.List$(core.int)), year_view._IYearViewRenderObject, core.double, core.double, core.double, core.double, core.double, core.double]),
    [_drawTodayHighlight]: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double]),
    [_drawYearDecoration]: dart.fnType(dart.void, [ui.Canvas, decoration.Decoration, core.double, core.double, core.double, core.double, core.double]),
    [_updateCellTextStyle]: dart.fnType(text_style.TextStyle, [core.int, core.bool, core.bool, core.bool, core.bool]),
    [_updateCellDecoration]: dart.fnType(dart.nullable(decoration.Decoration), [core.int, core.bool, core.bool, core.bool])
  }));
  dart.setGetterSignature(year_view._IYearViewRenderObject, () => ({
    __proto__: dart.getGetters(year_view._IYearViewRenderObject.__proto__),
    navigationDirection: date_picker_manager.DateRangePickerNavigationDirection,
    cellStyle: dart.dynamic,
    selectionTextStyle: dart.nullable(text_style.TextStyle),
    rangeTextStyle: dart.nullable(text_style.TextStyle),
    selectionColor: dart.nullable(ui.Color),
    startRangeSelectionColor: dart.nullable(ui.Color),
    endRangeSelectionColor: dart.nullable(ui.Color),
    rangeSelectionColor: dart.nullable(ui.Color),
    visibleDates: core.List,
    isRtl: core.bool,
    todayHighlightColor: dart.nullable(ui.Color),
    datePickerTheme: daterangepicker_theme.SfDateRangePickerThemeData,
    minDate: dart.dynamic,
    maxDate: dart.dynamic,
    enablePastDates: core.bool,
    selectionShape: date_picker_manager.DateRangePickerSelectionShape,
    mouseHoverPosition: change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails)),
    selectionRadius: core.double,
    enableMultiView: core.bool,
    multiViewSpacing: core.double,
    textScaleFactor: core.double,
    height: core.double,
    width: core.double,
    monthFormat: dart.nullable(core.String),
    locale: ui.Locale,
    view: date_picker_manager.DateRangePickerView,
    isHijri: core.bool
  }));
  dart.setSetterSignature(year_view._IYearViewRenderObject, () => ({
    __proto__: dart.getSetters(year_view._IYearViewRenderObject.__proto__),
    navigationDirection: date_picker_manager.DateRangePickerNavigationDirection,
    cellStyle: dart.dynamic,
    selectionTextStyle: dart.nullable(text_style.TextStyle),
    rangeTextStyle: dart.nullable(text_style.TextStyle),
    selectionColor: dart.nullable(ui.Color),
    startRangeSelectionColor: dart.nullable(ui.Color),
    endRangeSelectionColor: dart.nullable(ui.Color),
    rangeSelectionColor: dart.nullable(ui.Color),
    visibleDates: core.List,
    isRtl: core.bool,
    todayHighlightColor: dart.nullable(ui.Color),
    datePickerTheme: daterangepicker_theme.SfDateRangePickerThemeData,
    minDate: dart.dynamic,
    maxDate: dart.dynamic,
    enablePastDates: core.bool,
    selectionShape: date_picker_manager.DateRangePickerSelectionShape,
    mouseHoverPosition: change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails)),
    selectionRadius: core.double,
    enableMultiView: core.bool,
    multiViewSpacing: core.double,
    textScaleFactor: core.double,
    height: core.double,
    width: core.double,
    monthFormat: dart.nullable(core.String),
    locale: ui.Locale,
    view: date_picker_manager.DateRangePickerView,
    isHijri: core.bool
  }));
  dart.setLibraryUri(year_view._IYearViewRenderObject, I[1]);
  dart.setFieldSignature(year_view._IYearViewRenderObject, () => ({
    __proto__: dart.getFields(year_view._IYearViewRenderObject.__proto__),
    [_navigationDirection$]: dart.fieldType(date_picker_manager.DateRangePickerNavigationDirection),
    [_cellStyle$]: dart.fieldType(dart.dynamic),
    [_selectionTextStyle$]: dart.fieldType(dart.nullable(text_style.TextStyle)),
    [_rangeTextStyle$]: dart.fieldType(dart.nullable(text_style.TextStyle)),
    [_selectionColor$]: dart.fieldType(dart.nullable(ui.Color)),
    [_startRangeSelectionColor$]: dart.fieldType(dart.nullable(ui.Color)),
    [_endRangeSelectionColor$]: dart.fieldType(dart.nullable(ui.Color)),
    [_rangeSelectionColor$]: dart.fieldType(dart.nullable(ui.Color)),
    [_visibleDates$]: dart.fieldType(core.List),
    [_isRtl$]: dart.fieldType(core.bool),
    [_todayHighlightColor$]: dart.fieldType(dart.nullable(ui.Color)),
    [_datePickerTheme$]: dart.fieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    [_minDate$]: dart.fieldType(dart.dynamic),
    [_maxDate$]: dart.fieldType(dart.dynamic),
    [_enablePastDates$]: dart.fieldType(core.bool),
    [_selectionShape$]: dart.fieldType(date_picker_manager.DateRangePickerSelectionShape),
    [_mouseHoverPosition$]: dart.fieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    [_selectionRadius$]: dart.fieldType(core.double),
    [_enableMultiView$]: dart.fieldType(core.bool),
    [_multiViewSpacing$]: dart.fieldType(core.double),
    [_textScaleFactor$]: dart.fieldType(core.double),
    [_height$]: dart.fieldType(core.double),
    [_width$]: dart.fieldType(core.double),
    [_monthFormat$]: dart.fieldType(dart.nullable(core.String)),
    [_locale$]: dart.fieldType(ui.Locale),
    [_view$]: dart.fieldType(date_picker_manager.DateRangePickerView),
    [_isHijri$]: dart.fieldType(core.bool),
    localizations: dart.fieldType(global_localizations.SfLocalizations),
    [_textPainter]: dart.finalFieldType(text_painter.TextPainter),
    [_todayHighlightPaint]: dart.finalFieldType(ui.Paint),
    [_cacheNodes]: dart.fieldType(dart.nullable(core.List$(semantics$.SemanticsNode)))
  }));
  year_view._SingleSelectionRenderObject = class _SingleSelectionRenderObject extends year_view._IYearViewRenderObject {
    get selectedDate() {
      return this[_selectedDate$];
    }
    set selectedDate(value) {
      if (dart.test(core$.isSameDate(this[_selectedDate$], value))) {
        return;
      }
      this[_selectedDate$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 2700, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 2700, 46, "offset");
      year_view._drawYearCells(context, this.size, this);
    }
    drawSelection(canvas, cellWidth, currentIndex, highlightPadding, selectionPadding, textHalfHeight, centerYPosition, xPosition, yPosition, yearText) {
      let t6;
      if (canvas == null) dart.nullFailed(I[0], 2706, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 2707, 14, "cellWidth");
      if (currentIndex == null) dart.nullFailed(I[0], 2708, 11, "currentIndex");
      if (highlightPadding == null) dart.nullFailed(I[0], 2709, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 2710, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 2711, 14, "textHalfHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 2712, 14, "centerYPosition");
      if (xPosition == null) dart.nullFailed(I[0], 2713, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 2714, 14, "yPosition");
      if (yearText == null) dart.nullFailed(I[0], 2715, 16, "yearText");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      this[_todayHighlightPaint].color = (t6 = this.selectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t6);
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, new ui.Radius.circular(cornerRadius)), this[_todayHighlightPaint]);
    }
    drawCustomCellSelection(canvas, rect, index) {
      let t6;
      if (canvas == null) dart.nullFailed(I[0], 2742, 39, "canvas");
      if (rect == null) dart.nullFailed(I[0], 2742, 52, "rect");
      if (index == null) dart.nullFailed(I[0], 2742, 62, "index");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      this[_todayHighlightPaint].color = (t6 = this.selectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t6);
      canvas.drawRect(rect, this[_todayHighlightPaint]);
    }
    getSelectedIndex(viewStartIndex, viewEndIndex) {
      if (viewStartIndex == null) dart.nullFailed(I[0], 2751, 34, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 2751, 54, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      if (this[_selectedDate$] == null) {
        return selectedIndex;
      }
      let index = picker_helper.DateRangePickerHelper.getDateCellIndex(this.visibleDates, this[_selectedDate$], this[_view$], {viewStartIndex: viewStartIndex, viewEndIndex: viewEndIndex});
      if (index !== -1) {
        selectedIndex[$add](index);
      }
      return selectedIndex;
    }
  };
  (year_view._SingleSelectionRenderObject.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations, _selectedDate) {
    if (visibleDates == null) dart.nullFailed(I[0], 2623, 21, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 2627, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 2629, 37, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 2630, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 2631, 34, "datePickerTheme");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 2632, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 2633, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 2634, 14, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 2641, 14, "selectionRadius");
    if (textScaleFactor == null) dart.nullFailed(I[0], 2642, 14, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 2643, 14, "width");
    if (height == null) dart.nullFailed(I[0], 2644, 14, "height");
    if (locale == null) dart.nullFailed(I[0], 2646, 14, "locale");
    if (view == null) dart.nullFailed(I[0], 2647, 27, "view");
    if (isHijri == null) dart.nullFailed(I[0], 2648, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[0], 2649, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 2650, 23, "localizations");
    this[_selectedDate$] = _selectedDate;
    year_view._SingleSelectionRenderObject.__proto__.new.call(this, visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations);
    ;
  }).prototype = year_view._SingleSelectionRenderObject.prototype;
  dart.addTypeTests(year_view._SingleSelectionRenderObject);
  dart.addTypeCaches(year_view._SingleSelectionRenderObject);
  dart.setMethodSignature(year_view._SingleSelectionRenderObject, () => ({
    __proto__: dart.getMethods(year_view._SingleSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.int, core.double, core.double, core.double, core.double, core.double, core.double, text_span.TextSpan]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, ui.Rect, core.int]),
    getSelectedIndex: dart.fnType(core.List$(core.int), [core.int, core.int])
  }));
  dart.setGetterSignature(year_view._SingleSelectionRenderObject, () => ({
    __proto__: dart.getGetters(year_view._SingleSelectionRenderObject.__proto__),
    selectedDate: dart.dynamic
  }));
  dart.setSetterSignature(year_view._SingleSelectionRenderObject, () => ({
    __proto__: dart.getSetters(year_view._SingleSelectionRenderObject.__proto__),
    selectedDate: dart.dynamic
  }));
  dart.setLibraryUri(year_view._SingleSelectionRenderObject, I[1]);
  dart.setFieldSignature(year_view._SingleSelectionRenderObject, () => ({
    __proto__: dart.getFields(year_view._SingleSelectionRenderObject.__proto__),
    [_selectedDate$]: dart.fieldType(dart.dynamic)
  }));
  year_view._MultipleSelectionRenderObject = class _MultipleSelectionRenderObject extends year_view._IYearViewRenderObject {
    get selectedDates() {
      return this[_selectedDates$];
    }
    set selectedDates(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$], value))) {
        return;
      }
      this[_selectedDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 2847, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 2847, 46, "offset");
      year_view._drawYearCells(context, this.size, this);
    }
    drawSelection(canvas, cellWidth, currentIndex, highlightPadding, selectionPadding, textHalfHeight, centerYPosition, xPosition, yPosition, yearText) {
      let t6;
      if (canvas == null) dart.nullFailed(I[0], 2853, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 2854, 14, "cellWidth");
      if (currentIndex == null) dart.nullFailed(I[0], 2855, 11, "currentIndex");
      if (highlightPadding == null) dart.nullFailed(I[0], 2856, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 2857, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 2858, 14, "textHalfHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 2859, 14, "centerYPosition");
      if (xPosition == null) dart.nullFailed(I[0], 2860, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 2861, 14, "yPosition");
      if (yearText == null) dart.nullFailed(I[0], 2862, 16, "yearText");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      this[_todayHighlightPaint].color = (t6 = this.selectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t6);
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, new ui.Radius.circular(cornerRadius)), this[_todayHighlightPaint]);
    }
    drawCustomCellSelection(canvas, rect, index) {
      let t6;
      if (canvas == null) dart.nullFailed(I[0], 2889, 39, "canvas");
      if (rect == null) dart.nullFailed(I[0], 2889, 52, "rect");
      if (index == null) dart.nullFailed(I[0], 2889, 62, "index");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      this[_todayHighlightPaint].color = (t6 = this.selectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t6);
      canvas.drawRect(rect, this[_todayHighlightPaint]);
    }
    getSelectedIndex(viewStartIndex, viewEndIndex) {
      if (viewStartIndex == null) dart.nullFailed(I[0], 2898, 34, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 2898, 54, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      if (this[_selectedDates$] == null) {
        return selectedIndex;
      }
      for (let i = 0; i < dart.notNull(dart.nullCheck(this[_selectedDates$])[$length]); i = i + 1) {
        let index = picker_helper.DateRangePickerHelper.getDateCellIndex(this.visibleDates, dart.nullCheck(this[_selectedDates$])[$_get](i), this[_view$], {viewStartIndex: viewStartIndex, viewEndIndex: viewEndIndex});
        if (index !== -1) {
          selectedIndex[$add](index);
        }
      }
      return selectedIndex;
    }
  };
  (year_view._MultipleSelectionRenderObject.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations, _selectedDates) {
    if (visibleDates == null) dart.nullFailed(I[0], 2770, 21, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 2774, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 2776, 37, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 2777, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 2778, 34, "datePickerTheme");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 2779, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 2780, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 2781, 14, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 2788, 14, "selectionRadius");
    if (textScaleFactor == null) dart.nullFailed(I[0], 2789, 14, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 2790, 14, "width");
    if (height == null) dart.nullFailed(I[0], 2791, 14, "height");
    if (locale == null) dart.nullFailed(I[0], 2793, 14, "locale");
    if (view == null) dart.nullFailed(I[0], 2794, 27, "view");
    if (isHijri == null) dart.nullFailed(I[0], 2795, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[0], 2796, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 2797, 23, "localizations");
    this[_selectedDates$] = _selectedDates;
    year_view._MultipleSelectionRenderObject.__proto__.new.call(this, visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations);
    ;
  }).prototype = year_view._MultipleSelectionRenderObject.prototype;
  dart.addTypeTests(year_view._MultipleSelectionRenderObject);
  dart.addTypeCaches(year_view._MultipleSelectionRenderObject);
  dart.setMethodSignature(year_view._MultipleSelectionRenderObject, () => ({
    __proto__: dart.getMethods(year_view._MultipleSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.int, core.double, core.double, core.double, core.double, core.double, core.double, text_span.TextSpan]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, ui.Rect, core.int]),
    getSelectedIndex: dart.fnType(core.List$(core.int), [core.int, core.int])
  }));
  dart.setGetterSignature(year_view._MultipleSelectionRenderObject, () => ({
    __proto__: dart.getGetters(year_view._MultipleSelectionRenderObject.__proto__),
    selectedDates: dart.nullable(core.List)
  }));
  dart.setSetterSignature(year_view._MultipleSelectionRenderObject, () => ({
    __proto__: dart.getSetters(year_view._MultipleSelectionRenderObject.__proto__),
    selectedDates: dart.nullable(core.List)
  }));
  dart.setLibraryUri(year_view._MultipleSelectionRenderObject, I[1]);
  dart.setFieldSignature(year_view._MultipleSelectionRenderObject, () => ({
    __proto__: dart.getFields(year_view._MultipleSelectionRenderObject.__proto__),
    [_selectedDates$]: dart.fieldType(dart.nullable(core.List))
  }));
  var _selectedIndex = dart.privateName(year_view, "_selectedIndex");
  year_view._RangeSelectionRenderObject = class _RangeSelectionRenderObject extends year_view._IYearViewRenderObject {
    get selectedRange() {
      return this[_selectedRange$];
    }
    set selectedRange(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$], value))) {
        return;
      }
      this[_selectedRange$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 2997, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 2997, 46, "offset");
      this[_selectedIndex] = T.JSArrayOfint().of([]);
      year_view._drawYearCells(context, this.size, this);
    }
    drawSelection(canvas, cellWidth, currentIndex, highlightPadding, selectionPadding, textHalfHeight, centerYPosition, xPosition, yPosition, yearText) {
      let t6, t6$, t6$0, t6$1, t6$2;
      if (canvas == null) dart.nullFailed(I[0], 3004, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 3005, 14, "cellWidth");
      if (currentIndex == null) dart.nullFailed(I[0], 3006, 11, "currentIndex");
      if (highlightPadding == null) dart.nullFailed(I[0], 3007, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 3008, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 3009, 14, "textHalfHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 3010, 14, "centerYPosition");
      if (xPosition == null) dart.nullFailed(I[0], 3011, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 3012, 14, "yPosition");
      if (yearText == null) dart.nullFailed(I[0], 3013, 16, "yearText");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let selectionDetails = this[_getSelectedRangePosition](currentIndex);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(dart.test(isBetweenRange) || dart.test(isEndRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(dart.test(isBetweenRange) || dart.test(isStartRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = dart.test(isBetweenRange) ? 0.0 : this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      let leftRadius = dart.test(isStartRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      let rightRadius = dart.test(isEndRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        yearText = new text_span.TextSpan.new({text: yearText.text, style: (t6$0 = this.rangeTextStyle, t6$0 == null ? this.datePickerTheme.rangeSelectionTextStyle : t6$0)});
        this[_todayHighlightPaint].color = (t6$1 = this.rangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$1);
        this[_textPainter].text = yearText;
        this[_textPainter].layout({minWidth: cellWidth, maxWidth: cellWidth});
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$2 = this.endRangeSelectionColor, t6$2 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$2);
      }
      canvas.drawRRect(new ui.RRect.fromRectAndCorners(rect, {topLeft: new ui.Radius.circular(leftRadius), bottomLeft: new ui.Radius.circular(leftRadius), bottomRight: new ui.Radius.circular(rightRadius), topRight: new ui.Radius.circular(rightRadius)}), this[_todayHighlightPaint]);
    }
    drawCustomCellSelection(canvas, rect, index) {
      let t6, t6$, t6$0, t6$1;
      if (canvas == null) dart.nullFailed(I[0], 3073, 39, "canvas");
      if (rect == null) dart.nullFailed(I[0], 3073, 52, "rect");
      if (index == null) dart.nullFailed(I[0], 3073, 62, "index");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let selectionDetails = this[_getSelectedRangePosition](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        this[_todayHighlightPaint].color = (t6$0 = this.rangeSelectionColor, t6$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$0);
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$1 = this.endRangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$1);
      }
      canvas.drawRect(rect, this[_todayHighlightPaint]);
    }
    [_getSelectedRangePosition](index) {
      if (index == null) dart.nullFailed(I[0], 3097, 44, "index");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      if (this[_selectedIndex][$length] === 1) {
        isSelectedDate = true;
      } else if (this[_selectedIndex][$_get](0) == index) {
        if (dart.test(this.isRtl)) {
          isEndRange = true;
        } else {
          isStartRange = true;
        }
      } else if (this[_selectedIndex][$_get](dart.notNull(this[_selectedIndex][$length]) - 1) == index) {
        if (dart.test(this.isRtl)) {
          isStartRange = true;
        } else {
          isEndRange = true;
        }
      } else {
        isBetweenRange = true;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndex(viewStartIndex, viewEndIndex) {
      let t6;
      if (viewStartIndex == null) dart.nullFailed(I[0], 3138, 34, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 3138, 54, "viewEndIndex");
      this[_selectedIndex] = T.JSArrayOfint().of([]);
      if (this[_selectedRange$] == null) {
        return this[_selectedIndex];
      }
      let startDate = dart.dload(this[_selectedRange$], 'startDate');
      let endDate = (t6 = dart.dload(this[_selectedRange$], 'endDate'), t6 == null ? dart.dload(this[_selectedRange$], 'startDate') : t6);
      this[_selectedIndex][$addAll](this[_getRangeIndex](startDate, endDate, this.view, viewStartIndex, viewEndIndex));
      return this[_selectedIndex];
    }
  };
  (year_view._RangeSelectionRenderObject.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations, _selectedRange) {
    if (visibleDates == null) dart.nullFailed(I[0], 2918, 21, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 2922, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 2924, 37, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 2925, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 2926, 34, "datePickerTheme");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 2927, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 2928, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 2929, 14, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 2936, 14, "selectionRadius");
    if (textScaleFactor == null) dart.nullFailed(I[0], 2937, 14, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 2938, 14, "width");
    if (height == null) dart.nullFailed(I[0], 2939, 14, "height");
    if (locale == null) dart.nullFailed(I[0], 2941, 14, "locale");
    if (view == null) dart.nullFailed(I[0], 2942, 27, "view");
    if (isHijri == null) dart.nullFailed(I[0], 2943, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[0], 2944, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 2945, 23, "localizations");
    this[_selectedIndex] = T.JSArrayOfint().of([]);
    this[_selectedRange$] = _selectedRange;
    year_view._RangeSelectionRenderObject.__proto__.new.call(this, visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations);
    ;
  }).prototype = year_view._RangeSelectionRenderObject.prototype;
  dart.addTypeTests(year_view._RangeSelectionRenderObject);
  dart.addTypeCaches(year_view._RangeSelectionRenderObject);
  dart.setMethodSignature(year_view._RangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(year_view._RangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.int, core.double, core.double, core.double, core.double, core.double, core.double, text_span.TextSpan]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, ui.Rect, core.int]),
    [_getSelectedRangePosition]: dart.fnType(core.List$(core.bool), [core.int]),
    getSelectedIndex: dart.fnType(core.List$(core.int), [core.int, core.int])
  }));
  dart.setGetterSignature(year_view._RangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(year_view._RangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setSetterSignature(year_view._RangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(year_view._RangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setLibraryUri(year_view._RangeSelectionRenderObject, I[1]);
  dart.setFieldSignature(year_view._RangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(year_view._RangeSelectionRenderObject.__proto__),
    [_selectedRange$]: dart.fieldType(dart.dynamic),
    [_selectedIndex]: dart.fieldType(core.List$(core.int))
  }));
  year_view._ExtendableRangeSelectionRenderObject = class _ExtendableRangeSelectionRenderObject extends year_view._IYearViewRenderObject {
    get selectedRange() {
      return this[_selectedRange$];
    }
    set selectedRange(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$], value))) {
        return;
      }
      this[_selectedRange$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 3234, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 3234, 46, "offset");
      this[_selectedIndex] = T.JSArrayOfint().of([]);
      year_view._drawYearCells(context, this.size, this);
    }
    drawSelection(canvas, cellWidth, currentIndex, highlightPadding, selectionPadding, textHalfHeight, centerYPosition, xPosition, yPosition, yearText) {
      let t6, t6$, t6$0, t6$1, t6$2;
      if (canvas == null) dart.nullFailed(I[0], 3241, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 3242, 14, "cellWidth");
      if (currentIndex == null) dart.nullFailed(I[0], 3243, 11, "currentIndex");
      if (highlightPadding == null) dart.nullFailed(I[0], 3244, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 3245, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 3246, 14, "textHalfHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 3247, 14, "centerYPosition");
      if (xPosition == null) dart.nullFailed(I[0], 3248, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 3249, 14, "yPosition");
      if (yearText == null) dart.nullFailed(I[0], 3250, 16, "yearText");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let selectionDetails = this[_getSelectedRangePosition](currentIndex, this[_selectedIndex]);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(dart.test(isBetweenRange) || dart.test(isEndRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(dart.test(isBetweenRange) || dart.test(isStartRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = dart.test(isBetweenRange) ? 0.0 : this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      let leftRadius = dart.test(isStartRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      let rightRadius = dart.test(isEndRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        yearText = new text_span.TextSpan.new({text: yearText.text, style: (t6$0 = this.rangeTextStyle, t6$0 == null ? this.datePickerTheme.rangeSelectionTextStyle : t6$0)});
        this[_todayHighlightPaint].color = (t6$1 = this.rangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$1);
        this[_textPainter].text = yearText;
        this[_textPainter].layout({minWidth: cellWidth, maxWidth: cellWidth});
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$2 = this.endRangeSelectionColor, t6$2 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$2);
      }
      canvas.drawRRect(new ui.RRect.fromRectAndCorners(rect, {topLeft: new ui.Radius.circular(leftRadius), bottomLeft: new ui.Radius.circular(leftRadius), bottomRight: new ui.Radius.circular(rightRadius), topRight: new ui.Radius.circular(rightRadius)}), this[_todayHighlightPaint]);
    }
    drawCustomCellSelection(canvas, rect, index) {
      let t6, t6$, t6$0, t6$1;
      if (canvas == null) dart.nullFailed(I[0], 3311, 39, "canvas");
      if (rect == null) dart.nullFailed(I[0], 3311, 52, "rect");
      if (index == null) dart.nullFailed(I[0], 3311, 62, "index");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let selectionDetails = this[_getSelectedRangePosition](index, this[_selectedIndex]);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        this[_todayHighlightPaint].color = (t6$0 = this.rangeSelectionColor, t6$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$0);
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$1 = this.endRangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$1);
      }
      canvas.drawRect(rect, this[_todayHighlightPaint]);
    }
    [_getSelectedRangePosition](index, indexList) {
      if (index == null) dart.nullFailed(I[0], 3336, 44, "index");
      if (indexList == null) dart.nullFailed(I[0], 3336, 61, "indexList");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      if (indexList[$length] === 1) {
        isSelectedDate = true;
      } else if (indexList[$_get](0) == index) {
        if (dart.test(this.isRtl)) {
          isEndRange = true;
        } else {
          isStartRange = true;
        }
      } else if (indexList[$_get](dart.notNull(indexList[$length]) - 1) == index) {
        if (dart.test(this.isRtl)) {
          isStartRange = true;
        } else {
          isEndRange = true;
        }
      } else {
        isBetweenRange = true;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndex(viewStartIndex, viewEndIndex) {
      let t6;
      if (viewStartIndex == null) dart.nullFailed(I[0], 3377, 34, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 3377, 54, "viewEndIndex");
      this[_selectedIndex] = T.JSArrayOfint().of([]);
      if (this[_selectedRange$] == null) {
        return this[_selectedIndex];
      }
      let startDate = dart.dload(this[_selectedRange$], 'startDate');
      let endDate = (t6 = dart.dload(this[_selectedRange$], 'endDate'), t6 == null ? dart.dload(this[_selectedRange$], 'startDate') : t6);
      this[_selectedIndex][$addAll](this[_getRangeIndex](startDate, endDate, this.view, viewStartIndex, viewEndIndex));
      return this[_selectedIndex];
    }
  };
  (year_view._ExtendableRangeSelectionRenderObject.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations, _selectedRange) {
    if (visibleDates == null) dart.nullFailed(I[0], 3155, 21, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 3159, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 3161, 37, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 3162, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 3163, 34, "datePickerTheme");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 3164, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 3165, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 3166, 14, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 3173, 14, "selectionRadius");
    if (textScaleFactor == null) dart.nullFailed(I[0], 3174, 14, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 3175, 14, "width");
    if (height == null) dart.nullFailed(I[0], 3176, 14, "height");
    if (locale == null) dart.nullFailed(I[0], 3178, 14, "locale");
    if (view == null) dart.nullFailed(I[0], 3179, 27, "view");
    if (isHijri == null) dart.nullFailed(I[0], 3180, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[0], 3181, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 3182, 23, "localizations");
    this[_selectedIndex] = T.JSArrayOfint().of([]);
    this[_selectedRange$] = _selectedRange;
    year_view._ExtendableRangeSelectionRenderObject.__proto__.new.call(this, visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations);
    ;
  }).prototype = year_view._ExtendableRangeSelectionRenderObject.prototype;
  dart.addTypeTests(year_view._ExtendableRangeSelectionRenderObject);
  dart.addTypeCaches(year_view._ExtendableRangeSelectionRenderObject);
  dart.setMethodSignature(year_view._ExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(year_view._ExtendableRangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.int, core.double, core.double, core.double, core.double, core.double, core.double, text_span.TextSpan]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, ui.Rect, core.int]),
    [_getSelectedRangePosition]: dart.fnType(core.List$(core.bool), [core.int, core.List$(core.int)]),
    getSelectedIndex: dart.fnType(core.List$(core.int), [core.int, core.int])
  }));
  dart.setGetterSignature(year_view._ExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(year_view._ExtendableRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setSetterSignature(year_view._ExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(year_view._ExtendableRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setLibraryUri(year_view._ExtendableRangeSelectionRenderObject, I[1]);
  dart.setFieldSignature(year_view._ExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(year_view._ExtendableRangeSelectionRenderObject.__proto__),
    [_selectedRange$]: dart.fieldType(dart.dynamic),
    [_selectedIndex]: dart.fieldType(core.List$(core.int))
  }));
  var _rangesIndex = dart.privateName(year_view, "_rangesIndex");
  year_view._MultiRangeSelectionRenderObject = class _MultiRangeSelectionRenderObject extends year_view._IYearViewRenderObject {
    get selectedRanges() {
      return this[_selectedRanges$];
    }
    set selectedRanges(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$], value))) {
        return;
      }
      this[_selectedRanges$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 3473, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 3473, 46, "offset");
      this[_rangesIndex] = T.JSArrayOfListOfint().of([]);
      year_view._drawYearCells(context, this.size, this);
    }
    drawSelection(canvas, cellWidth, currentIndex, highlightPadding, selectionPadding, textHalfHeight, centerYPosition, xPosition, yPosition, yearText) {
      let t6, t6$, t6$0, t6$1, t6$2;
      if (canvas == null) dart.nullFailed(I[0], 3480, 14, "canvas");
      if (cellWidth == null) dart.nullFailed(I[0], 3481, 14, "cellWidth");
      if (currentIndex == null) dart.nullFailed(I[0], 3482, 11, "currentIndex");
      if (highlightPadding == null) dart.nullFailed(I[0], 3483, 14, "highlightPadding");
      if (selectionPadding == null) dart.nullFailed(I[0], 3484, 14, "selectionPadding");
      if (textHalfHeight == null) dart.nullFailed(I[0], 3485, 14, "textHalfHeight");
      if (centerYPosition == null) dart.nullFailed(I[0], 3486, 14, "centerYPosition");
      if (xPosition == null) dart.nullFailed(I[0], 3487, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 3488, 14, "yPosition");
      if (yearText == null) dart.nullFailed(I[0], 3489, 16, "yearText");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let maximumHighlight = dart.notNull(centerYPosition) - dart.notNull(textHalfHeight) - dart.notNull(selectionPadding);
      if (maximumHighlight < dart.notNull(highlightPadding)) {
        highlightPadding = maximumHighlight;
      }
      let selectionDetails = this[_getSelectedRangePosition](currentIndex);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let rect = new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(dart.test(isBetweenRange) || dart.test(isEndRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) - dart.notNull(highlightPadding) - dart.notNull(textHalfHeight), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(dart.test(isBetweenRange) || dart.test(isStartRange) ? 0 : selectionPadding), dart.notNull(yPosition) + dart.notNull(centerYPosition) + dart.notNull(highlightPadding) + dart.notNull(textHalfHeight));
      let cornerRadius = dart.test(isBetweenRange) ? 0.0 : this.selectionShape == date_picker_manager.DateRangePickerSelectionShape.circle ? dart.notNull(rect.height) / 2 : 3.0;
      let leftRadius = dart.test(isStartRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      let rightRadius = dart.test(isEndRange) || dart.test(isSelectedDate) ? cornerRadius : 0.0;
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        yearText = new text_span.TextSpan.new({text: yearText.text, style: (t6$0 = this.rangeTextStyle, t6$0 == null ? this.datePickerTheme.rangeSelectionTextStyle : t6$0)});
        this[_todayHighlightPaint].color = (t6$1 = this.rangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$1);
        this[_textPainter].text = yearText;
        this[_textPainter].layout({minWidth: cellWidth, maxWidth: cellWidth});
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$2 = this.endRangeSelectionColor, t6$2 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$2);
      }
      canvas.drawRRect(new ui.RRect.fromRectAndCorners(rect, {topLeft: new ui.Radius.circular(leftRadius), bottomLeft: new ui.Radius.circular(leftRadius), bottomRight: new ui.Radius.circular(rightRadius), topRight: new ui.Radius.circular(rightRadius)}), this[_todayHighlightPaint]);
    }
    drawCustomCellSelection(canvas, rect, index) {
      let t6, t6$, t6$0, t6$1;
      if (canvas == null) dart.nullFailed(I[0], 3549, 39, "canvas");
      if (rect == null) dart.nullFailed(I[0], 3549, 52, "rect");
      if (index == null) dart.nullFailed(I[0], 3549, 62, "index");
      this[_todayHighlightPaint].isAntiAlias = true;
      this[_todayHighlightPaint].style = ui.PaintingStyle.fill;
      let selectionDetails = this[_getSelectedRangePosition](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_todayHighlightPaint].color = (t6 = this.startRangeSelectionColor, t6 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6);
      } else if (dart.test(isStartRange)) {
        this[_todayHighlightPaint].color = (t6$ = this.startRangeSelectionColor, t6$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t6$);
      } else if (dart.test(isBetweenRange)) {
        this[_todayHighlightPaint].color = (t6$0 = this.rangeSelectionColor, t6$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t6$0);
      } else if (dart.test(isEndRange)) {
        this[_todayHighlightPaint].color = (t6$1 = this.endRangeSelectionColor, t6$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t6$1);
      }
      canvas.drawRect(rect, this[_todayHighlightPaint]);
    }
    [_getSelectedRangePosition](index) {
      if (index == null) dart.nullFailed(I[0], 3573, 44, "index");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      for (let i = 0; i < dart.notNull(this[_rangesIndex][$length]); i = i + 1) {
        let range = this[_rangesIndex][$_get](i);
        if (!dart.test(range[$contains](index))) {
          continue;
        }
        if (range[$length] === 1) {
          isSelectedDate = true;
        } else if (range[$_get](0) == index) {
          if (dart.test(this.isRtl)) {
            isEndRange = true;
          } else {
            isStartRange = true;
          }
        } else if (range[$_get](dart.notNull(range[$length]) - 1) == index) {
          if (dart.test(this.isRtl)) {
            isStartRange = true;
          } else {
            isEndRange = true;
          }
        } else {
          isBetweenRange = true;
        }
        break;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndex(viewStartIndex, viewEndIndex) {
      let t6;
      if (viewStartIndex == null) dart.nullFailed(I[0], 3623, 34, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[0], 3623, 54, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      if (this[_selectedRanges$] == null) {
        return selectedIndex;
      }
      for (let i = 0; i < dart.notNull(dart.nullCheck(this[_selectedRanges$])[$length]); i = i + 1) {
        let range = dart.nullCheck(this[_selectedRanges$])[$_get](i);
        let startDate = dart.dload(range, 'startDate');
        let endDate = (t6 = dart.dload(range, 'endDate'), t6 == null ? dart.dload(range, 'startDate') : t6);
        let index = this[_getRangeIndex](startDate, endDate, this.view, viewStartIndex, viewEndIndex);
        this[_rangesIndex][$add](index);
        selectedIndex[$addAll](index);
      }
      return selectedIndex;
    }
  };
  (year_view._MultiRangeSelectionRenderObject.new = function(visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations, _selectedRanges) {
    if (visibleDates == null) dart.nullFailed(I[0], 3394, 21, "visibleDates");
    if (enablePastDates == null) dart.nullFailed(I[0], 3398, 12, "enablePastDates");
    if (selectionShape == null) dart.nullFailed(I[0], 3400, 37, "selectionShape");
    if (isRtl == null) dart.nullFailed(I[0], 3401, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[0], 3402, 34, "datePickerTheme");
    if (mouseHoverPosition == null) dart.nullFailed(I[0], 3403, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[0], 3404, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[0], 3405, 14, "multiViewSpacing");
    if (selectionRadius == null) dart.nullFailed(I[0], 3412, 14, "selectionRadius");
    if (textScaleFactor == null) dart.nullFailed(I[0], 3413, 14, "textScaleFactor");
    if (width == null) dart.nullFailed(I[0], 3414, 14, "width");
    if (height == null) dart.nullFailed(I[0], 3415, 14, "height");
    if (locale == null) dart.nullFailed(I[0], 3417, 14, "locale");
    if (view == null) dart.nullFailed(I[0], 3418, 27, "view");
    if (isHijri == null) dart.nullFailed(I[0], 3419, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[0], 3420, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[0], 3421, 23, "localizations");
    this[_rangesIndex] = T.JSArrayOfListOfint().of([]);
    this[_selectedRanges$] = _selectedRanges;
    year_view._MultiRangeSelectionRenderObject.__proto__.new.call(this, visibleDates, cellStyle, minDate, maxDate, enablePastDates, todayHighlightColor, selectionShape, isRtl, datePickerTheme, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, selectionRadius, textScaleFactor, width, height, monthFormat, locale, view, isHijri, navigationDirection, localizations);
    ;
  }).prototype = year_view._MultiRangeSelectionRenderObject.prototype;
  dart.addTypeTests(year_view._MultiRangeSelectionRenderObject);
  dart.addTypeCaches(year_view._MultiRangeSelectionRenderObject);
  dart.setMethodSignature(year_view._MultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(year_view._MultiRangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.int, core.double, core.double, core.double, core.double, core.double, core.double, text_span.TextSpan]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, ui.Rect, core.int]),
    [_getSelectedRangePosition]: dart.fnType(core.List$(core.bool), [core.int]),
    getSelectedIndex: dart.fnType(core.List$(core.int), [core.int, core.int])
  }));
  dart.setGetterSignature(year_view._MultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(year_view._MultiRangeSelectionRenderObject.__proto__),
    selectedRanges: dart.nullable(core.List)
  }));
  dart.setSetterSignature(year_view._MultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(year_view._MultiRangeSelectionRenderObject.__proto__),
    selectedRanges: dart.nullable(core.List)
  }));
  dart.setLibraryUri(year_view._MultiRangeSelectionRenderObject, I[1]);
  dart.setFieldSignature(year_view._MultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(year_view._MultiRangeSelectionRenderObject.__proto__),
    [_selectedRanges$]: dart.fieldType(dart.nullable(core.List)),
    [_rangesIndex]: dart.fieldType(core.List$(core.List$(core.int)))
  }));
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  year_view._isCurrentViewDateCell = function _isCurrentViewDateCell(date, index, visibleDates, enableMultiView, view) {
    if (index == null) dart.nullFailed(I[0], 3644, 47, "index");
    if (visibleDates == null) dart.nullFailed(I[0], 3644, 68, "visibleDates");
    if (enableMultiView == null) dart.nullFailed(I[0], 3645, 10, "enableMultiView");
    let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
    if (pickerView == date_picker_manager.DateRangePickerView.year) {
      return true;
    }
    let datesCount = dart.test(enableMultiView) ? (dart.notNull(visibleDates[$length]) / 2)[$truncate]() : visibleDates[$length];
    let middleIndex = dart.notNull(index) * dart.notNull(datesCount) + (dart.notNull(datesCount) / 2)[$truncate]();
    let currentYear = core.int.as(dart.dload(visibleDates[$_get](middleIndex), 'year'));
    if (pickerView == date_picker_manager.DateRangePickerView.decade) {
      return (dart.notNull(currentYear) / 10)[$truncate]() === dart.dsend(dart.dload(date, 'year'), '~/', [10]);
    } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
      return (dart.notNull(currentYear) / 100)[$truncate]() === dart.dsend(dart.dload(date, 'year'), '~/', [100]);
    }
    return false;
  };
  year_view._drawYearCells = function _drawYearCells(context, size, yearView) {
    if (context == null) dart.nullFailed(I[0], 3668, 21, "context");
    if (size == null) dart.nullFailed(I[0], 3668, 35, "size");
    if (yearView == null) dart.nullFailed(I[0], 3668, 64, "yearView");
    let canvas = context.canvas;
    let webUIPadding = 0.0;
    let count = 1;
    let width = size.width;
    let height = size.height;
    let isHorizontalMultiView = dart.test(yearView.enableMultiView) && yearView.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
    let isVerticalMultiView = dart.test(yearView.enableMultiView) && yearView.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical;
    if (isHorizontalMultiView) {
      webUIPadding = yearView.multiViewSpacing;
      count = 2;
      width = (dart.notNull(width) - dart.notNull(webUIPadding)) / count;
    } else if (isVerticalMultiView) {
      webUIPadding = yearView.multiViewSpacing;
      count = 2;
      height = (dart.notNull(height) - dart.notNull(webUIPadding)) / count;
    }
    let visibleDatesCount = (dart.notNull(yearView.visibleDates[$length]) / count)[$truncate]();
    let cellWidth = dart.notNull(width) / 3;
    let cellHeight = dart.notNull(height) / 4;
    let xPosition = 0.0;
    let yPosition = null;
    let isNeedWidgetPaint = yearView.childCount !== 0;
    let view = picker_helper.DateRangePickerHelper.getPickerView(yearView.view);
    if (isNeedWidgetPaint) {
      let child = yearView.firstChild;
      for (let j = 0; j < count; j = j + 1) {
        let currentViewIndex = dart.test(yearView.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(count, j) : j;
        let viewStartIndex = j * visibleDatesCount;
        let viewEndIndex = (j + 1) * visibleDatesCount - 1;
        let selectedIndex = yearView.getSelectedIndex(viewStartIndex, viewEndIndex);
        let viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(width) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
        let viewEndPosition = viewStartPosition + dart.notNull(width);
        xPosition = viewStartPosition;
        yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
        for (let i = 0; i < visibleDatesCount; i = i + 1) {
          let currentIndex = i;
          if (dart.test(yearView.isRtl)) {
            let rowIndex = (i / 3)[$truncate]();
            currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(3, i[$modulo](3))) + rowIndex * 3;
          }
          currentIndex = currentIndex + viewStartIndex;
          if (xPosition + 1 >= viewEndPosition) {
            xPosition = viewStartPosition;
            yPosition = dart.notNull(yPosition) + cellHeight;
          }
          if ((dart.test(yearView.enableMultiView) || dart.test(yearView.isHijri)) && dart.test(picker_helper.DateRangePickerHelper.isLeadingCellDate(currentIndex, viewStartIndex, yearView.visibleDates, view))) {
            xPosition = xPosition + cellWidth;
            continue;
          }
          let date = yearView.visibleDates[$_get](currentIndex);
          let isSelected = selectedIndex[$contains](currentIndex);
          let isEnableDate = picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(date, yearView.minDate, yearView.maxDate, yearView.enablePastDates, view, yearView.isHijri);
          if (dart.test(isSelected) && dart.test(isEnableDate)) {
            yearView.drawCustomCellSelection(canvas, new ui.Rect.fromLTRB(xPosition, yPosition, xPosition + cellWidth, dart.notNull(yPosition) + cellHeight), currentIndex);
          }
          dart.nullCheck(child).paint(context, new ui.Offset.new(xPosition, yPosition));
          if (!dart.test(isSelected) && dart.test(isEnableDate) && yearView.mouseHoverPosition.value != null && dart.nullCheck(yearView.mouseHoverPosition.value).offset != null) {
            if (xPosition <= dart.notNull(dart.nullCheck(dart.nullCheck(yearView.mouseHoverPosition.value).offset).dx) && xPosition + cellWidth >= dart.notNull(dart.nullCheck(dart.nullCheck(yearView.mouseHoverPosition.value).offset).dx) && dart.notNull(yPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(yearView.mouseHoverPosition.value).offset).dy) && dart.notNull(yPosition) + cellHeight >= dart.notNull(dart.nullCheck(dart.nullCheck(yearView.mouseHoverPosition.value).offset).dy)) {
              yearView[_todayHighlightPaint].style = ui.PaintingStyle.fill;
              yearView[_todayHighlightPaint].strokeWidth = 2.0;
              yearView[_todayHighlightPaint].color = yearView.selectionColor != null ? dart.nullCheck(yearView.selectionColor).withOpacity(0.4) : dart.nullCheck(yearView.datePickerTheme.selectionColor).withOpacity(0.4);
              let rect = new ui.Rect.fromLTRB(xPosition, yPosition, xPosition + cellWidth, dart.notNull(yPosition) + cellHeight);
              canvas.drawRRect(new ui.RRect.fromRectAndRadius(rect, C[173] || CT.C173), yearView[_todayHighlightPaint]);
            }
          }
          xPosition = xPosition + cellWidth;
          child = yearView.childAfter(child);
        }
      }
      return;
    }
    let today = picker_helper.DateRangePickerHelper.getToday(yearView.isHijri);
    yearView[_textPainter].textScaleFactor = yearView.textScaleFactor;
    let centerYPosition = cellHeight / 2;
    for (let j = 0; j < count; j = j + 1) {
      let currentViewIndex = dart.test(yearView.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(count, j) : j;
      let viewStartIndex = j * visibleDatesCount;
      let viewEndIndex = (j + 1) * visibleDatesCount - 1;
      let selectedIndex = yearView.getSelectedIndex(viewStartIndex, viewEndIndex);
      let hoveringIndex = null;
      if (yearView.mouseHoverPosition.value != null && dart.nullCheck(yearView.mouseHoverPosition.value).hoveringRange != null) {
        hoveringIndex = yearView[_getRangeIndex](dart.dload(dart.nullCheck(yearView.mouseHoverPosition.value).hoveringRange, 'startDate'), dart.dload(dart.nullCheck(yearView.mouseHoverPosition.value).hoveringRange, 'endDate'), yearView.view, viewStartIndex, viewEndIndex);
      }
      let viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(width) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
      let viewEndPosition = viewStartPosition + dart.notNull(width);
      xPosition = viewStartPosition;
      yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
      for (let i = 0; i < visibleDatesCount; i = i + 1) {
        let currentIndex = i;
        if (dart.test(yearView.isRtl)) {
          let rowIndex = (i / 3)[$truncate]();
          currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(3, i[$modulo](3))) + rowIndex * 3;
        }
        currentIndex = currentIndex + viewStartIndex;
        if (xPosition + 1 >= viewEndPosition) {
          xPosition = viewStartPosition;
          yPosition = dart.notNull(yPosition) + cellHeight;
        }
        if ((dart.test(yearView.enableMultiView) || dart.test(yearView.isHijri)) && dart.test(picker_helper.DateRangePickerHelper.isLeadingCellDate(currentIndex, viewStartIndex, yearView.visibleDates, view))) {
          xPosition = xPosition + cellWidth;
          continue;
        }
        let date = yearView.visibleDates[$_get](currentIndex);
        let isCurrentDate = picker_helper.DateRangePickerHelper.isSameCellDates(date, today, view);
        let isSelected = selectedIndex[$contains](currentIndex);
        let isEnableDate = picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(date, yearView.minDate, yearView.maxDate, yearView.enablePastDates, view, yearView.isHijri);
        let isActiveDate = year_view._isCurrentViewDateCell(date, j, yearView.visibleDates, yearView.enableMultiView, view);
        let style = yearView[_updateCellTextStyle](j, isCurrentDate, isSelected, isEnableDate, isActiveDate);
        let yearDecoration = yearView[_updateCellDecoration](j, isCurrentDate, isEnableDate, isActiveDate);
        let yearText = new text_span.TextSpan.new({text: yearView[_getCellText](date), style: style});
        yearView[_textPainter].text = yearText;
        yearView[_textPainter].layout({minWidth: cellWidth, maxWidth: cellWidth});
        let highlightPadding = yearView.selectionRadius === -1 ? 10.0 : yearView.selectionRadius;
        let textHalfHeight = dart.notNull(yearView[_textPainter].height) / 2;
        if (dart.test(isSelected) && dart.test(isEnableDate)) {
          yearView.drawSelection(canvas, cellWidth, currentIndex, highlightPadding, 3, textHalfHeight, centerYPosition, xPosition, yPosition, yearText);
        } else if (yearDecoration != null) {
          yearView[_drawYearDecoration](canvas, yearDecoration, xPosition, yPosition, 1, cellWidth, cellHeight);
        } else if (dart.test(isCurrentDate)) {
          yearView[_drawTodayHighlight](canvas, cellWidth, cellHeight, centerYPosition, highlightPadding, 3, textHalfHeight, xPosition, yPosition);
        }
        let xOffset = xPosition + (cellWidth - dart.notNull(yearView[_textPainter].width)) / 2;
        xOffset = xOffset < 0 ? 0.0 : xOffset;
        let yOffset = dart.notNull(yPosition) + (cellHeight - dart.notNull(yearView[_textPainter].height)) / 2;
        yOffset = yOffset < 0 ? 0.0 : yOffset;
        if (hoveringIndex != null && dart.test(hoveringIndex[$isNotEmpty]) && dart.test(hoveringIndex[$contains](currentIndex)) && dart.test(isEnableDate)) {
          yearView[_addRangeHoverEffect](canvas, xPosition, yPosition, currentIndex, hoveringIndex, yearView, centerYPosition, textHalfHeight, 3, highlightPadding, cellWidth, cellHeight);
        }
        if (!dart.test(isSelected) && dart.test(isEnableDate) && yearView.mouseHoverPosition.value != null && dart.nullCheck(yearView.mouseHoverPosition.value).offset != null) {
          yearView[_addMouseHovering](canvas, cellWidth, cellHeight, centerYPosition, currentViewIndex, width, highlightPadding, date, 3, textHalfHeight, webUIPadding, xOffset, xPosition, yOffset, yPosition);
        }
        yearView[_textPainter].paint(canvas, new ui.Offset.new(xOffset, yOffset));
        xPosition = xPosition + cellWidth;
      }
    }
  };
  var rowCount$ = dart.privateName(month_view, "MonthView.rowCount");
  var cellStyle$0 = dart.privateName(month_view, "MonthView.cellStyle");
  var visibleDates$0 = dart.privateName(month_view, "MonthView.visibleDates");
  var isRtl$0 = dart.privateName(month_view, "MonthView.isRtl");
  var todayHighlightColor$0 = dart.privateName(month_view, "MonthView.todayHighlightColor");
  var datePickerTheme$0 = dart.privateName(month_view, "MonthView.datePickerTheme");
  var minDate$0 = dart.privateName(month_view, "MonthView.minDate");
  var maxDate$0 = dart.privateName(month_view, "MonthView.maxDate");
  var enablePastDates$0 = dart.privateName(month_view, "MonthView.enablePastDates");
  var showLeadingAndTailingDates$ = dart.privateName(month_view, "MonthView.showLeadingAndTailingDates");
  var blackoutDates$ = dart.privateName(month_view, "MonthView.blackoutDates");
  var specialDates$ = dart.privateName(month_view, "MonthView.specialDates");
  var weekendDays$ = dart.privateName(month_view, "MonthView.weekendDays");
  var selectionShape$0 = dart.privateName(month_view, "MonthView.selectionShape");
  var selectionRadius$0 = dart.privateName(month_view, "MonthView.selectionRadius");
  var selectionNotifier$0 = dart.privateName(month_view, "MonthView.selectionNotifier");
  var mouseHoverPosition$0 = dart.privateName(month_view, "MonthView.mouseHoverPosition");
  var enableMultiView$0 = dart.privateName(month_view, "MonthView.enableMultiView");
  var multiViewSpacing$0 = dart.privateName(month_view, "MonthView.multiViewSpacing");
  var selectionTextStyle$0 = dart.privateName(month_view, "MonthView.selectionTextStyle");
  var rangeTextStyle$0 = dart.privateName(month_view, "MonthView.rangeTextStyle");
  var selectionColor$0 = dart.privateName(month_view, "MonthView.selectionColor");
  var startRangeSelectionColor$0 = dart.privateName(month_view, "MonthView.startRangeSelectionColor");
  var endRangeSelectionColor$0 = dart.privateName(month_view, "MonthView.endRangeSelectionColor");
  var rangeSelectionColor$0 = dart.privateName(month_view, "MonthView.rangeSelectionColor");
  var textScaleFactor$0 = dart.privateName(month_view, "MonthView.textScaleFactor");
  var selectionMode$0 = dart.privateName(month_view, "MonthView.selectionMode");
  var height$0 = dart.privateName(month_view, "MonthView.height");
  var width$0 = dart.privateName(month_view, "MonthView.width");
  var getPickerStateDetails$0 = dart.privateName(month_view, "MonthView.getPickerStateDetails");
  var cellBuilder$0 = dart.privateName(month_view, "MonthView.cellBuilder");
  var isHijri$0 = dart.privateName(month_view, "MonthView.isHijri");
  var localizations$1 = dart.privateName(month_view, "MonthView.localizations");
  var navigationDirection$0 = dart.privateName(month_view, "MonthView.navigationDirection");
  var showWeekNumber$ = dart.privateName(month_view, "MonthView.showWeekNumber");
  var isMobilePlatform$ = dart.privateName(month_view, "MonthView.isMobilePlatform");
  var weekNumberStyle$ = dart.privateName(month_view, "MonthView.weekNumberStyle");
  month_view.MonthView = class MonthView extends framework.StatefulWidget {
    get rowCount() {
      return this[rowCount$];
    }
    set rowCount(value) {
      super.rowCount = value;
    }
    get cellStyle() {
      return this[cellStyle$0];
    }
    set cellStyle(value) {
      super.cellStyle = value;
    }
    get visibleDates() {
      return this[visibleDates$0];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
    get isRtl() {
      return this[isRtl$0];
    }
    set isRtl(value) {
      super.isRtl = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$0];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get datePickerTheme() {
      return this[datePickerTheme$0];
    }
    set datePickerTheme(value) {
      super.datePickerTheme = value;
    }
    get minDate() {
      return this[minDate$0];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$0];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get enablePastDates() {
      return this[enablePastDates$0];
    }
    set enablePastDates(value) {
      super.enablePastDates = value;
    }
    get showLeadingAndTailingDates() {
      return this[showLeadingAndTailingDates$];
    }
    set showLeadingAndTailingDates(value) {
      super.showLeadingAndTailingDates = value;
    }
    get blackoutDates() {
      return this[blackoutDates$];
    }
    set blackoutDates(value) {
      super.blackoutDates = value;
    }
    get specialDates() {
      return this[specialDates$];
    }
    set specialDates(value) {
      super.specialDates = value;
    }
    get weekendDays() {
      return this[weekendDays$];
    }
    set weekendDays(value) {
      super.weekendDays = value;
    }
    get selectionShape() {
      return this[selectionShape$0];
    }
    set selectionShape(value) {
      super.selectionShape = value;
    }
    get selectionRadius() {
      return this[selectionRadius$0];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get selectionNotifier() {
      return this[selectionNotifier$0];
    }
    set selectionNotifier(value) {
      super.selectionNotifier = value;
    }
    get mouseHoverPosition() {
      return this[mouseHoverPosition$0];
    }
    set mouseHoverPosition(value) {
      super.mouseHoverPosition = value;
    }
    get enableMultiView() {
      return this[enableMultiView$0];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get multiViewSpacing() {
      return this[multiViewSpacing$0];
    }
    set multiViewSpacing(value) {
      super.multiViewSpacing = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$0];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$0];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$0];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$0];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$0];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$0];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$0];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get selectionMode() {
      return this[selectionMode$0];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get getPickerStateDetails() {
      return this[getPickerStateDetails$0];
    }
    set getPickerStateDetails(value) {
      super.getPickerStateDetails = value;
    }
    get cellBuilder() {
      return this[cellBuilder$0];
    }
    set cellBuilder(value) {
      super.cellBuilder = value;
    }
    get isHijri() {
      return this[isHijri$0];
    }
    set isHijri(value) {
      super.isHijri = value;
    }
    get localizations() {
      return this[localizations$1];
    }
    set localizations(value) {
      super.localizations = value;
    }
    get navigationDirection() {
      return this[navigationDirection$0];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get showWeekNumber() {
      return this[showWeekNumber$];
    }
    set showWeekNumber(value) {
      super.showWeekNumber = value;
    }
    get isMobilePlatform() {
      return this[isMobilePlatform$];
    }
    set isMobilePlatform(value) {
      super.isMobilePlatform = value;
    }
    get weekNumberStyle() {
      return this[weekNumberStyle$];
    }
    set weekNumberStyle(value) {
      super.weekNumberStyle = value;
    }
    createState() {
      return new month_view._MonthViewState.new();
    }
  };
  (month_view.MonthView.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, selectionMode, isHijri, localizations, navigationDirection, width, height, getPickerStateDetails, cellBuilder, showWeekNumber, weekNumberStyle, isMobilePlatform, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 21, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 22, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 30, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 31, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 35, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 36, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 39, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 40, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 41, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 42, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 43, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 44, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 45, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 46, 12, "textScaleFactor");
    if (selectionMode == null) dart.nullFailed(I[2], 47, 12, "selectionMode");
    if (isHijri == null) dart.nullFailed(I[2], 48, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 49, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 50, 12, "navigationDirection");
    if (width == null) dart.nullFailed(I[2], 51, 12, "width");
    if (height == null) dart.nullFailed(I[2], 52, 12, "height");
    if (getPickerStateDetails == null) dart.nullFailed(I[2], 53, 12, "getPickerStateDetails");
    if (showWeekNumber == null) dart.nullFailed(I[2], 55, 12, "showWeekNumber");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 56, 12, "weekNumberStyle");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 57, 12, "isMobilePlatform");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[visibleDates$0] = visibleDates;
    this[rowCount$] = rowCount;
    this[cellStyle$0] = cellStyle;
    this[selectionTextStyle$0] = selectionTextStyle;
    this[rangeTextStyle$0] = rangeTextStyle;
    this[selectionColor$0] = selectionColor;
    this[startRangeSelectionColor$0] = startRangeSelectionColor;
    this[endRangeSelectionColor$0] = endRangeSelectionColor;
    this[rangeSelectionColor$0] = rangeSelectionColor;
    this[datePickerTheme$0] = datePickerTheme;
    this[isRtl$0] = isRtl;
    this[todayHighlightColor$0] = todayHighlightColor;
    this[minDate$0] = minDate;
    this[maxDate$0] = maxDate;
    this[enablePastDates$0] = enablePastDates;
    this[showLeadingAndTailingDates$] = showLeadingAndTailingDates;
    this[blackoutDates$] = blackoutDates;
    this[specialDates$] = specialDates;
    this[weekendDays$] = weekendDays;
    this[selectionShape$0] = selectionShape;
    this[selectionRadius$0] = selectionRadius;
    this[mouseHoverPosition$0] = mouseHoverPosition;
    this[enableMultiView$0] = enableMultiView;
    this[multiViewSpacing$0] = multiViewSpacing;
    this[selectionNotifier$0] = selectionNotifier;
    this[textScaleFactor$0] = textScaleFactor;
    this[selectionMode$0] = selectionMode;
    this[isHijri$0] = isHijri;
    this[localizations$1] = localizations;
    this[navigationDirection$0] = navigationDirection;
    this[width$0] = width;
    this[height$0] = height;
    this[getPickerStateDetails$0] = getPickerStateDetails;
    this[cellBuilder$0] = cellBuilder;
    this[showWeekNumber$] = showWeekNumber;
    this[weekNumberStyle$] = weekNumberStyle;
    this[isMobilePlatform$] = isMobilePlatform;
    month_view.MonthView.__proto__.new.call(this, {$creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view.MonthView.prototype;
  dart.addTypeTests(month_view.MonthView);
  dart.addTypeCaches(month_view.MonthView);
  dart.setMethodSignature(month_view.MonthView, () => ({
    __proto__: dart.getMethods(month_view.MonthView.__proto__),
    createState: dart.fnType(month_view._MonthViewState, [])
  }));
  dart.setLibraryUri(month_view.MonthView, I[3]);
  dart.setFieldSignature(month_view.MonthView, () => ({
    __proto__: dart.getFields(month_view.MonthView.__proto__),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    getPickerStateDetails: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    cellBuilder: dart.finalFieldType(dart.dynamic),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    showWeekNumber: dart.finalFieldType(core.bool),
    isMobilePlatform: dart.finalFieldType(core.bool),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle)
  }));
  var _pickerStateDetails$ = dart.privateName(month_view, "_pickerStateDetails");
  var _selectedDate$0 = dart.privateName(month_view, "_selectedDate");
  var _selectedDates$0 = dart.privateName(month_view, "_selectedDates");
  var _selectedRange$0 = dart.privateName(month_view, "_selectedRange");
  var _selectedRanges$0 = dart.privateName(month_view, "_selectedRanges");
  var _children$ = dart.privateName(month_view, "_children");
  var ___MonthViewState_weekNumberPanelWidth = dart.privateName(month_view, "_#_MonthViewState#weekNumberPanelWidth");
  var _updateSelection$ = dart.privateName(month_view, "_updateSelection");
  var _getMonthRenderWidget = dart.privateName(month_view, "_getMonthRenderWidget");
  var _isSelectedValueEquals$ = dart.privateName(month_view, "_isSelectedValueEquals");
  month_view._MonthViewState = class _MonthViewState extends framework.State$(month_view.MonthView) {
    get weekNumberPanelWidth() {
      let t6;
      t6 = this[___MonthViewState_weekNumberPanelWidth];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("weekNumberPanelWidth")) : t6;
    }
    set weekNumberPanelWidth(t6) {
      if (t6 == null) dart.nullFailed(I[2], 181, 15, "null");
      this[___MonthViewState_weekNumberPanelWidth] = t6;
    }
    initState() {
      let t8, t7;
      t7 = this.widget;
      t8 = this[_pickerStateDetails$];
      t7.getPickerStateDetails(t8);
      this[_selectedDate$0] = this[_pickerStateDetails$].selectedDate;
      this[_selectedDates$0] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails$].selectedDates);
      this[_selectedRange$0] = this[_pickerStateDetails$].selectedRange;
      this[_selectedRanges$0] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails$].selectedRanges);
      this.widget.selectionNotifier.addListener(dart.bind(this, _updateSelection$));
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      month_view.MonthView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[2], 197, 34, "oldWidget");
      if (this.widget.height != oldWidget.height || this.widget.width != oldWidget.width || this.widget.enablePastDates != oldWidget.enablePastDates || !dart.equals(this.widget.minDate, oldWidget.minDate) || !dart.equals(this.widget.maxDate, oldWidget.maxDate) || !dart.equals(this.widget.cellBuilder, oldWidget.cellBuilder) || this.widget.selectionMode != oldWidget.selectionMode || this.widget.multiViewSpacing != oldWidget.multiViewSpacing || this.widget.enableMultiView != oldWidget.enableMultiView || !dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this.widget.blackoutDates, oldWidget.blackoutDates)) || !dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this.widget.specialDates, oldWidget.specialDates)) || this.widget.showLeadingAndTailingDates != oldWidget.showLeadingAndTailingDates || this.widget.rowCount != oldWidget.rowCount || !dart.equals(this.widget.localizations, oldWidget.localizations) || this.widget.isHijri != oldWidget.isHijri || this.widget.navigationDirection != oldWidget.navigationDirection || !dart.equals(this.widget.visibleDates, oldWidget.visibleDates) || this.widget.showWeekNumber != oldWidget.showWeekNumber || !dart.equals(this.widget.weekNumberStyle, oldWidget.weekNumberStyle)) {
        this[_children$][$clear]();
      }
      if (!dart.equals(this.widget.selectionNotifier, oldWidget.selectionNotifier)) {
        oldWidget.selectionNotifier.removeListener(dart.bind(this, _updateSelection$));
        this.widget.selectionNotifier.addListener(dart.bind(this, _updateSelection$));
      }
      this[_updateSelection$]({isNeedSetState: false});
      super.didUpdateWidget(oldWidget);
    }
    dispose() {
      this.widget.selectionNotifier.removeListener(dart.bind(this, _updateSelection$));
      super.dispose();
    }
    build(context) {
      let t9, t8, t7;
      if (context == null) dart.nullFailed(I[2], 239, 29, "context");
      this.weekNumberPanelWidth = picker_helper.DateRangePickerHelper.getWeekNumberPanelWidth(this.widget.showWeekNumber, this.widget.width, this.widget.isMobilePlatform);
      if (this.widget.cellBuilder != null && dart.test(this[_children$][$isEmpty])) {
        let webUIPadding = 0.0;
        let width = dart.notNull(this.widget.width) - dart.notNull(this.weekNumberPanelWidth);
        let height = this.widget.height;
        let viewCount = 1;
        let isHorizontalMultiView = dart.test(this.widget.enableMultiView) && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
        let isVerticalMultiView = dart.test(this.widget.enableMultiView) && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical;
        if (isHorizontalMultiView) {
          webUIPadding = this.widget.multiViewSpacing;
          viewCount = 2;
          width = (width - dart.notNull(webUIPadding) - dart.notNull(this.weekNumberPanelWidth)) / viewCount;
        } else if (isVerticalMultiView) {
          webUIPadding = this.widget.multiViewSpacing;
          viewCount = 2;
          height = (dart.notNull(height) - dart.notNull(webUIPadding)) / viewCount;
        }
        let datesCount = (dart.notNull(this.widget.visibleDates[$length]) / viewCount)[$truncate]();
        let cellWidth = width / 7;
        let cellHeight = dart.notNull(height) / dart.notNull(this.widget.rowCount);
        let hideLeadingAndTrailingDates = this.widget.rowCount === 6 && !dart.test(this.widget.showLeadingAndTailingDates) || dart.test(this.widget.isHijri);
        for (let j = 0; j < viewCount; j = j + 1) {
          let currentViewIndex = dart.test(this.widget.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(viewCount, j) : j;
          let viewStartIndex = j * datesCount;
          let currentMonth = core.int.as(dart.dload(this.widget.visibleDates[$_get]((viewStartIndex + datesCount / 2)[$truncate]()), 'month'));
          let viewStartPosition = isVerticalMultiView ? this.weekNumberPanelWidth : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(this.widget.multiViewSpacing) + dart.notNull(this.weekNumberPanelWidth) * (viewStartIndex + 1);
          if (dart.test(this.widget.isRtl)) {
            viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(this.weekNumberPanelWidth) * dart.notNull(currentViewIndex);
          }
          let viewEndPosition = dart.notNull(viewStartPosition) + width;
          let xPosition = viewStartPosition;
          let yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(this.widget.multiViewSpacing);
          for (let i = 0; i < datesCount; i = i + 1) {
            let currentIndex = i;
            if (dart.test(this.widget.isRtl)) {
              let rowIndex = (i / 7)[$truncate]();
              currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(7, i[$modulo](7))) + rowIndex * 7;
            }
            currentIndex = currentIndex + viewStartIndex;
            if (dart.notNull(xPosition) + 1 >= viewEndPosition) {
              xPosition = viewStartPosition;
              yPosition = yPosition + cellHeight;
            }
            let date = this.widget.visibleDates[$_get](currentIndex);
            if (hideLeadingAndTrailingDates && !dart.equals(dart.dload(date, 'month'), currentMonth)) {
              xPosition = dart.notNull(xPosition) + cellWidth;
              continue;
            }
            let child = framework.Widget.as((t7 = this.widget, t8 = context, t9 = dart.test(this.widget.isHijri) ? new hijri_date_picker_manager.HijriDateRangePickerCellDetails.new({date: core$.HijriDateTime.as(date), visibleDates: this.widget.visibleDates[$cast](core$.HijriDateTime), bounds: new ui.Rect.fromLTWH(xPosition, yPosition, cellWidth, cellHeight)}) : new date_picker_manager.DateRangePickerCellDetails.new({date: core.DateTime.as(date), visibleDates: this.widget.visibleDates[$cast](core.DateTime), bounds: new ui.Rect.fromLTWH(xPosition, yPosition, cellWidth, cellHeight)}), dart.dsend(t7, 'cellBuilder', [t8, t9])));
            this[_children$][$add](child);
            xPosition = dart.notNull(xPosition) + cellWidth;
          }
        }
      }
      return this[_getMonthRenderWidget]();
    }
    [_updateSelection$](opts) {
      let t8, t7;
      let isNeedSetState = opts && 'isNeedSetState' in opts ? opts.isNeedSetState : true;
      if (isNeedSetState == null) dart.nullFailed(I[2], 346, 31, "isNeedSetState");
      t7 = this.widget;
      t8 = this[_pickerStateDetails$];
      t7.getPickerStateDetails(t8);
      if (dart.test(this[_isSelectedValueEquals$]())) {
        return;
      }
      this[_children$][$clear]();
      this[_selectedDate$0] = this[_pickerStateDetails$].selectedDate;
      this[_selectedDates$0] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails$].selectedDates);
      this[_selectedRange$0] = this[_pickerStateDetails$].selectedRange;
      this[_selectedRanges$0] = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails$].selectedRanges);
      if (!dart.test(isNeedSetState)) {
        return;
      }
      this.setState(dart.fn(() => {
      }, T.VoidTovoid()));
    }
    [_isSelectedValueEquals$]() {
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return core$.isSameDate(this[_selectedDate$0], this[_pickerStateDetails$].selectedDate);
          }
        }
        case C[67] || CT.C67:
        {
          {
            return picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$0], this[_pickerStateDetails$].selectedDates);
          }
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            return picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$0], this[_pickerStateDetails$].selectedRange);
          }
        }
        case C[169] || CT.C169:
        {
          {
            return picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$0], this[_pickerStateDetails$].selectedRanges);
          }
        }
      }
    }
    [_getMonthRenderWidget]() {
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return new month_view._MonthViewSingleSelectionRenderWidget.new(this.widget.visibleDates, this.widget.rowCount, this.widget.cellStyle, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.todayHighlightColor, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.showLeadingAndTailingDates, this.widget.blackoutDates, this.widget.specialDates, this.widget.weekendDays, this.widget.selectionShape, this.widget.selectionRadius, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.height, this.widget.width, this[_selectedDate$0], this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, this.widget.isMobilePlatform, this.widget.weekNumberStyle, this.weekNumberPanelWidth, {widgets: this[_children$], $creationLocationd_0dea112b090073317d4: C[174] || CT.C174});
          }
        }
        case C[67] || CT.C67:
        {
          {
            return new month_view._MonthViewMultiSelectionRenderWidget.new(this.widget.visibleDates, this.widget.rowCount, this.widget.cellStyle, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.todayHighlightColor, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.showLeadingAndTailingDates, this.widget.blackoutDates, this.widget.specialDates, this.widget.weekendDays, this.widget.selectionShape, this.widget.selectionRadius, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.height, this.widget.width, this[_selectedDates$0], this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, this.widget.isMobilePlatform, this.widget.weekNumberStyle, this.weekNumberPanelWidth, {widgets: this[_children$], $creationLocationd_0dea112b090073317d4: C[206] || CT.C206});
          }
        }
        case C[101] || CT.C101:
        {
          return new month_view._MonthViewRangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.rowCount, this.widget.cellStyle, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.todayHighlightColor, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.showLeadingAndTailingDates, this.widget.blackoutDates, this.widget.specialDates, this.widget.weekendDays, this.widget.selectionShape, this.widget.selectionRadius, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.height, this.widget.width, this[_selectedRange$0], this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, this.widget.isMobilePlatform, this.widget.weekNumberStyle, this.weekNumberPanelWidth, {widgets: this[_children$], $creationLocationd_0dea112b090073317d4: C[243] || CT.C243});
        }
        case C[135] || CT.C135:
        {
          {
            return new month_view._MonthViewExtendableRangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.rowCount, this.widget.cellStyle, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.todayHighlightColor, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.showLeadingAndTailingDates, this.widget.blackoutDates, this.widget.specialDates, this.widget.weekendDays, this.widget.selectionShape, this.widget.selectionRadius, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.height, this.widget.width, this[_selectedRange$0], this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, this.widget.isMobilePlatform, this.widget.weekNumberStyle, this.weekNumberPanelWidth, {widgets: this[_children$], $creationLocationd_0dea112b090073317d4: C[281] || CT.C281});
          }
        }
        case C[169] || CT.C169:
        {
          {
            return new month_view._MonthViewMultiRangeSelectionRenderWidget.new(this.widget.visibleDates, this.widget.rowCount, this.widget.cellStyle, this.widget.selectionTextStyle, this.widget.rangeTextStyle, this.widget.selectionColor, this.widget.startRangeSelectionColor, this.widget.endRangeSelectionColor, this.widget.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.todayHighlightColor, this.widget.minDate, this.widget.maxDate, this.widget.enablePastDates, this.widget.showLeadingAndTailingDates, this.widget.blackoutDates, this.widget.specialDates, this.widget.weekendDays, this.widget.selectionShape, this.widget.selectionRadius, this.widget.mouseHoverPosition, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.selectionNotifier, this.widget.textScaleFactor, this.widget.height, this.widget.width, this[_selectedRanges$0], this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection, this.widget.isMobilePlatform, this.widget.weekNumberStyle, this.weekNumberPanelWidth, {widgets: this[_children$], $creationLocationd_0dea112b090073317d4: C[319] || CT.C319});
          }
        }
      }
    }
  };
  (month_view._MonthViewState.new = function() {
    this[_pickerStateDetails$] = new picker_helper.PickerStateArgs.new();
    this[_selectedDate$0] = null;
    this[_selectedDates$0] = null;
    this[_selectedRange$0] = null;
    this[_selectedRanges$0] = null;
    this[_children$] = T.JSArrayOfWidget().of([]);
    this[___MonthViewState_weekNumberPanelWidth] = null;
    month_view._MonthViewState.__proto__.new.call(this);
    ;
  }).prototype = month_view._MonthViewState.prototype;
  dart.addTypeTests(month_view._MonthViewState);
  dart.addTypeCaches(month_view._MonthViewState);
  dart.setMethodSignature(month_view._MonthViewState, () => ({
    __proto__: dart.getMethods(month_view._MonthViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_updateSelection$]: dart.fnType(dart.void, [], {isNeedSetState: core.bool}, {}),
    [_isSelectedValueEquals$]: dart.fnType(core.bool, []),
    [_getMonthRenderWidget]: dart.fnType(framework.MultiChildRenderObjectWidget, [])
  }));
  dart.setGetterSignature(month_view._MonthViewState, () => ({
    __proto__: dart.getGetters(month_view._MonthViewState.__proto__),
    weekNumberPanelWidth: core.double
  }));
  dart.setSetterSignature(month_view._MonthViewState, () => ({
    __proto__: dart.getSetters(month_view._MonthViewState.__proto__),
    weekNumberPanelWidth: core.double
  }));
  dart.setLibraryUri(month_view._MonthViewState, I[3]);
  dart.setFieldSignature(month_view._MonthViewState, () => ({
    __proto__: dart.getFields(month_view._MonthViewState.__proto__),
    [_pickerStateDetails$]: dart.finalFieldType(picker_helper.PickerStateArgs),
    [_selectedDate$0]: dart.fieldType(dart.dynamic),
    [_selectedDates$0]: dart.fieldType(dart.nullable(core.List)),
    [_selectedRange$0]: dart.fieldType(dart.dynamic),
    [_selectedRanges$0]: dart.fieldType(dart.nullable(core.List)),
    [_children$]: dart.finalFieldType(core.List$(framework.Widget)),
    [___MonthViewState_weekNumberPanelWidth]: dart.fieldType(dart.nullable(core.double))
  }));
  month_view._MonthViewSingleSelectionRenderWidget = class _MonthViewSingleSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 712, 20, "context");
      return new month_view._MonthViewSingleSelectionRenderObject.new(this.visibleDates, this.rowCount, this.cellStyle, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.datePickerTheme, this.isRtl, this.todayHighlightColor, this.minDate, this.maxDate, this.enablePastDates, this.showLeadingAndTailingDates, this.blackoutDates, this.specialDates, this.weekendDays, this.selectionShape, this.selectionRadius, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionNotifier, this.textScaleFactor, this.height, this.width, this.isHijri, this.navigationDirection, this.localizations, this.selectedDate, this.isMobilePlatform, this.weekNumberStyle, this.weekNumberPanelWidth);
    }
    updateRenderObject(context, renderObject) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 752, 40, "context");
      month_view._MonthViewSingleSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 753, 45, "renderObject");
      t7 = renderObject;
      (() => {
        t7.visibleDates = this.visibleDates;
        t7.rowCount = this.rowCount;
        t7.cellStyle = this.cellStyle;
        t7.selectionTextStyle = this.selectionTextStyle;
        t7.rangeTextStyle = this.rangeTextStyle;
        t7.selectionColor = this.selectionColor;
        t7.startRangeSelectionColor = this.startRangeSelectionColor;
        t7.endRangeSelectionColor = this.endRangeSelectionColor;
        t7.rangeSelectionColor = this.rangeSelectionColor;
        t7.datePickerTheme = this.datePickerTheme;
        t7.isRtl = this.isRtl;
        t7.todayHighlightColor = this.todayHighlightColor;
        t7.minDate = this.minDate;
        t7.maxDate = this.maxDate;
        t7.enablePastDates = this.enablePastDates;
        t7.showLeadingAndTailingDates = this.showLeadingAndTailingDates;
        t7.blackoutDates = this.blackoutDates;
        t7.specialDates = this.specialDates;
        t7.weekendDays = this.weekendDays;
        t7.selectionShape = this.selectionShape;
        t7.selectionRadius = this.selectionRadius;
        t7.mouseHoverPosition = this.mouseHoverPosition;
        t7.enableMultiView = this.enableMultiView;
        t7.multiViewSpacing = this.multiViewSpacing;
        t7.selectionNotifier = this.selectionNotifier;
        t7.textScaleFactor = this.textScaleFactor;
        t7.height = this.height;
        t7.width = this.width;
        t7.isHijri = this.isHijri;
        t7.localizations = this.localizations;
        t7.navigationDirection = this.navigationDirection;
        t7.selectedDate = this.selectedDate;
        t7.isMobilePlatform = this.isMobilePlatform;
        t7.weekNumberStyle = this.weekNumberStyle;
        t7.weekNumberPanelWidth = this.weekNumberPanelWidth;
        return t7;
      })();
    }
  };
  (month_view._MonthViewSingleSelectionRenderWidget.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, selectedDate, isHijri, localizations, navigationDirection, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 602, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 603, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 611, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 612, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 616, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 617, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 620, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 621, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 622, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 623, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 624, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 625, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 626, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 627, 12, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 628, 12, "height");
    if (width == null) dart.nullFailed(I[2], 629, 12, "width");
    if (isHijri == null) dart.nullFailed(I[2], 631, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 632, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 633, 12, "navigationDirection");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 634, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 635, 12, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 636, 12, "weekNumberPanelWidth");
    let widgets = opts && 'widgets' in opts ? opts.widgets : C[357] || CT.C357;
    if (widgets == null) dart.nullFailed(I[2], 637, 21, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.rowCount = rowCount;
    this.cellStyle = cellStyle;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.todayHighlightColor = todayHighlightColor;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.showLeadingAndTailingDates = showLeadingAndTailingDates;
    this.blackoutDates = blackoutDates;
    this.specialDates = specialDates;
    this.weekendDays = weekendDays;
    this.selectionShape = selectionShape;
    this.selectionRadius = selectionRadius;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.height = height;
    this.width = width;
    this.selectedDate = selectedDate;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    this.isMobilePlatform = isMobilePlatform;
    this.weekNumberStyle = weekNumberStyle;
    this.weekNumberPanelWidth = weekNumberPanelWidth;
    month_view._MonthViewSingleSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view._MonthViewSingleSelectionRenderWidget.prototype;
  dart.addTypeTests(month_view._MonthViewSingleSelectionRenderWidget);
  dart.addTypeCaches(month_view._MonthViewSingleSelectionRenderWidget);
  dart.setMethodSignature(month_view._MonthViewSingleSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(month_view._MonthViewSingleSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(month_view._MonthViewSingleSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(month_view._MonthViewSingleSelectionRenderWidget, I[3]);
  dart.setFieldSignature(month_view._MonthViewSingleSelectionRenderWidget, () => ({
    __proto__: dart.getFields(month_view._MonthViewSingleSelectionRenderWidget.__proto__),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    selectedDate: dart.finalFieldType(dart.dynamic),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    isMobilePlatform: dart.finalFieldType(core.bool),
    weekNumberPanelWidth: dart.finalFieldType(core.double)
  }));
  month_view._MonthViewMultiSelectionRenderWidget = class _MonthViewMultiSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 905, 20, "context");
      return new month_view._MonthViewMultiSelectionRenderObject.new(this.visibleDates, this.rowCount, this.cellStyle, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.datePickerTheme, this.isRtl, this.todayHighlightColor, this.minDate, this.maxDate, this.enablePastDates, this.showLeadingAndTailingDates, this.blackoutDates, this.specialDates, this.weekendDays, this.selectionShape, this.selectionRadius, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionNotifier, this.textScaleFactor, this.height, this.width, this.isHijri, this.navigationDirection, this.localizations, this.selectedDates, this.isMobilePlatform, this.weekNumberStyle, this.weekNumberPanelWidth);
    }
    updateRenderObject(context, renderObject) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 946, 20, "context");
      month_view._MonthViewMultiSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 946, 66, "renderObject");
      t7 = renderObject;
      (() => {
        t7.visibleDates = this.visibleDates;
        t7.rowCount = this.rowCount;
        t7.cellStyle = this.cellStyle;
        t7.selectionTextStyle = this.selectionTextStyle;
        t7.rangeTextStyle = this.rangeTextStyle;
        t7.selectionColor = this.selectionColor;
        t7.startRangeSelectionColor = this.startRangeSelectionColor;
        t7.endRangeSelectionColor = this.endRangeSelectionColor;
        t7.rangeSelectionColor = this.rangeSelectionColor;
        t7.datePickerTheme = this.datePickerTheme;
        t7.isRtl = this.isRtl;
        t7.todayHighlightColor = this.todayHighlightColor;
        t7.minDate = this.minDate;
        t7.maxDate = this.maxDate;
        t7.enablePastDates = this.enablePastDates;
        t7.showLeadingAndTailingDates = this.showLeadingAndTailingDates;
        t7.blackoutDates = this.blackoutDates;
        t7.specialDates = this.specialDates;
        t7.weekendDays = this.weekendDays;
        t7.selectionShape = this.selectionShape;
        t7.selectionRadius = this.selectionRadius;
        t7.mouseHoverPosition = this.mouseHoverPosition;
        t7.enableMultiView = this.enableMultiView;
        t7.multiViewSpacing = this.multiViewSpacing;
        t7.selectionNotifier = this.selectionNotifier;
        t7.textScaleFactor = this.textScaleFactor;
        t7.height = this.height;
        t7.width = this.width;
        t7.isHijri = this.isHijri;
        t7.localizations = this.localizations;
        t7.navigationDirection = this.navigationDirection;
        t7.selectedDates = this.selectedDates;
        t7.isMobilePlatform = this.isMobilePlatform;
        t7.weekNumberStyle = this.weekNumberStyle;
        t7.weekNumberPanelWidth = this.weekNumberPanelWidth;
        return t7;
      })();
    }
  };
  (month_view._MonthViewMultiSelectionRenderWidget.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, selectedDates, isHijri, localizations, navigationDirection, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 796, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 797, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 805, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 806, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 810, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 811, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 814, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 815, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 816, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 817, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 818, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 819, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 820, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 821, 12, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 822, 12, "height");
    if (width == null) dart.nullFailed(I[2], 823, 12, "width");
    if (isHijri == null) dart.nullFailed(I[2], 825, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 826, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 827, 12, "navigationDirection");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 828, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 829, 12, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 830, 12, "weekNumberPanelWidth");
    let widgets = opts && 'widgets' in opts ? opts.widgets : C[357] || CT.C357;
    if (widgets == null) dart.nullFailed(I[2], 831, 21, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.rowCount = rowCount;
    this.cellStyle = cellStyle;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.todayHighlightColor = todayHighlightColor;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.showLeadingAndTailingDates = showLeadingAndTailingDates;
    this.blackoutDates = blackoutDates;
    this.specialDates = specialDates;
    this.weekendDays = weekendDays;
    this.selectionShape = selectionShape;
    this.selectionRadius = selectionRadius;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.height = height;
    this.width = width;
    this.selectedDates = selectedDates;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    this.isMobilePlatform = isMobilePlatform;
    this.weekNumberStyle = weekNumberStyle;
    this.weekNumberPanelWidth = weekNumberPanelWidth;
    month_view._MonthViewMultiSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view._MonthViewMultiSelectionRenderWidget.prototype;
  dart.addTypeTests(month_view._MonthViewMultiSelectionRenderWidget);
  dart.addTypeCaches(month_view._MonthViewMultiSelectionRenderWidget);
  dart.setMethodSignature(month_view._MonthViewMultiSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(month_view._MonthViewMultiSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(month_view._MonthViewMultiSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(month_view._MonthViewMultiSelectionRenderWidget, I[3]);
  dart.setFieldSignature(month_view._MonthViewMultiSelectionRenderWidget, () => ({
    __proto__: dart.getFields(month_view._MonthViewMultiSelectionRenderWidget.__proto__),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    selectedDates: dart.finalFieldType(dart.nullable(core.List)),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    isMobilePlatform: dart.finalFieldType(core.bool),
    weekNumberPanelWidth: dart.finalFieldType(core.double)
  }));
  month_view._MonthViewRangeSelectionRenderWidget = class _MonthViewRangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 1099, 20, "context");
      return new month_view._MonthViewRangeSelectionRenderObject.new(this.visibleDates, this.rowCount, this.cellStyle, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.datePickerTheme, this.isRtl, this.todayHighlightColor, this.minDate, this.maxDate, this.enablePastDates, this.showLeadingAndTailingDates, this.blackoutDates, this.specialDates, this.weekendDays, this.selectionShape, this.selectionRadius, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionNotifier, this.textScaleFactor, this.height, this.width, this.isHijri, this.navigationDirection, this.localizations, this.selectedRange, this.isMobilePlatform, this.weekNumberStyle, this.weekNumberPanelWidth);
    }
    updateRenderObject(context, renderObject) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 1140, 20, "context");
      month_view._MonthViewRangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 1140, 66, "renderObject");
      t7 = renderObject;
      (() => {
        t7.visibleDates = this.visibleDates;
        t7.rowCount = this.rowCount;
        t7.cellStyle = this.cellStyle;
        t7.selectionTextStyle = this.selectionTextStyle;
        t7.rangeTextStyle = this.rangeTextStyle;
        t7.selectionColor = this.selectionColor;
        t7.startRangeSelectionColor = this.startRangeSelectionColor;
        t7.endRangeSelectionColor = this.endRangeSelectionColor;
        t7.rangeSelectionColor = this.rangeSelectionColor;
        t7.datePickerTheme = this.datePickerTheme;
        t7.isRtl = this.isRtl;
        t7.todayHighlightColor = this.todayHighlightColor;
        t7.minDate = this.minDate;
        t7.maxDate = this.maxDate;
        t7.enablePastDates = this.enablePastDates;
        t7.showLeadingAndTailingDates = this.showLeadingAndTailingDates;
        t7.blackoutDates = this.blackoutDates;
        t7.specialDates = this.specialDates;
        t7.weekendDays = this.weekendDays;
        t7.selectionShape = this.selectionShape;
        t7.selectionRadius = this.selectionRadius;
        t7.mouseHoverPosition = this.mouseHoverPosition;
        t7.enableMultiView = this.enableMultiView;
        t7.multiViewSpacing = this.multiViewSpacing;
        t7.selectionNotifier = this.selectionNotifier;
        t7.textScaleFactor = this.textScaleFactor;
        t7.height = this.height;
        t7.width = this.width;
        t7.isHijri = this.isHijri;
        t7.localizations = this.localizations;
        t7.navigationDirection = this.navigationDirection;
        t7.selectedRange = this.selectedRange;
        t7.isMobilePlatform = this.isMobilePlatform;
        t7.weekNumberStyle = this.weekNumberStyle;
        t7.weekNumberPanelWidth = this.weekNumberPanelWidth;
        return t7;
      })();
    }
  };
  (month_view._MonthViewRangeSelectionRenderWidget.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, selectedRange, isHijri, localizations, navigationDirection, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 989, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 990, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 998, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 999, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 1003, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 1004, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 1007, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 1008, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 1009, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 1010, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 1011, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 1012, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 1013, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 1014, 12, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 1015, 12, "height");
    if (width == null) dart.nullFailed(I[2], 1016, 12, "width");
    if (isHijri == null) dart.nullFailed(I[2], 1018, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 1019, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 1020, 12, "navigationDirection");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 1021, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 1022, 12, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 1023, 12, "weekNumberPanelWidth");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[2], 1024, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.rowCount = rowCount;
    this.cellStyle = cellStyle;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.todayHighlightColor = todayHighlightColor;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.showLeadingAndTailingDates = showLeadingAndTailingDates;
    this.blackoutDates = blackoutDates;
    this.specialDates = specialDates;
    this.weekendDays = weekendDays;
    this.selectionShape = selectionShape;
    this.selectionRadius = selectionRadius;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.height = height;
    this.width = width;
    this.selectedRange = selectedRange;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    this.isMobilePlatform = isMobilePlatform;
    this.weekNumberStyle = weekNumberStyle;
    this.weekNumberPanelWidth = weekNumberPanelWidth;
    month_view._MonthViewRangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view._MonthViewRangeSelectionRenderWidget.prototype;
  dart.addTypeTests(month_view._MonthViewRangeSelectionRenderWidget);
  dart.addTypeCaches(month_view._MonthViewRangeSelectionRenderWidget);
  dart.setMethodSignature(month_view._MonthViewRangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(month_view._MonthViewRangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(month_view._MonthViewRangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(month_view._MonthViewRangeSelectionRenderWidget, I[3]);
  dart.setFieldSignature(month_view._MonthViewRangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(month_view._MonthViewRangeSelectionRenderWidget.__proto__),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    selectedRange: dart.finalFieldType(dart.dynamic),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    isMobilePlatform: dart.finalFieldType(core.bool),
    weekNumberPanelWidth: dart.finalFieldType(core.double)
  }));
  month_view._MonthViewExtendableRangeSelectionRenderWidget = class _MonthViewExtendableRangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 1293, 20, "context");
      return new month_view._MonthViewExtendableRangeSelectionRenderObject.new(this.visibleDates, this.rowCount, this.cellStyle, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.datePickerTheme, this.isRtl, this.todayHighlightColor, this.minDate, this.maxDate, this.enablePastDates, this.showLeadingAndTailingDates, this.blackoutDates, this.specialDates, this.weekendDays, this.selectionShape, this.selectionRadius, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionNotifier, this.textScaleFactor, this.height, this.width, this.isHijri, this.navigationDirection, this.localizations, this.selectedRange, this.isMobilePlatform, this.weekNumberStyle, this.weekNumberPanelWidth);
    }
    updateRenderObject(context, renderObject) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 1333, 40, "context");
      month_view._MonthViewExtendableRangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 1334, 54, "renderObject");
      t7 = renderObject;
      (() => {
        t7.visibleDates = this.visibleDates;
        t7.rowCount = this.rowCount;
        t7.cellStyle = this.cellStyle;
        t7.selectionTextStyle = this.selectionTextStyle;
        t7.rangeTextStyle = this.rangeTextStyle;
        t7.selectionColor = this.selectionColor;
        t7.startRangeSelectionColor = this.startRangeSelectionColor;
        t7.endRangeSelectionColor = this.endRangeSelectionColor;
        t7.rangeSelectionColor = this.rangeSelectionColor;
        t7.datePickerTheme = this.datePickerTheme;
        t7.isRtl = this.isRtl;
        t7.todayHighlightColor = this.todayHighlightColor;
        t7.minDate = this.minDate;
        t7.maxDate = this.maxDate;
        t7.enablePastDates = this.enablePastDates;
        t7.showLeadingAndTailingDates = this.showLeadingAndTailingDates;
        t7.blackoutDates = this.blackoutDates;
        t7.specialDates = this.specialDates;
        t7.weekendDays = this.weekendDays;
        t7.selectionShape = this.selectionShape;
        t7.selectionRadius = this.selectionRadius;
        t7.mouseHoverPosition = this.mouseHoverPosition;
        t7.enableMultiView = this.enableMultiView;
        t7.multiViewSpacing = this.multiViewSpacing;
        t7.selectionNotifier = this.selectionNotifier;
        t7.textScaleFactor = this.textScaleFactor;
        t7.height = this.height;
        t7.width = this.width;
        t7.isHijri = this.isHijri;
        t7.localizations = this.localizations;
        t7.navigationDirection = this.navigationDirection;
        t7.selectedRange = this.selectedRange;
        t7.isMobilePlatform = this.isMobilePlatform;
        t7.weekNumberStyle = this.weekNumberStyle;
        t7.weekNumberPanelWidth = this.weekNumberPanelWidth;
        return t7;
      })();
    }
  };
  (month_view._MonthViewExtendableRangeSelectionRenderWidget.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, selectedRange, isHijri, localizations, navigationDirection, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 1183, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 1184, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 1192, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 1193, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 1197, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 1198, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 1201, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 1202, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 1203, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 1204, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 1205, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 1206, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 1207, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 1208, 12, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 1209, 12, "height");
    if (width == null) dart.nullFailed(I[2], 1210, 12, "width");
    if (isHijri == null) dart.nullFailed(I[2], 1212, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 1213, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 1214, 12, "navigationDirection");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 1215, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 1216, 12, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 1217, 12, "weekNumberPanelWidth");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[2], 1218, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.rowCount = rowCount;
    this.cellStyle = cellStyle;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.todayHighlightColor = todayHighlightColor;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.showLeadingAndTailingDates = showLeadingAndTailingDates;
    this.blackoutDates = blackoutDates;
    this.specialDates = specialDates;
    this.weekendDays = weekendDays;
    this.selectionShape = selectionShape;
    this.selectionRadius = selectionRadius;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.height = height;
    this.width = width;
    this.selectedRange = selectedRange;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    this.isMobilePlatform = isMobilePlatform;
    this.weekNumberStyle = weekNumberStyle;
    this.weekNumberPanelWidth = weekNumberPanelWidth;
    month_view._MonthViewExtendableRangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view._MonthViewExtendableRangeSelectionRenderWidget.prototype;
  dart.addTypeTests(month_view._MonthViewExtendableRangeSelectionRenderWidget);
  dart.addTypeCaches(month_view._MonthViewExtendableRangeSelectionRenderWidget);
  dart.setMethodSignature(month_view._MonthViewExtendableRangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(month_view._MonthViewExtendableRangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(month_view._MonthViewExtendableRangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(month_view._MonthViewExtendableRangeSelectionRenderWidget, I[3]);
  dart.setFieldSignature(month_view._MonthViewExtendableRangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(month_view._MonthViewExtendableRangeSelectionRenderWidget.__proto__),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    selectedRange: dart.finalFieldType(dart.dynamic),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    isMobilePlatform: dart.finalFieldType(core.bool),
    weekNumberPanelWidth: dart.finalFieldType(core.double),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle)
  }));
  month_view._MonthViewMultiRangeSelectionRenderWidget = class _MonthViewMultiRangeSelectionRenderWidget extends framework.MultiChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[2], 1487, 20, "context");
      return new month_view._MonthViewMultiRangeSelectionRenderObject.new(this.visibleDates, this.rowCount, this.cellStyle, this.selectionTextStyle, this.rangeTextStyle, this.selectionColor, this.startRangeSelectionColor, this.endRangeSelectionColor, this.rangeSelectionColor, this.datePickerTheme, this.isRtl, this.todayHighlightColor, this.minDate, this.maxDate, this.enablePastDates, this.showLeadingAndTailingDates, this.blackoutDates, this.specialDates, this.weekendDays, this.selectionShape, this.selectionRadius, this.mouseHoverPosition, this.enableMultiView, this.multiViewSpacing, this.selectionNotifier, this.textScaleFactor, this.height, this.width, this.isHijri, this.navigationDirection, this.localizations, this.selectedRanges, this.isMobilePlatform, this.weekNumberStyle, this.weekNumberPanelWidth);
    }
    updateRenderObject(context, renderObject) {
      let t7;
      if (context == null) dart.nullFailed(I[2], 1527, 40, "context");
      month_view._MonthViewMultiRangeSelectionRenderObject.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[2], 1528, 49, "renderObject");
      t7 = renderObject;
      (() => {
        t7.visibleDates = this.visibleDates;
        t7.rowCount = this.rowCount;
        t7.cellStyle = this.cellStyle;
        t7.selectionTextStyle = this.selectionTextStyle;
        t7.rangeTextStyle = this.rangeTextStyle;
        t7.selectionColor = this.selectionColor;
        t7.startRangeSelectionColor = this.startRangeSelectionColor;
        t7.endRangeSelectionColor = this.endRangeSelectionColor;
        t7.rangeSelectionColor = this.rangeSelectionColor;
        t7.datePickerTheme = this.datePickerTheme;
        t7.isRtl = this.isRtl;
        t7.todayHighlightColor = this.todayHighlightColor;
        t7.minDate = this.minDate;
        t7.maxDate = this.maxDate;
        t7.enablePastDates = this.enablePastDates;
        t7.showLeadingAndTailingDates = this.showLeadingAndTailingDates;
        t7.blackoutDates = this.blackoutDates;
        t7.specialDates = this.specialDates;
        t7.weekendDays = this.weekendDays;
        t7.selectionShape = this.selectionShape;
        t7.selectionRadius = this.selectionRadius;
        t7.mouseHoverPosition = this.mouseHoverPosition;
        t7.enableMultiView = this.enableMultiView;
        t7.multiViewSpacing = this.multiViewSpacing;
        t7.selectionNotifier = this.selectionNotifier;
        t7.textScaleFactor = this.textScaleFactor;
        t7.height = this.height;
        t7.width = this.width;
        t7.isHijri = this.isHijri;
        t7.localizations = this.localizations;
        t7.navigationDirection = this.navigationDirection;
        t7.selectedRanges = this.selectedRanges;
        t7.isMobilePlatform = this.isMobilePlatform;
        t7.weekNumberStyle = this.weekNumberStyle;
        t7.weekNumberPanelWidth = this.weekNumberPanelWidth;
        return t7;
      })();
    }
  };
  (month_view._MonthViewMultiRangeSelectionRenderWidget.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, selectedRanges, isHijri, localizations, navigationDirection, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 1377, 12, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 1378, 12, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 1386, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 1387, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 1391, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 1392, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 1395, 12, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 1396, 12, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 1397, 12, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 1398, 12, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 1399, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 1400, 12, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 1401, 12, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 1402, 12, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 1403, 12, "height");
    if (width == null) dart.nullFailed(I[2], 1404, 12, "width");
    if (isHijri == null) dart.nullFailed(I[2], 1406, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[2], 1407, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[2], 1408, 12, "navigationDirection");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 1409, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 1410, 12, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 1411, 12, "weekNumberPanelWidth");
    let widgets = opts && 'widgets' in opts ? opts.widgets : null;
    if (widgets == null) dart.nullFailed(I[2], 1412, 30, "widgets");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.visibleDates = visibleDates;
    this.rowCount = rowCount;
    this.cellStyle = cellStyle;
    this.selectionTextStyle = selectionTextStyle;
    this.rangeTextStyle = rangeTextStyle;
    this.selectionColor = selectionColor;
    this.startRangeSelectionColor = startRangeSelectionColor;
    this.endRangeSelectionColor = endRangeSelectionColor;
    this.rangeSelectionColor = rangeSelectionColor;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.todayHighlightColor = todayHighlightColor;
    this.minDate = minDate;
    this.maxDate = maxDate;
    this.enablePastDates = enablePastDates;
    this.showLeadingAndTailingDates = showLeadingAndTailingDates;
    this.blackoutDates = blackoutDates;
    this.specialDates = specialDates;
    this.weekendDays = weekendDays;
    this.selectionShape = selectionShape;
    this.selectionRadius = selectionRadius;
    this.mouseHoverPosition = mouseHoverPosition;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this.textScaleFactor = textScaleFactor;
    this.height = height;
    this.width = width;
    this.selectedRanges = selectedRanges;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    this.isMobilePlatform = isMobilePlatform;
    this.weekNumberStyle = weekNumberStyle;
    this.weekNumberPanelWidth = weekNumberPanelWidth;
    month_view._MonthViewMultiRangeSelectionRenderWidget.__proto__.new.call(this, {children: widgets, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = month_view._MonthViewMultiRangeSelectionRenderWidget.prototype;
  dart.addTypeTests(month_view._MonthViewMultiRangeSelectionRenderWidget);
  dart.addTypeCaches(month_view._MonthViewMultiRangeSelectionRenderWidget);
  dart.setMethodSignature(month_view._MonthViewMultiRangeSelectionRenderWidget, () => ({
    __proto__: dart.getMethods(month_view._MonthViewMultiRangeSelectionRenderWidget.__proto__),
    createRenderObject: dart.fnType(month_view._MonthViewMultiRangeSelectionRenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(month_view._MonthViewMultiRangeSelectionRenderWidget, I[3]);
  dart.setFieldSignature(month_view._MonthViewMultiRangeSelectionRenderWidget, () => ({
    __proto__: dart.getFields(month_view._MonthViewMultiRangeSelectionRenderWidget.__proto__),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    rowCount: dart.finalFieldType(core.int),
    cellStyle: dart.finalFieldType(dart.dynamic),
    visibleDates: dart.finalFieldType(core.List),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    showLeadingAndTailingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List)),
    specialDates: dart.finalFieldType(dart.nullable(core.List)),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    selectionRadius: dart.finalFieldType(core.double),
    selectionNotifier: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    mouseHoverPosition: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textScaleFactor: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    selectedRanges: dart.finalFieldType(dart.nullable(core.List)),
    isMobilePlatform: dart.finalFieldType(core.bool),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    weekNumberPanelWidth: dart.finalFieldType(core.double)
  }));
  month_view._DatePickerParentData = class _DatePickerParentData extends box$.ContainerBoxParentData$(box$.RenderBox) {};
  (month_view._DatePickerParentData.new = function() {
    month_view._DatePickerParentData.__proto__.new.call(this);
    ;
  }).prototype = month_view._DatePickerParentData.prototype;
  dart.addTypeTests(month_view._DatePickerParentData);
  dart.addTypeCaches(month_view._DatePickerParentData);
  dart.setLibraryUri(month_view._DatePickerParentData, I[3]);
  var _selectionPainter = dart.privateName(month_view, "_selectionPainter");
  var _textPainter$ = dart.privateName(month_view, "_textPainter");
  var _cacheNodes$ = dart.privateName(month_view, "_cacheNodes");
  var ___IMonthView__cellWidth = dart.privateName(month_view, "_#_IMonthView#_cellWidth");
  var ___IMonthView__cellHeight = dart.privateName(month_view, "_#_IMonthView#_cellHeight");
  var ___IMonthView__centerXPosition = dart.privateName(month_view, "_#_IMonthView#_centerXPosition");
  var ___IMonthView__centerYPosition = dart.privateName(month_view, "_#_IMonthView#_centerYPosition");
  var _visibleDates$0 = dart.privateName(month_view, "_visibleDates");
  var _rowCount$ = dart.privateName(month_view, "_rowCount");
  var _cellStyle$0 = dart.privateName(month_view, "_cellStyle");
  var _selectionTextStyle$0 = dart.privateName(month_view, "_selectionTextStyle");
  var _rangeTextStyle$0 = dart.privateName(month_view, "_rangeTextStyle");
  var _selectionColor$0 = dart.privateName(month_view, "_selectionColor");
  var _startRangeSelectionColor$0 = dart.privateName(month_view, "_startRangeSelectionColor");
  var _endRangeSelectionColor$0 = dart.privateName(month_view, "_endRangeSelectionColor");
  var _rangeSelectionColor$0 = dart.privateName(month_view, "_rangeSelectionColor");
  var _datePickerTheme$0 = dart.privateName(month_view, "_datePickerTheme");
  var _isRtl$0 = dart.privateName(month_view, "_isRtl");
  var _todayHighlightColor$0 = dart.privateName(month_view, "_todayHighlightColor");
  var _minDate$0 = dart.privateName(month_view, "_minDate");
  var _maxDate$0 = dart.privateName(month_view, "_maxDate");
  var _enablePastDates$0 = dart.privateName(month_view, "_enablePastDates");
  var _showLeadingAndTailingDates$ = dart.privateName(month_view, "_showLeadingAndTailingDates");
  var _blackoutDates$ = dart.privateName(month_view, "_blackoutDates");
  var _specialDates$ = dart.privateName(month_view, "_specialDates");
  var _weekendDays$ = dart.privateName(month_view, "_weekendDays");
  var _selectionShape$0 = dart.privateName(month_view, "_selectionShape");
  var _selectionRadius$0 = dart.privateName(month_view, "_selectionRadius");
  var _mouseHoverPosition$0 = dart.privateName(month_view, "_mouseHoverPosition");
  var _enableMultiView$0 = dart.privateName(month_view, "_enableMultiView");
  var _multiViewSpacing$0 = dart.privateName(month_view, "_multiViewSpacing");
  var _textScaleFactor$0 = dart.privateName(month_view, "_textScaleFactor");
  var _height$0 = dart.privateName(month_view, "_height");
  var _width$0 = dart.privateName(month_view, "_width");
  var _isHijri$0 = dart.privateName(month_view, "_isHijri");
  var _navigationDirection$0 = dart.privateName(month_view, "_navigationDirection");
  var _weekNumberStyle$ = dart.privateName(month_view, "_weekNumberStyle");
  var _weekNumberPanelWidth$ = dart.privateName(month_view, "_weekNumberPanelWidth");
  var _cellWidth = dart.privateName(month_view, "_cellWidth");
  var _cellHeight = dart.privateName(month_view, "_cellHeight");
  var _centerXPosition = dart.privateName(month_view, "_centerXPosition");
  var _centerYPosition = dart.privateName(month_view, "_centerYPosition");
  var _getSemanticsBuilder$ = dart.privateName(month_view, "_getSemanticsBuilder");
  var _getSemanticMonthLabel = dart.privateName(month_view, "_getSemanticMonthLabel");
  const RenderBox_ContainerRenderObjectMixin$36$ = class RenderBox_ContainerRenderObjectMixin extends box$.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36$.new = function() {
    object.ContainerRenderObjectMixin$(box$.RenderBox, month_view._DatePickerParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36$.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36$.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36$, object.ContainerRenderObjectMixin$(box$.RenderBox, month_view._DatePickerParentData));
  month_view._IMonthView = class _IMonthView extends RenderBox_ContainerRenderObjectMixin$36$ {
    get weekNumberStyle() {
      return this[_weekNumberStyle$];
    }
    set weekNumberStyle(value) {
      if (value == null) dart.nullFailed(I[2], 1614, 54, "value");
      if (dart.equals(this[_weekNumberStyle$], value)) {
        return;
      }
      this[_weekNumberStyle$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get weekNumberPanelWidth() {
      return this[_weekNumberPanelWidth$];
    }
    set weekNumberPanelWidth(value) {
      if (value == null) dart.nullFailed(I[2], 1631, 35, "value");
      if (this[_weekNumberPanelWidth$] == value) {
        return;
      }
      this[_weekNumberPanelWidth$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get navigationDirection() {
      return this[_navigationDirection$0];
    }
    set navigationDirection(value) {
      if (value == null) dart.nullFailed(I[2], 1649, 62, "value");
      if (this[_navigationDirection$0] == value) {
        return;
      }
      this[_navigationDirection$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get rowCount() {
      return this[_rowCount$];
    }
    set rowCount(value) {
      if (value == null) dart.nullFailed(I[2], 1667, 20, "value");
      if (this[_rowCount$] == value) {
        return;
      }
      this[_rowCount$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get visibleDates() {
      return this[_visibleDates$0];
    }
    set visibleDates(value) {
      if (value == null) dart.nullFailed(I[2], 1685, 34, "value");
      if (dart.equals(this[_visibleDates$0], value)) {
        return;
      }
      this[_visibleDates$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get cellStyle() {
      return this[_cellStyle$0];
    }
    set cellStyle(value) {
      if (dart.equals(this[_cellStyle$0], value)) {
        return;
      }
      this[_cellStyle$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get isRtl() {
      return this[_isRtl$0];
    }
    set isRtl(value) {
      if (value == null) dart.nullFailed(I[2], 1721, 18, "value");
      if (this[_isRtl$0] == value) {
        return;
      }
      this[_isRtl$0] = value;
      this.markNeedsPaint();
    }
    get todayHighlightColor() {
      return this[_todayHighlightColor$0];
    }
    set todayHighlightColor(value) {
      if (dart.equals(this[_todayHighlightColor$0], value)) {
        return;
      }
      this[_todayHighlightColor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get datePickerTheme() {
      return this[_datePickerTheme$0];
    }
    set datePickerTheme(value) {
      if (value == null) dart.nullFailed(I[2], 1753, 50, "value");
      if (dart.equals(this[_datePickerTheme$0], value)) {
        return;
      }
      this[_datePickerTheme$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get minDate() {
      return this[_minDate$0];
    }
    set minDate(value) {
      if (dart.equals(this[_minDate$0], value)) {
        return;
      }
      this[_minDate$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get maxDate() {
      return this[_maxDate$0];
    }
    set maxDate(value) {
      if (dart.equals(this[_maxDate$0], value)) {
        return;
      }
      this[_maxDate$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get enablePastDates() {
      return this[_enablePastDates$0];
    }
    set enablePastDates(value) {
      if (value == null) dart.nullFailed(I[2], 1807, 28, "value");
      if (this[_enablePastDates$0] == value) {
        return;
      }
      this[_enablePastDates$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get showLeadingAndTailingDates() {
      return this[_showLeadingAndTailingDates$];
    }
    set showLeadingAndTailingDates(value) {
      if (value == null) dart.nullFailed(I[2], 1825, 39, "value");
      if (this[_showLeadingAndTailingDates$] == value) {
        return;
      }
      this[_showLeadingAndTailingDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get blackoutDates() {
      return this[_blackoutDates$];
    }
    set blackoutDates(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_blackoutDates$], value))) {
        return;
      }
      this[_blackoutDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get specialDates() {
      return this[_specialDates$];
    }
    set specialDates(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_specialDates$], value))) {
        return;
      }
      this[_specialDates$] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get weekendDays() {
      return this[_weekendDays$];
    }
    set weekendDays(value) {
      if (value == null) dart.nullFailed(I[2], 1879, 29, "value");
      if (dart.equals(this[_weekendDays$], value)) {
        return;
      }
      this[_weekendDays$] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get selectionShape() {
      return this[_selectionShape$0];
    }
    set selectionShape(value) {
      if (value == null) dart.nullFailed(I[2], 1897, 52, "value");
      if (this[_selectionShape$0] == value) {
        return;
      }
      this[_selectionShape$0] = value;
      this.markNeedsPaint();
    }
    get selectionRadius() {
      return this[_selectionRadius$0];
    }
    set selectionRadius(value) {
      if (value == null) dart.nullFailed(I[2], 1911, 30, "value");
      if (this[_selectionRadius$0] == value) {
        return;
      }
      this[_selectionRadius$0] = value;
      this.markNeedsPaint();
    }
    get mouseHoverPosition() {
      return this[_mouseHoverPosition$0];
    }
    set mouseHoverPosition(value) {
      if (value == null) dart.nullFailed(I[2], 1928, 58, "value");
      if (dart.equals(this[_mouseHoverPosition$0], value)) {
        return;
      }
      this[_mouseHoverPosition$0].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_mouseHoverPosition$0] = value;
      this[_mouseHoverPosition$0].addListener(dart.bind(this, 'markNeedsPaint'));
      this.markNeedsPaint();
    }
    get enableMultiView() {
      return this[_enableMultiView$0];
    }
    set enableMultiView(value) {
      if (value == null) dart.nullFailed(I[2], 1944, 28, "value");
      if (this[_enableMultiView$0] == value) {
        return;
      }
      this[_enableMultiView$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get multiViewSpacing() {
      return this[_multiViewSpacing$0];
    }
    set multiViewSpacing(value) {
      if (value == null) dart.nullFailed(I[2], 1962, 31, "value");
      if (this[_multiViewSpacing$0] == value) {
        return;
      }
      this[_multiViewSpacing$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get selectionTextStyle() {
      return this[_selectionTextStyle$0];
    }
    set selectionTextStyle(value) {
      if (dart.equals(this[_selectionTextStyle$0], value)) {
        return;
      }
      this[_selectionTextStyle$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get rangeTextStyle() {
      return this[_rangeTextStyle$0];
    }
    set rangeTextStyle(value) {
      if (dart.equals(this[_rangeTextStyle$0], value)) {
        return;
      }
      this[_rangeTextStyle$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get selectionColor() {
      return this[_selectionColor$0];
    }
    set selectionColor(value) {
      if (dart.equals(this[_selectionColor$0], value)) {
        return;
      }
      this[_selectionColor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get startRangeSelectionColor() {
      return this[_startRangeSelectionColor$0];
    }
    set startRangeSelectionColor(value) {
      if (dart.equals(this[_startRangeSelectionColor$0], value)) {
        return;
      }
      this[_startRangeSelectionColor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get endRangeSelectionColor() {
      return this[_endRangeSelectionColor$0];
    }
    set endRangeSelectionColor(value) {
      if (dart.equals(this[_endRangeSelectionColor$0], value)) {
        return;
      }
      this[_endRangeSelectionColor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get rangeSelectionColor() {
      return this[_rangeSelectionColor$0];
    }
    set rangeSelectionColor(value) {
      if (dart.equals(this[_rangeSelectionColor$0], value)) {
        return;
      }
      this[_rangeSelectionColor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get textScaleFactor() {
      return this[_textScaleFactor$0];
    }
    set textScaleFactor(value) {
      if (value == null) dart.nullFailed(I[2], 2088, 30, "value");
      if (this[_textScaleFactor$0] == value) {
        return;
      }
      this[_textScaleFactor$0] = value;
      if (this.childCount !== 0) {
        return;
      }
      this.markNeedsPaint();
    }
    get height() {
      return this[_height$0];
    }
    set height(value) {
      if (value == null) dart.nullFailed(I[2], 2105, 21, "value");
      if (this[_height$0] == value) {
        return;
      }
      this[_height$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get width() {
      return this[_width$0];
    }
    set width(value) {
      if (value == null) dart.nullFailed(I[2], 2122, 20, "value");
      if (this[_width$0] == value) {
        return;
      }
      this[_width$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    get isHijri() {
      return this[_isHijri$0];
    }
    set isHijri(value) {
      if (value == null) dart.nullFailed(I[2], 2139, 20, "value");
      if (this[_isHijri$0] == value) {
        return;
      }
      this[_isHijri$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    set [_cellWidth](t7) {
      if (t7 == null) dart.nullFailed(I[2], 2172, 15, "null");
      this[___IMonthView__cellWidth] = t7;
    }
    get [_cellWidth]() {
      let t8;
      t8 = this[___IMonthView__cellWidth];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_cellWidth")) : t8;
    }
    set [_cellHeight](t8) {
      if (t8 == null) dart.nullFailed(I[2], 2172, 27, "null");
      this[___IMonthView__cellHeight] = t8;
    }
    get [_cellHeight]() {
      let t9;
      t9 = this[___IMonthView__cellHeight];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_cellHeight")) : t9;
    }
    set [_centerXPosition](t9) {
      if (t9 == null) dart.nullFailed(I[2], 2173, 15, "null");
      this[___IMonthView__centerXPosition] = t9;
    }
    get [_centerXPosition]() {
      let t10;
      t10 = this[___IMonthView__centerXPosition];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_centerXPosition")) : t10;
    }
    set [_centerYPosition](t10) {
      if (t10 == null) dart.nullFailed(I[2], 2173, 33, "null");
      this[___IMonthView__centerYPosition] = t10;
    }
    get [_centerYPosition]() {
      let t11;
      t11 = this[___IMonthView__centerYPosition];
      return t11 == null ? dart.throw(new _internal.LateError.fieldNI("_centerYPosition")) : t11;
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[2], 2177, 29, "owner");
      super.attach(owner);
      this[_mouseHoverPosition$0].addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      this[_mouseHoverPosition$0].removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    setupParentData(child) {
      object.RenderObject.as(child);
      if (child == null) dart.nullFailed(I[2], 2190, 47, "child");
      if (!month_view._DatePickerParentData.is(child.parentData)) {
        child.parentData = new month_view._DatePickerParentData.new();
      }
    }
    performLayout() {
      let widgetSize = this.constraints.biggest;
      this.size = new ui.Size.new(widgetSize.width[$isInfinite] ? this.width : widgetSize.width, widgetSize.height[$isInfinite] ? this.height : widgetSize.height);
      let child = this.firstChild;
      if (child == null) {
        return;
      }
      let currentWidth = dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth);
      let currentHeight = this.size.height;
      if (dart.test(this[_enableMultiView$0])) {
        if (this[_navigationDirection$0] == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
          currentWidth = (currentWidth - dart.notNull(this.multiViewSpacing) - dart.notNull(this.weekNumberPanelWidth)) / 2;
        } else {
          currentHeight = (dart.notNull(currentHeight) - dart.notNull(this.multiViewSpacing)) / 2;
        }
      }
      let cellWidth = currentWidth / 7;
      let cellHeight = dart.notNull(currentHeight) / dart.notNull(this.rowCount);
      while (child != null) {
        child.layout(this.constraints.copyWith({minHeight: cellHeight, maxHeight: cellHeight, minWidth: cellWidth, maxWidth: cellWidth}));
        child = this.childAfter(child);
      }
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(I[2], 2251, 62, "config");
      super.describeSemanticsConfiguration(config);
      config.isSemanticBoundary = true;
    }
    assembleSemanticsNode(node, config, children) {
      let t11;
      if (node == null) dart.nullFailed(I[2], 2258, 19, "node");
      if (config == null) dart.nullFailed(I[2], 2259, 28, "config");
      if (children == null) dart.nullFailed(I[2], 2260, 29, "children");
      this[_cacheNodes$] == null ? this[_cacheNodes$] = T.JSArrayOfSemanticsNode().of([]) : null;
      let semantics = this[_getSemanticsBuilder$](this.size);
      let semanticsNodes = T.JSArrayOfSemanticsNode().of([]);
      for (let i = 0; i < dart.notNull(semantics[$length]); i = i + 1) {
        let currentSemantics = semantics[$_get](i);
        let newChild = dart.test(dart.nullCheck(this[_cacheNodes$])[$isNotEmpty]) ? dart.nullCheck(this[_cacheNodes$])[$removeAt](0) : new semantics$.SemanticsNode.new({key: currentSemantics.key});
        let properties = currentSemantics.properties;
        let config = new semantics$.SemanticsConfiguration.new();
        if (properties.label != null) {
          config.label = dart.nullCheck(properties.label);
        }
        if (properties.textDirection != null) {
          config.textDirection = properties.textDirection;
        }
        newChild.updateWith({config: config, childrenInInversePaintOrder: C[170] || CT.C170});
        t11 = newChild;
        (() => {
          t11.rect = currentSemantics.rect;
          t11.transform = currentSemantics.transform;
          t11.tags = currentSemantics.tags;
          return t11;
        })();
        semanticsNodes[$add](newChild);
      }
      let finalChildren = T.JSArrayOfSemanticsNode().of([]);
      finalChildren[$addAll](semanticsNodes);
      finalChildren[$addAll](children);
      this[_cacheNodes$] = semanticsNodes;
      super.assembleSemanticsNode(node, config, finalChildren);
    }
    clearSemantics() {
      super.clearSemantics();
      this[_cacheNodes$] = null;
    }
    visitChildrenForSemantics(visitor) {
      if (visitor == null) dart.nullFailed(I[2], 2308, 54, "visitor");
      return;
    }
    [_getSemanticsBuilder$](size) {
      if (size == null) dart.nullFailed(I[2], 2312, 58, "size");
      let semanticsBuilder = T.JSArrayOfCustomPainterSemantics().of([]);
      let left = null;
      let top = null;
      let leftAndTopValue = null;
      let webUIPadding = 0.0;
      let width = dart.notNull(size.width) - dart.notNull(this.weekNumberPanelWidth);
      let height = size.height;
      let viewCount = 1;
      let isHorizontalMultiView = dart.test(this[_enableMultiView$0]) && this[_navigationDirection$0] == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
      let isVerticalMultiView = dart.test(this[_enableMultiView$0]) && this[_navigationDirection$0] == date_picker_manager.DateRangePickerNavigationDirection.vertical;
      if (isHorizontalMultiView) {
        webUIPadding = this[_multiViewSpacing$0];
        viewCount = 2;
        width = (width - dart.notNull(webUIPadding) - dart.notNull(this.weekNumberPanelWidth)) / viewCount;
      } else if (isVerticalMultiView) {
        webUIPadding = this[_multiViewSpacing$0];
        viewCount = 2;
        height = (dart.notNull(height) - dart.notNull(webUIPadding)) / viewCount;
      }
      let cellWidth = (width - dart.notNull(this.weekNumberPanelWidth)) / 7;
      let cellHeight = dart.notNull(height) / dart.notNull(this.rowCount);
      let datesCount = (dart.notNull(this[_visibleDates$0][$length]) / viewCount)[$truncate]();
      for (let j = 0; j < viewCount; j = j + 1) {
        let currentViewIndex = dart.test(this[_isRtl$0]) ? picker_helper.DateRangePickerHelper.getRtlIndex(viewCount, j) : j;
        left = dart.test(this[_isRtl$0]) ? width - cellWidth - dart.notNull(this.weekNumberPanelWidth) : this.weekNumberPanelWidth;
        top = 0.0;
        let middleDate = this[_visibleDates$0][$_get](j * datesCount + (datesCount / 2)[$truncate]());
        let viewXStartPosition = isVerticalMultiView ? this.weekNumberPanelWidth : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(this.weekNumberPanelWidth) * (dart.notNull(currentViewIndex) + 1);
        if (dart.test(this.isRtl)) {
          viewXStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(this.weekNumberPanelWidth) * dart.notNull(currentViewIndex);
        }
        let viewYStartPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(this[_multiViewSpacing$0]);
        for (let i = 0; i < datesCount; i = i + 1) {
          let currentDate = this[_visibleDates$0][$_get](j * datesCount + i);
          if (this.weekNumberPanelWidth !== 0 && dart.equals(dart.dload(currentDate, 'weekday'), 1)) {
            let xPosition = dart.test(this[_isRtl$0]) ? dart.notNull(size.width) - dart.notNull(left) - cellWidth : 0.0;
            if (isHorizontalMultiView || isVerticalMultiView) {
              xPosition = dart.test(this.isRtl) ? dart.notNull(size.width) - dart.notNull(this.weekNumberPanelWidth) : 0.0;
              xPosition = isHorizontalMultiView ? dart.notNull(viewXStartPosition) - dart.notNull(this.weekNumberPanelWidth) : xPosition;
            }
            let weekNumber = picker_helper.DateRangePickerHelper.getWeekNumberOfYear(currentDate, this.isHijri);
            semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(xPosition, top, this.weekNumberPanelWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: "week" + dart.toString(weekNumber), textDirection: ui.TextDirection.ltr})}));
          }
          if (!dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(middleDate, this[_rowCount$], this[_showLeadingAndTailingDates$], currentDate, this[_isHijri$0]))) {
            leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this[_isRtl$0], left, top, cellWidth, cellHeight, width);
            left = dart.nullCheck(leftAndTopValue[$_get]("left"));
            top = dart.nullCheck(leftAndTopValue[$_get]("top"));
            continue;
          } else if (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(this[_visibleDates$0], this[_blackoutDates$], currentDate))) {
            semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(dart.notNull(viewXStartPosition) + dart.notNull(left), viewYStartPosition + dart.notNull(top), cellWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: dart.notNull(this[_getSemanticMonthLabel](currentDate)) + ", Blackout date", textDirection: ui.TextDirection.ltr})}));
            leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this[_isRtl$0], left, top, cellWidth, cellHeight, width);
            left = dart.nullCheck(leftAndTopValue[$_get]("left"));
            top = dart.nullCheck(leftAndTopValue[$_get]("top"));
            continue;
          } else if (!dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this[_minDate$0], this[_maxDate$0], this[_enablePastDates$0], currentDate, this[_isHijri$0]))) {
            semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(dart.notNull(viewXStartPosition) + dart.notNull(left), viewYStartPosition + dart.notNull(top), cellWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: dart.notNull(this[_getSemanticMonthLabel](currentDate)) + ", Disabled date", textDirection: ui.TextDirection.ltr})}));
            leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this[_isRtl$0], left, top, cellWidth, cellHeight, width);
            left = dart.nullCheck(leftAndTopValue[$_get]("left"));
            top = dart.nullCheck(leftAndTopValue[$_get]("top"));
            continue;
          }
          semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(dart.notNull(viewXStartPosition) + dart.notNull(left), viewYStartPosition + dart.notNull(top), cellWidth, cellHeight), properties: new semantics$.SemanticsProperties.new({label: this[_getSemanticMonthLabel](currentDate), textDirection: ui.TextDirection.ltr})}));
          leftAndTopValue = picker_helper.DateRangePickerHelper.getTopAndLeftValues(this[_isRtl$0], left, top, cellWidth, cellHeight, width);
          left = dart.nullCheck(leftAndTopValue[$_get]("left"));
          top = dart.nullCheck(leftAndTopValue[$_get]("top"));
        }
      }
      return semanticsBuilder;
    }
    [_getSemanticMonthLabel](date) {
      if (dart.test(this[_isHijri$0])) {
        return dart.notNull(dart.toString(new date_format.DateFormat.new("EEE").format(core.DateTime.as(dart.dsend(date, 'toDateTime', []))))) + "," + dart.notNull(dart.toString(dart.dload(date, 'day'))) + "/" + dart.notNull(picker_helper.DateRangePickerHelper.getHijriMonthText(date, this.localizations, "MMMM")) + "/" + dart.notNull(dart.toString(dart.dload(date, 'year')));
      } else {
        return dart.toString(new date_format.DateFormat.new("EEE, dd/MMMM/yyyy").format(core.DateTime.as(date)));
      }
    }
  };
  (month_view._IMonthView.new = function(_visibleDates, _rowCount, _cellStyle, _selectionTextStyle, _rangeTextStyle, _selectionColor, _startRangeSelectionColor, _endRangeSelectionColor, _rangeSelectionColor, _datePickerTheme, _isRtl, _todayHighlightColor, _minDate, _maxDate, _enablePastDates, _showLeadingAndTailingDates, _blackoutDates, _specialDates, _weekendDays, _selectionShape, _selectionRadius, _mouseHoverPosition, _enableMultiView, _multiViewSpacing, selectionNotifier, _textScaleFactor, _height, _width, _isHijri, _navigationDirection, localizations, isMobilePlatform, _weekNumberStyle, _weekNumberPanelWidth) {
    if (_visibleDates == null) dart.nullFailed(I[2], 1573, 12, "_visibleDates");
    if (_rowCount == null) dart.nullFailed(I[2], 1574, 12, "_rowCount");
    if (_datePickerTheme == null) dart.nullFailed(I[2], 1582, 12, "_datePickerTheme");
    if (_isRtl == null) dart.nullFailed(I[2], 1583, 12, "_isRtl");
    if (_enablePastDates == null) dart.nullFailed(I[2], 1587, 12, "_enablePastDates");
    if (_showLeadingAndTailingDates == null) dart.nullFailed(I[2], 1588, 12, "_showLeadingAndTailingDates");
    if (_weekendDays == null) dart.nullFailed(I[2], 1591, 12, "_weekendDays");
    if (_selectionShape == null) dart.nullFailed(I[2], 1592, 12, "_selectionShape");
    if (_selectionRadius == null) dart.nullFailed(I[2], 1593, 12, "_selectionRadius");
    if (_mouseHoverPosition == null) dart.nullFailed(I[2], 1594, 12, "_mouseHoverPosition");
    if (_enableMultiView == null) dart.nullFailed(I[2], 1595, 12, "_enableMultiView");
    if (_multiViewSpacing == null) dart.nullFailed(I[2], 1596, 12, "_multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 1597, 12, "selectionNotifier");
    if (_textScaleFactor == null) dart.nullFailed(I[2], 1598, 12, "_textScaleFactor");
    if (_height == null) dart.nullFailed(I[2], 1599, 12, "_height");
    if (_width == null) dart.nullFailed(I[2], 1600, 12, "_width");
    if (_isHijri == null) dart.nullFailed(I[2], 1601, 12, "_isHijri");
    if (_navigationDirection == null) dart.nullFailed(I[2], 1602, 12, "_navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 1603, 12, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 1604, 12, "isMobilePlatform");
    if (_weekNumberStyle == null) dart.nullFailed(I[2], 1605, 12, "_weekNumberStyle");
    if (_weekNumberPanelWidth == null) dart.nullFailed(I[2], 1606, 12, "_weekNumberPanelWidth");
    this[_selectionPainter] = ui.Paint.new();
    this[_textPainter$] = new text_painter.TextPainter.new({textDirection: ui.TextDirection.ltr, textWidthBasis: text_painter.TextWidthBasis.longestLine});
    this[_cacheNodes$] = null;
    this[___IMonthView__cellWidth] = null;
    this[___IMonthView__cellHeight] = null;
    this[___IMonthView__centerXPosition] = null;
    this[___IMonthView__centerYPosition] = null;
    this[_visibleDates$0] = _visibleDates;
    this[_rowCount$] = _rowCount;
    this[_cellStyle$0] = _cellStyle;
    this[_selectionTextStyle$0] = _selectionTextStyle;
    this[_rangeTextStyle$0] = _rangeTextStyle;
    this[_selectionColor$0] = _selectionColor;
    this[_startRangeSelectionColor$0] = _startRangeSelectionColor;
    this[_endRangeSelectionColor$0] = _endRangeSelectionColor;
    this[_rangeSelectionColor$0] = _rangeSelectionColor;
    this[_datePickerTheme$0] = _datePickerTheme;
    this[_isRtl$0] = _isRtl;
    this[_todayHighlightColor$0] = _todayHighlightColor;
    this[_minDate$0] = _minDate;
    this[_maxDate$0] = _maxDate;
    this[_enablePastDates$0] = _enablePastDates;
    this[_showLeadingAndTailingDates$] = _showLeadingAndTailingDates;
    this[_blackoutDates$] = _blackoutDates;
    this[_specialDates$] = _specialDates;
    this[_weekendDays$] = _weekendDays;
    this[_selectionShape$0] = _selectionShape;
    this[_selectionRadius$0] = _selectionRadius;
    this[_mouseHoverPosition$0] = _mouseHoverPosition;
    this[_enableMultiView$0] = _enableMultiView;
    this[_multiViewSpacing$0] = _multiViewSpacing;
    this.selectionNotifier = selectionNotifier;
    this[_textScaleFactor$0] = _textScaleFactor;
    this[_height$0] = _height;
    this[_width$0] = _width;
    this[_isHijri$0] = _isHijri;
    this[_navigationDirection$0] = _navigationDirection;
    this.localizations = localizations;
    this.isMobilePlatform = isMobilePlatform;
    this[_weekNumberStyle$] = _weekNumberStyle;
    this[_weekNumberPanelWidth$] = _weekNumberPanelWidth;
    month_view._IMonthView.__proto__.new.call(this);
    ;
  }).prototype = month_view._IMonthView.prototype;
  dart.addTypeTests(month_view._IMonthView);
  dart.addTypeCaches(month_view._IMonthView);
  dart.setMethodSignature(month_view._IMonthView, () => ({
    __proto__: dart.getMethods(month_view._IMonthView.__proto__),
    [_getSemanticsBuilder$]: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size]),
    [_getSemanticMonthLabel]: dart.fnType(core.String, [dart.dynamic])
  }));
  dart.setGetterSignature(month_view._IMonthView, () => ({
    __proto__: dart.getGetters(month_view._IMonthView.__proto__),
    weekNumberStyle: date_picker_manager.DateRangePickerWeekNumberStyle,
    weekNumberPanelWidth: core.double,
    navigationDirection: date_picker_manager.DateRangePickerNavigationDirection,
    rowCount: core.int,
    visibleDates: core.List,
    cellStyle: dart.dynamic,
    isRtl: core.bool,
    todayHighlightColor: dart.nullable(ui.Color),
    datePickerTheme: daterangepicker_theme.SfDateRangePickerThemeData,
    minDate: dart.dynamic,
    maxDate: dart.dynamic,
    enablePastDates: core.bool,
    showLeadingAndTailingDates: core.bool,
    blackoutDates: dart.nullable(core.List),
    specialDates: dart.nullable(core.List),
    weekendDays: core.List$(core.int),
    selectionShape: date_picker_manager.DateRangePickerSelectionShape,
    selectionRadius: core.double,
    mouseHoverPosition: change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails)),
    enableMultiView: core.bool,
    multiViewSpacing: core.double,
    selectionTextStyle: dart.nullable(text_style.TextStyle),
    rangeTextStyle: dart.nullable(text_style.TextStyle),
    selectionColor: dart.nullable(ui.Color),
    startRangeSelectionColor: dart.nullable(ui.Color),
    endRangeSelectionColor: dart.nullable(ui.Color),
    rangeSelectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    height: core.double,
    width: core.double,
    isHijri: core.bool,
    [_cellWidth]: core.double,
    [_cellHeight]: core.double,
    [_centerXPosition]: core.double,
    [_centerYPosition]: core.double
  }));
  dart.setSetterSignature(month_view._IMonthView, () => ({
    __proto__: dart.getSetters(month_view._IMonthView.__proto__),
    weekNumberStyle: date_picker_manager.DateRangePickerWeekNumberStyle,
    weekNumberPanelWidth: core.double,
    navigationDirection: date_picker_manager.DateRangePickerNavigationDirection,
    rowCount: core.int,
    visibleDates: core.List,
    cellStyle: dart.dynamic,
    isRtl: core.bool,
    todayHighlightColor: dart.nullable(ui.Color),
    datePickerTheme: daterangepicker_theme.SfDateRangePickerThemeData,
    minDate: dart.dynamic,
    maxDate: dart.dynamic,
    enablePastDates: core.bool,
    showLeadingAndTailingDates: core.bool,
    blackoutDates: dart.nullable(core.List),
    specialDates: dart.nullable(core.List),
    weekendDays: core.List$(core.int),
    selectionShape: date_picker_manager.DateRangePickerSelectionShape,
    selectionRadius: core.double,
    mouseHoverPosition: change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails)),
    enableMultiView: core.bool,
    multiViewSpacing: core.double,
    selectionTextStyle: dart.nullable(text_style.TextStyle),
    rangeTextStyle: dart.nullable(text_style.TextStyle),
    selectionColor: dart.nullable(ui.Color),
    startRangeSelectionColor: dart.nullable(ui.Color),
    endRangeSelectionColor: dart.nullable(ui.Color),
    rangeSelectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    height: core.double,
    width: core.double,
    isHijri: core.bool,
    [_cellWidth]: core.double,
    [_cellHeight]: core.double,
    [_centerXPosition]: core.double,
    [_centerYPosition]: core.double
  }));
  dart.setLibraryUri(month_view._IMonthView, I[3]);
  dart.setFieldSignature(month_view._IMonthView, () => ({
    __proto__: dart.getFields(month_view._IMonthView.__proto__),
    isMobilePlatform: dart.fieldType(core.bool),
    [_weekNumberStyle$]: dart.fieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    [_weekNumberPanelWidth$]: dart.fieldType(core.double),
    [_navigationDirection$0]: dart.fieldType(date_picker_manager.DateRangePickerNavigationDirection),
    [_rowCount$]: dart.fieldType(core.int),
    [_visibleDates$0]: dart.fieldType(core.List),
    [_cellStyle$0]: dart.fieldType(dart.dynamic),
    [_isRtl$0]: dart.fieldType(core.bool),
    [_todayHighlightColor$0]: dart.fieldType(dart.nullable(ui.Color)),
    [_datePickerTheme$0]: dart.fieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    [_minDate$0]: dart.fieldType(dart.dynamic),
    [_maxDate$0]: dart.fieldType(dart.dynamic),
    [_enablePastDates$0]: dart.fieldType(core.bool),
    [_showLeadingAndTailingDates$]: dart.fieldType(core.bool),
    [_blackoutDates$]: dart.fieldType(dart.nullable(core.List)),
    [_specialDates$]: dart.fieldType(dart.nullable(core.List)),
    [_weekendDays$]: dart.fieldType(core.List$(core.int)),
    [_selectionShape$0]: dart.fieldType(date_picker_manager.DateRangePickerSelectionShape),
    [_selectionRadius$0]: dart.fieldType(core.double),
    selectionNotifier: dart.fieldType(change_notifier.ValueNotifier$(core.bool)),
    [_mouseHoverPosition$0]: dart.fieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    [_enableMultiView$0]: dart.fieldType(core.bool),
    [_multiViewSpacing$0]: dart.fieldType(core.double),
    [_selectionTextStyle$0]: dart.fieldType(dart.nullable(text_style.TextStyle)),
    [_rangeTextStyle$0]: dart.fieldType(dart.nullable(text_style.TextStyle)),
    [_selectionColor$0]: dart.fieldType(dart.nullable(ui.Color)),
    [_startRangeSelectionColor$0]: dart.fieldType(dart.nullable(ui.Color)),
    [_endRangeSelectionColor$0]: dart.fieldType(dart.nullable(ui.Color)),
    [_rangeSelectionColor$0]: dart.fieldType(dart.nullable(ui.Color)),
    [_textScaleFactor$0]: dart.fieldType(core.double),
    [_height$0]: dart.fieldType(core.double),
    [_width$0]: dart.fieldType(core.double),
    [_isHijri$0]: dart.fieldType(core.bool),
    localizations: dart.fieldType(global_localizations.SfLocalizations),
    [_selectionPainter]: dart.finalFieldType(ui.Paint),
    [_textPainter$]: dart.finalFieldType(text_painter.TextPainter),
    [_cacheNodes$]: dart.fieldType(dart.nullable(core.List$(semantics$.SemanticsNode))),
    [___IMonthView__cellWidth]: dart.fieldType(dart.nullable(core.double)),
    [___IMonthView__cellHeight]: dart.fieldType(dart.nullable(core.double)),
    [___IMonthView__centerXPosition]: dart.fieldType(dart.nullable(core.double)),
    [___IMonthView__centerYPosition]: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineLazy(month_view._IMonthView, {
    /*month_view._IMonthView._selectionPadding*/get _selectionPadding() {
      return 2;
    }
  }, false);
  month_view._MonthViewSingleSelectionRenderObject = class _MonthViewSingleSelectionRenderObject extends month_view._IMonthView {
    get selectedDate() {
      return this[_selectedDate$0];
    }
    set selectedDate(value) {
      if (dart.test(core$.isSameDate(this[_selectedDate$0], value))) {
        return;
      }
      this[_selectedDate$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 2552, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 2552, 46, "offset");
      this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth)) / 7;
      this[_cellHeight] = dart.notNull(this.size.height) / dart.notNull(this.rowCount);
      if (dart.test(this.enableMultiView)) {
        switch (this[_navigationDirection$0]) {
          case C[358] || CT.C358:
          {
            {
              this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this[_multiViewSpacing$0]) - dart.notNull(this.weekNumberPanelWidth) * 2) / (7 * 2);
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              this[_cellHeight] = (dart.notNull(this.size.height) - dart.notNull(this[_multiViewSpacing$0])) / (2 * dart.notNull(this.rowCount));
            }
          }
        }
      }
      this[_centerXPosition] = dart.notNull(this[_cellWidth]) / 2;
      this[_centerYPosition] = dart.notNull(this[_cellHeight]) / 2;
      month_view._drawMonthCellsAndSelection(context, this.size, this, this[_cellWidth], this[_cellHeight]);
    }
    drawSelection(canvas, x, y, index, selectionTextStyle, selectionRangeTextStyle) {
      if (canvas == null) dart.nullFailed(I[2], 2577, 34, "canvas");
      if (x == null) dart.nullFailed(I[2], 2577, 49, "x");
      if (y == null) dart.nullFailed(I[2], 2577, 59, "y");
      if (index == null) dart.nullFailed(I[2], 2577, 66, "index");
      if (selectionTextStyle == null) dart.nullFailed(I[2], 2578, 17, "selectionTextStyle");
      if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 2578, 47, "selectionRangeTextStyle");
      this[_selectionPainter].isAntiAlias = true;
      switch (this.selectionShape) {
        case C[172] || CT.C172:
        {
          {
            let radius = month_view._getCellRadius(this.selectionRadius, this[_centerXPosition], this[_centerYPosition]);
            month_view._drawCircleSelection(canvas, dart.notNull(x) + dart.notNull(this[_centerXPosition]), dart.notNull(y) + dart.notNull(this[_centerYPosition]), radius, this[_selectionPainter]);
          }
          break;
        }
        case C[171] || CT.C171:
        {
          {
            month_view._drawFillSelection(canvas, x, y, this[_cellWidth], this[_cellHeight], this[_selectionPainter]);
          }
        }
      }
      return selectionTextStyle;
    }
    drawCustomCellSelection(canvas, x, y, index) {
      let t11;
      if (canvas == null) dart.nullFailed(I[2], 2600, 39, "canvas");
      if (x == null) dart.nullFailed(I[2], 2600, 54, "x");
      if (y == null) dart.nullFailed(I[2], 2600, 64, "y");
      if (index == null) dart.nullFailed(I[2], 2600, 71, "index");
      this[_selectionPainter].color = (t11 = this.selectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t11);
      this[_selectionPainter].strokeWidth = 0.0;
      this[_selectionPainter].style = ui.PaintingStyle.fill;
      this[_selectionPainter].isAntiAlias = true;
      canvas.drawRect(new ui.Rect.fromLTRB(x, y, dart.notNull(x) + dart.notNull(this[_cellWidth]), dart.notNull(y) + dart.notNull(this[_cellHeight])), this[_selectionPainter]);
    }
    getSelectedIndexValues(viewStartIndex, viewEndIndex) {
      if (viewStartIndex == null) dart.nullFailed(I[2], 2610, 40, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[2], 2610, 60, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      if (this.selectedDate != null) {
        if (dart.test(core$.isDateWithInDateRange(this.visibleDates[$_get](viewStartIndex), this.visibleDates[$_get](viewEndIndex), this.selectedDate))) {
          let index = month_view._getSelectedIndex(this.selectedDate, this.visibleDates, {viewStartIndex: viewStartIndex});
          selectedIndex[$add](index);
        }
      }
      return selectedIndex;
    }
    updateSelection(details) {
      if (details == null) dart.nullFailed(I[2], 2625, 40, "details");
      if (dart.test(core$.isSameDate(details.selectedDate, this.selectedDate))) {
        return;
      }
      this.selectedDate = details.selectedDate;
      this.selectionNotifier.value = !dart.test(this.selectionNotifier.value);
    }
  };
  (month_view._MonthViewSingleSelectionRenderObject.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, _selectedDate, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth) {
    if (visibleDates == null) dart.nullFailed(I[2], 2463, 21, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 2464, 11, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 2472, 34, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 2473, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 2477, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 2478, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 2481, 17, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 2482, 37, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 2483, 14, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 2484, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 2485, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 2486, 14, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 2487, 27, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 2488, 14, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 2489, 14, "height");
    if (width == null) dart.nullFailed(I[2], 2490, 14, "width");
    if (isHijri == null) dart.nullFailed(I[2], 2491, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[2], 2492, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 2493, 23, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 2495, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 2496, 38, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 2497, 14, "weekNumberPanelWidth");
    this[_selectedDate$0] = _selectedDate;
    month_view._MonthViewSingleSelectionRenderObject.__proto__.new.call(this, visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth);
    ;
  }).prototype = month_view._MonthViewSingleSelectionRenderObject.prototype;
  dart.addTypeTests(month_view._MonthViewSingleSelectionRenderObject);
  dart.addTypeCaches(month_view._MonthViewSingleSelectionRenderObject);
  dart.setMethodSignature(month_view._MonthViewSingleSelectionRenderObject, () => ({
    __proto__: dart.getMethods(month_view._MonthViewSingleSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(text_style.TextStyle, [ui.Canvas, core.double, core.double, core.int, text_style.TextStyle, text_style.TextStyle]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int]),
    getSelectedIndexValues: dart.fnType(core.List$(core.int), [core.int, core.int]),
    updateSelection: dart.fnType(dart.void, [picker_helper.PickerStateArgs])
  }));
  dart.setGetterSignature(month_view._MonthViewSingleSelectionRenderObject, () => ({
    __proto__: dart.getGetters(month_view._MonthViewSingleSelectionRenderObject.__proto__),
    selectedDate: dart.dynamic
  }));
  dart.setSetterSignature(month_view._MonthViewSingleSelectionRenderObject, () => ({
    __proto__: dart.getSetters(month_view._MonthViewSingleSelectionRenderObject.__proto__),
    selectedDate: dart.dynamic
  }));
  dart.setLibraryUri(month_view._MonthViewSingleSelectionRenderObject, I[3]);
  dart.setFieldSignature(month_view._MonthViewSingleSelectionRenderObject, () => ({
    __proto__: dart.getFields(month_view._MonthViewSingleSelectionRenderObject.__proto__),
    [_selectedDate$0]: dart.fieldType(dart.dynamic)
  }));
  month_view._MonthViewMultiSelectionRenderObject = class _MonthViewMultiSelectionRenderObject extends month_view._IMonthView {
    get selectedDates() {
      return this[_selectedDates$0];
    }
    set selectedDates(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$0], value))) {
        return;
      }
      this[_selectedDates$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    drawSelection(canvas, x, y, index, selectionTextStyle, selectionRangeTextStyle) {
      if (canvas == null) dart.nullFailed(I[2], 2726, 34, "canvas");
      if (x == null) dart.nullFailed(I[2], 2726, 49, "x");
      if (y == null) dart.nullFailed(I[2], 2726, 59, "y");
      if (index == null) dart.nullFailed(I[2], 2726, 66, "index");
      if (selectionTextStyle == null) dart.nullFailed(I[2], 2727, 17, "selectionTextStyle");
      if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 2727, 47, "selectionRangeTextStyle");
      this[_selectionPainter].isAntiAlias = true;
      switch (this.selectionShape) {
        case C[172] || CT.C172:
        {
          {
            let radius = month_view._getCellRadius(this.selectionRadius, this[_centerXPosition], this[_centerYPosition]);
            month_view._drawCircleSelection(canvas, dart.notNull(x) + dart.notNull(this[_centerXPosition]), dart.notNull(y) + dart.notNull(this[_centerYPosition]), radius, this[_selectionPainter]);
          }
          break;
        }
        case C[171] || CT.C171:
        {
          {
            month_view._drawFillSelection(canvas, x, y, this[_cellWidth], this[_cellHeight], this[_selectionPainter]);
          }
        }
      }
      return selectionTextStyle;
    }
    drawCustomCellSelection(canvas, x, y, index) {
      let t11;
      if (canvas == null) dart.nullFailed(I[2], 2749, 39, "canvas");
      if (x == null) dart.nullFailed(I[2], 2749, 54, "x");
      if (y == null) dart.nullFailed(I[2], 2749, 64, "y");
      if (index == null) dart.nullFailed(I[2], 2749, 71, "index");
      this[_selectionPainter].color = (t11 = this.selectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.selectionColor) : t11);
      this[_selectionPainter].strokeWidth = 0.0;
      this[_selectionPainter].style = ui.PaintingStyle.fill;
      this[_selectionPainter].isAntiAlias = true;
      canvas.drawRect(new ui.Rect.fromLTRB(x, y, dart.notNull(x) + dart.notNull(this[_cellWidth]), dart.notNull(y) + dart.notNull(this[_cellHeight])), this[_selectionPainter]);
    }
    getSelectedIndexValues(viewStartIndex, viewEndIndex) {
      if (viewStartIndex == null) dart.nullFailed(I[2], 2759, 40, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[2], 2759, 60, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      if (this.selectedDates != null) {
        for (let j = 0; j < dart.notNull(dart.nullCheck(this.selectedDates)[$length]); j = j + 1) {
          let date = dart.nullCheck(this.selectedDates)[$_get](j);
          if (!dart.test(core$.isDateWithInDateRange(this.visibleDates[$_get](viewStartIndex), this.visibleDates[$_get](viewEndIndex), date))) {
            continue;
          }
          selectedIndex[$add](month_view._getSelectedIndex(date, this.visibleDates, {viewStartIndex: viewStartIndex}));
        }
      }
      return selectedIndex;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 2778, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 2778, 46, "offset");
      this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth)) / 7;
      this[_cellHeight] = dart.notNull(this.size.height) / dart.notNull(this.rowCount);
      if (dart.test(this.enableMultiView)) {
        switch (this[_navigationDirection$0]) {
          case C[358] || CT.C358:
          {
            {
              this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this[_multiViewSpacing$0]) - dart.notNull(this.weekNumberPanelWidth) * 2) / (7 * 2);
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              this[_cellHeight] = (dart.notNull(this.size.height) - dart.notNull(this[_multiViewSpacing$0])) / (2 * dart.notNull(this.rowCount));
            }
          }
        }
      }
      this[_centerXPosition] = dart.notNull(this[_cellWidth]) / 2;
      this[_centerYPosition] = dart.notNull(this[_cellHeight]) / 2;
      month_view._drawMonthCellsAndSelection(context, this.size, this, this[_cellWidth], this[_cellHeight]);
    }
    updateSelection(details) {
      if (details == null) dart.nullFailed(I[2], 2803, 40, "details");
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(details.selectedDates, this.selectedDates))) {
        return;
      }
      this.selectedDates = picker_helper.DateRangePickerHelper.cloneList(details.selectedDates);
      this.selectionNotifier.value = !dart.test(this.selectionNotifier.value);
    }
  };
  (month_view._MonthViewMultiSelectionRenderObject.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, _selectedDates, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth) {
    if (visibleDates == null) dart.nullFailed(I[2], 2637, 21, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 2638, 11, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 2646, 34, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 2647, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 2651, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 2652, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 2655, 17, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 2656, 37, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 2657, 14, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 2658, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 2659, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 2660, 14, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 2661, 27, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 2662, 14, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 2663, 14, "height");
    if (width == null) dart.nullFailed(I[2], 2664, 14, "width");
    if (isHijri == null) dart.nullFailed(I[2], 2665, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[2], 2666, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 2667, 23, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 2669, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 2670, 38, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 2671, 14, "weekNumberPanelWidth");
    this[_selectedDates$0] = _selectedDates;
    month_view._MonthViewMultiSelectionRenderObject.__proto__.new.call(this, visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth);
    ;
  }).prototype = month_view._MonthViewMultiSelectionRenderObject.prototype;
  dart.addTypeTests(month_view._MonthViewMultiSelectionRenderObject);
  dart.addTypeCaches(month_view._MonthViewMultiSelectionRenderObject);
  dart.setMethodSignature(month_view._MonthViewMultiSelectionRenderObject, () => ({
    __proto__: dart.getMethods(month_view._MonthViewMultiSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(text_style.TextStyle, [ui.Canvas, core.double, core.double, core.int, text_style.TextStyle, text_style.TextStyle]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int]),
    getSelectedIndexValues: dart.fnType(core.List$(core.int), [core.int, core.int]),
    updateSelection: dart.fnType(dart.void, [picker_helper.PickerStateArgs])
  }));
  dart.setGetterSignature(month_view._MonthViewMultiSelectionRenderObject, () => ({
    __proto__: dart.getGetters(month_view._MonthViewMultiSelectionRenderObject.__proto__),
    selectedDates: dart.nullable(core.List)
  }));
  dart.setSetterSignature(month_view._MonthViewMultiSelectionRenderObject, () => ({
    __proto__: dart.getSetters(month_view._MonthViewMultiSelectionRenderObject.__proto__),
    selectedDates: dart.nullable(core.List)
  }));
  dart.setLibraryUri(month_view._MonthViewMultiSelectionRenderObject, I[3]);
  dart.setFieldSignature(month_view._MonthViewMultiSelectionRenderObject, () => ({
    __proto__: dart.getFields(month_view._MonthViewMultiSelectionRenderObject.__proto__),
    [_selectedDates$0]: dart.fieldType(dart.nullable(core.List))
  }));
  var _selectedIndex$ = dart.privateName(month_view, "_selectedIndex");
  var _getSelectedRangePosition$ = dart.privateName(month_view, "_getSelectedRangePosition");
  month_view._MonthViewRangeSelectionRenderObject = class _MonthViewRangeSelectionRenderObject extends month_view._IMonthView {
    get selectedRange() {
      return this[_selectedRange$0];
    }
    set selectedRange(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$0], value))) {
        return;
      }
      this[_selectedRange$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    drawSelection(canvas, x, y, index, selectionTextStyle, selectionRangeTextStyle) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 2907, 34, "canvas");
      if (x == null) dart.nullFailed(I[2], 2907, 49, "x");
      if (y == null) dart.nullFailed(I[2], 2907, 59, "y");
      if (index == null) dart.nullFailed(I[2], 2907, 66, "index");
      if (selectionTextStyle == null) dart.nullFailed(I[2], 2908, 17, "selectionTextStyle");
      if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 2908, 47, "selectionRangeTextStyle");
      let selectionDetails = this[_getSelectedRangePosition$](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let radius = month_view._getCellRadius(this.selectionRadius, this[_centerXPosition], this[_centerYPosition]);
      let heightDifference = dart.notNull(this[_cellHeight]) / 2 - dart.notNull(radius);
      if (dart.test(isSelectedDate)) {
        month_view._drawSelectedDate(canvas, radius, this[_centerXPosition], this[_cellWidth], this[_cellHeight], x, y, this, this[_centerYPosition]);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11 = this.rangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$), heightDifference, isStartRange);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.rangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$0);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$1 = this.endRangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$1), heightDifference, isStartRange);
      } else if (dart.test(isBetweenRange)) {
        return month_view._drawBetweenSelection(canvas, this, this[_cellWidth], this[_cellHeight], radius, x, y, heightDifference, selectionRangeTextStyle);
      }
      return selectionTextStyle;
    }
    drawCustomCellSelection(canvas, x, y, index) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 2962, 39, "canvas");
      if (x == null) dart.nullFailed(I[2], 2962, 54, "x");
      if (y == null) dart.nullFailed(I[2], 2962, 64, "y");
      if (index == null) dart.nullFailed(I[2], 2962, 71, "index");
      this[_selectionPainter].strokeWidth = 0.0;
      this[_selectionPainter].style = ui.PaintingStyle.fill;
      this[_selectionPainter].isAntiAlias = true;
      let selectionDetails = this[_getSelectedRangePosition$](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_selectionPainter].color = (t11 = this.startRangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.endRangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$0);
      } else if (dart.test(isBetweenRange)) {
        this[_selectionPainter].color = (t11$1 = this.rangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$1);
      }
      canvas.drawRect(new ui.Rect.fromLTRB(x, y, dart.notNull(x) + dart.notNull(this[_cellWidth]), dart.notNull(y) + dart.notNull(this[_cellHeight])), this[_selectionPainter]);
    }
    [_getSelectedRangePosition$](index) {
      if (index == null) dart.nullFailed(I[2], 2989, 44, "index");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      if (this[_selectedIndex$][$length] === 1) {
        isSelectedDate = true;
      } else if (this[_selectedIndex$][$_get](0) == index) {
        if (dart.test(this.isRtl)) {
          isEndRange = true;
        } else {
          isStartRange = true;
        }
      } else if (this[_selectedIndex$][$_get](dart.notNull(this[_selectedIndex$][$length]) - 1) == index) {
        if (dart.test(this.isRtl)) {
          isStartRange = true;
        } else {
          isEndRange = true;
        }
      } else {
        isBetweenRange = true;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndexValues(viewStartIndex, viewEndIndex) {
      let t11;
      if (viewStartIndex == null) dart.nullFailed(I[2], 3030, 40, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[2], 3030, 60, "viewEndIndex");
      this[_selectedIndex$] = T.JSArrayOfint().of([]);
      if (this.selectedRange != null) {
        let startDate = dart.dload(this.selectedRange, 'startDate');
        let endDate = (t11 = dart.dload(this.selectedRange, 'endDate'), t11 == null ? dart.dload(this.selectedRange, 'startDate') : t11);
        this[_selectedIndex$] = month_view._getSelectedRangeIndex(startDate, endDate, this.visibleDates, {monthStartIndex: viewStartIndex, monthEndIndex: viewEndIndex});
      }
      return this[_selectedIndex$];
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 3043, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 3043, 46, "offset");
      this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth)) / 7;
      this[_cellHeight] = dart.notNull(this.size.height) / dart.notNull(this.rowCount);
      if (dart.test(this.enableMultiView)) {
        switch (this[_navigationDirection$0]) {
          case C[358] || CT.C358:
          {
            {
              this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this[_multiViewSpacing$0]) - dart.notNull(this.weekNumberPanelWidth) * 2) / (7 * 2);
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              this[_cellHeight] = (dart.notNull(this.size.height) - dart.notNull(this[_multiViewSpacing$0])) / (2 * dart.notNull(this.rowCount));
            }
          }
        }
      }
      this[_centerXPosition] = dart.notNull(this[_cellWidth]) / 2;
      this[_centerYPosition] = dart.notNull(this[_cellHeight]) / 2;
      month_view._drawMonthCellsAndSelection(context, this.size, this, this[_cellWidth], this[_cellHeight]);
    }
    updateSelection(details) {
      if (details == null) dart.nullFailed(I[2], 3068, 40, "details");
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(details.selectedRange, this.selectedRange))) {
        return;
      }
      this.selectedRange = details.selectedRange;
      this.selectionNotifier.value = !dart.test(this.selectionNotifier.value);
    }
  };
  (month_view._MonthViewRangeSelectionRenderObject.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, _selectedRange, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth) {
    if (visibleDates == null) dart.nullFailed(I[2], 2816, 21, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 2817, 11, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 2825, 34, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 2826, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 2830, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 2831, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 2834, 17, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 2835, 37, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 2836, 14, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 2837, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 2838, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 2839, 14, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 2840, 27, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 2841, 14, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 2842, 14, "height");
    if (width == null) dart.nullFailed(I[2], 2843, 14, "width");
    if (isHijri == null) dart.nullFailed(I[2], 2844, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[2], 2845, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 2846, 23, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 2848, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 2849, 38, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 2850, 14, "weekNumberPanelWidth");
    this[_selectedIndex$] = T.JSArrayOfint().of([]);
    this[_selectedRange$0] = _selectedRange;
    month_view._MonthViewRangeSelectionRenderObject.__proto__.new.call(this, visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth);
    ;
  }).prototype = month_view._MonthViewRangeSelectionRenderObject.prototype;
  dart.addTypeTests(month_view._MonthViewRangeSelectionRenderObject);
  dart.addTypeCaches(month_view._MonthViewRangeSelectionRenderObject);
  dart.setMethodSignature(month_view._MonthViewRangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(month_view._MonthViewRangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(text_style.TextStyle, [ui.Canvas, core.double, core.double, core.int, text_style.TextStyle, text_style.TextStyle]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int]),
    [_getSelectedRangePosition$]: dart.fnType(core.List$(core.bool), [core.int]),
    getSelectedIndexValues: dart.fnType(core.List$(core.int), [core.int, core.int]),
    updateSelection: dart.fnType(dart.void, [picker_helper.PickerStateArgs])
  }));
  dart.setGetterSignature(month_view._MonthViewRangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(month_view._MonthViewRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setSetterSignature(month_view._MonthViewRangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(month_view._MonthViewRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setLibraryUri(month_view._MonthViewRangeSelectionRenderObject, I[3]);
  dart.setFieldSignature(month_view._MonthViewRangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(month_view._MonthViewRangeSelectionRenderObject.__proto__),
    [_selectedRange$0]: dart.fieldType(dart.dynamic),
    [_selectedIndex$]: dart.fieldType(core.List$(core.int))
  }));
  month_view._MonthViewExtendableRangeSelectionRenderObject = class _MonthViewExtendableRangeSelectionRenderObject extends month_view._IMonthView {
    get selectedRange() {
      return this[_selectedRange$0];
    }
    set selectedRange(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$0], value))) {
        return;
      }
      this[_selectedRange$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    drawSelection(canvas, x, y, index, selectionTextStyle, selectionRangeTextStyle) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 3172, 34, "canvas");
      if (x == null) dart.nullFailed(I[2], 3172, 49, "x");
      if (y == null) dart.nullFailed(I[2], 3172, 59, "y");
      if (index == null) dart.nullFailed(I[2], 3172, 66, "index");
      if (selectionTextStyle == null) dart.nullFailed(I[2], 3173, 17, "selectionTextStyle");
      if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 3173, 47, "selectionRangeTextStyle");
      let selectionDetails = this[_getSelectedRangePosition$](index, this[_selectedIndex$]);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let radius = month_view._getCellRadius(this.selectionRadius, this[_centerXPosition], this[_centerYPosition]);
      let heightDifference = dart.notNull(this[_cellHeight]) / 2 - dart.notNull(radius);
      if (dart.test(isSelectedDate)) {
        month_view._drawSelectedDate(canvas, radius, this[_centerXPosition], this[_cellWidth], this[_cellHeight], x, y, this, this[_centerYPosition]);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11 = this.rangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$), heightDifference, isStartRange);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.rangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$0);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$1 = this.endRangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$1), heightDifference, isStartRange);
      } else if (dart.test(isBetweenRange)) {
        return month_view._drawBetweenSelection(canvas, this, this[_cellWidth], this[_cellHeight], radius, x, y, heightDifference, selectionRangeTextStyle);
      }
      return selectionTextStyle;
    }
    drawCustomCellSelection(canvas, x, y, index) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 3228, 39, "canvas");
      if (x == null) dart.nullFailed(I[2], 3228, 54, "x");
      if (y == null) dart.nullFailed(I[2], 3228, 64, "y");
      if (index == null) dart.nullFailed(I[2], 3228, 71, "index");
      this[_selectionPainter].strokeWidth = 0.0;
      this[_selectionPainter].style = ui.PaintingStyle.fill;
      this[_selectionPainter].isAntiAlias = true;
      let selectionDetails = this[_getSelectedRangePosition$](index, this[_selectedIndex$]);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_selectionPainter].color = (t11 = this.startRangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.endRangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$0);
      } else if (dart.test(isBetweenRange)) {
        this[_selectionPainter].color = (t11$1 = this.rangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$1);
      }
      canvas.drawRect(new ui.Rect.fromLTRB(x, y, dart.notNull(x) + dart.notNull(this[_cellWidth]), dart.notNull(y) + dart.notNull(this[_cellHeight])), this[_selectionPainter]);
    }
    [_getSelectedRangePosition$](index, indexList) {
      if (index == null) dart.nullFailed(I[2], 3256, 44, "index");
      if (indexList == null) dart.nullFailed(I[2], 3256, 61, "indexList");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      if (indexList[$length] === 1) {
        isSelectedDate = true;
      } else if (indexList[$_get](0) == index) {
        if (dart.test(this.isRtl)) {
          isEndRange = true;
        } else {
          isStartRange = true;
        }
      } else if (indexList[$_get](dart.notNull(indexList[$length]) - 1) == index) {
        if (dart.test(this.isRtl)) {
          isStartRange = true;
        } else {
          isEndRange = true;
        }
      } else {
        isBetweenRange = true;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndexValues(viewStartIndex, viewEndIndex) {
      let t11;
      if (viewStartIndex == null) dart.nullFailed(I[2], 3297, 40, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[2], 3297, 60, "viewEndIndex");
      this[_selectedIndex$] = T.JSArrayOfint().of([]);
      if (this.selectedRange != null) {
        let startDate = dart.dload(this.selectedRange, 'startDate');
        let endDate = (t11 = dart.dload(this.selectedRange, 'endDate'), t11 == null ? dart.dload(this.selectedRange, 'startDate') : t11);
        this[_selectedIndex$] = month_view._getSelectedRangeIndex(startDate, endDate, this.visibleDates, {monthStartIndex: viewStartIndex, monthEndIndex: viewEndIndex});
      }
      return this[_selectedIndex$];
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 3310, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 3310, 46, "offset");
      this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth)) / 7;
      this[_cellHeight] = dart.notNull(this.size.height) / dart.notNull(this.rowCount);
      if (dart.test(this.enableMultiView)) {
        switch (this[_navigationDirection$0]) {
          case C[358] || CT.C358:
          {
            {
              this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this[_multiViewSpacing$0]) - dart.notNull(this.weekNumberPanelWidth) * 2) / (7 * 2);
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              this[_cellHeight] = (dart.notNull(this.size.height) - dart.notNull(this[_multiViewSpacing$0])) / (2 * dart.notNull(this.rowCount));
            }
          }
        }
      }
      this[_centerXPosition] = dart.notNull(this[_cellWidth]) / 2;
      this[_centerYPosition] = dart.notNull(this[_cellHeight]) / 2;
      month_view._drawMonthCellsAndSelection(context, this.size, this, this[_cellWidth], this[_cellHeight]);
    }
    updateSelection(details) {
      if (details == null) dart.nullFailed(I[2], 3335, 40, "details");
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(details.selectedRange, this.selectedRange))) {
        return;
      }
      this.selectedRange = details.selectedRange;
      this.selectionNotifier.value = !dart.test(this.selectionNotifier.value);
    }
  };
  (month_view._MonthViewExtendableRangeSelectionRenderObject.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, _selectedRange, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth) {
    if (visibleDates == null) dart.nullFailed(I[2], 3081, 21, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 3082, 11, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 3090, 34, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 3091, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 3095, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 3096, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 3099, 17, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 3100, 37, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 3101, 14, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 3102, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 3103, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 3104, 14, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 3105, 27, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 3106, 14, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 3107, 14, "height");
    if (width == null) dart.nullFailed(I[2], 3108, 14, "width");
    if (isHijri == null) dart.nullFailed(I[2], 3109, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[2], 3110, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 3111, 23, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 3113, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 3114, 38, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 3115, 14, "weekNumberPanelWidth");
    this[_selectedIndex$] = T.JSArrayOfint().of([]);
    this[_selectedRange$0] = _selectedRange;
    month_view._MonthViewExtendableRangeSelectionRenderObject.__proto__.new.call(this, visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth);
    ;
  }).prototype = month_view._MonthViewExtendableRangeSelectionRenderObject.prototype;
  dart.addTypeTests(month_view._MonthViewExtendableRangeSelectionRenderObject);
  dart.addTypeCaches(month_view._MonthViewExtendableRangeSelectionRenderObject);
  dart.setMethodSignature(month_view._MonthViewExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(month_view._MonthViewExtendableRangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(text_style.TextStyle, [ui.Canvas, core.double, core.double, core.int, text_style.TextStyle, text_style.TextStyle]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int]),
    [_getSelectedRangePosition$]: dart.fnType(core.List$(core.bool), [core.int, core.List$(core.int)]),
    getSelectedIndexValues: dart.fnType(core.List$(core.int), [core.int, core.int]),
    updateSelection: dart.fnType(dart.void, [picker_helper.PickerStateArgs])
  }));
  dart.setGetterSignature(month_view._MonthViewExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(month_view._MonthViewExtendableRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setSetterSignature(month_view._MonthViewExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(month_view._MonthViewExtendableRangeSelectionRenderObject.__proto__),
    selectedRange: dart.dynamic
  }));
  dart.setLibraryUri(month_view._MonthViewExtendableRangeSelectionRenderObject, I[3]);
  dart.setFieldSignature(month_view._MonthViewExtendableRangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(month_view._MonthViewExtendableRangeSelectionRenderObject.__proto__),
    [_selectedRange$0]: dart.fieldType(dart.dynamic),
    [_selectedIndex$]: dart.fieldType(core.List$(core.int))
  }));
  var _selectedRangesIndex = dart.privateName(month_view, "_selectedRangesIndex");
  month_view._MonthViewMultiRangeSelectionRenderObject = class _MonthViewMultiRangeSelectionRenderObject extends month_view._IMonthView {
    get selectedRanges() {
      return this[_selectedRanges$0];
    }
    set selectedRanges(value) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$0], value))) {
        return;
      }
      this[_selectedRanges$0] = value;
      if (this.childCount === 0) {
        this.markNeedsPaint();
      } else {
        this.markNeedsLayout();
      }
    }
    drawSelection(canvas, x, y, index, selectionTextStyle, selectionRangeTextStyle) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 3439, 34, "canvas");
      if (x == null) dart.nullFailed(I[2], 3439, 49, "x");
      if (y == null) dart.nullFailed(I[2], 3439, 59, "y");
      if (index == null) dart.nullFailed(I[2], 3439, 66, "index");
      if (selectionTextStyle == null) dart.nullFailed(I[2], 3440, 17, "selectionTextStyle");
      if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 3440, 47, "selectionRangeTextStyle");
      let selectionDetails = this[_getSelectedRangePosition$](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      let radius = month_view._getCellRadius(this.selectionRadius, this[_centerXPosition], this[_centerYPosition]);
      let heightDifference = dart.notNull(this[_cellHeight]) / 2 - dart.notNull(radius);
      if (dart.test(isSelectedDate)) {
        month_view._drawSelectedDate(canvas, radius, this[_centerXPosition], this[_cellWidth], this[_cellHeight], x, y, this, this[_centerYPosition]);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11 = this.rangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$), heightDifference, isStartRange);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.rangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$0);
        month_view._drawStartAndEndRange(canvas, this, this[_cellHeight], this[_cellWidth], radius, this[_centerXPosition], this[_centerYPosition], x, y, (t11$1 = this.endRangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$1), heightDifference, isStartRange);
      } else if (dart.test(isBetweenRange)) {
        return month_view._drawBetweenSelection(canvas, this, this[_cellWidth], this[_cellHeight], radius, x, y, heightDifference, selectionRangeTextStyle);
      }
      return selectionTextStyle;
    }
    drawCustomCellSelection(canvas, x, y, index) {
      let t11, t11$, t11$0, t11$1;
      if (canvas == null) dart.nullFailed(I[2], 3494, 39, "canvas");
      if (x == null) dart.nullFailed(I[2], 3494, 54, "x");
      if (y == null) dart.nullFailed(I[2], 3494, 64, "y");
      if (index == null) dart.nullFailed(I[2], 3494, 71, "index");
      this[_selectionPainter].strokeWidth = 0.0;
      this[_selectionPainter].style = ui.PaintingStyle.fill;
      this[_selectionPainter].isAntiAlias = true;
      let selectionDetails = this[_getSelectedRangePosition$](index);
      let isSelectedDate = selectionDetails[$_get](0);
      let isStartRange = selectionDetails[$_get](1);
      let isEndRange = selectionDetails[$_get](2);
      let isBetweenRange = selectionDetails[$_get](3);
      if (dart.test(isSelectedDate)) {
        this[_selectionPainter].color = (t11 = this.startRangeSelectionColor, t11 == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11);
      } else if (dart.test(isStartRange)) {
        this[_selectionPainter].color = (t11$ = this.startRangeSelectionColor, t11$ == null ? dart.nullCheck(this.datePickerTheme.startRangeSelectionColor) : t11$);
      } else if (dart.test(isEndRange)) {
        this[_selectionPainter].color = (t11$0 = this.endRangeSelectionColor, t11$0 == null ? dart.nullCheck(this.datePickerTheme.endRangeSelectionColor) : t11$0);
      } else if (dart.test(isBetweenRange)) {
        this[_selectionPainter].color = (t11$1 = this.rangeSelectionColor, t11$1 == null ? dart.nullCheck(this.datePickerTheme.rangeSelectionColor) : t11$1);
      }
      canvas.drawRect(new ui.Rect.fromLTRB(x, y, dart.notNull(x) + dart.notNull(this[_cellWidth]), dart.notNull(y) + dart.notNull(this[_cellHeight])), this[_selectionPainter]);
    }
    [_getSelectedRangePosition$](index) {
      if (index == null) dart.nullFailed(I[2], 3521, 44, "index");
      let isSelectedDate = false;
      let isStartRange = false;
      let isEndRange = false;
      let isBetweenRange = false;
      for (let j = 0; j < dart.notNull(this[_selectedRangesIndex][$length]); j = j + 1) {
        let rangeIndex = this[_selectedRangesIndex][$_get](j);
        if (!dart.test(rangeIndex[$contains](index))) {
          continue;
        }
        if (rangeIndex[$length] === 1) {
          isSelectedDate = true;
        } else if (rangeIndex[$_get](0) == index) {
          if (dart.test(this.isRtl)) {
            isEndRange = true;
          } else {
            isStartRange = true;
          }
        } else if (rangeIndex[$_get](dart.notNull(rangeIndex[$length]) - 1) == index) {
          if (dart.test(this.isRtl)) {
            isStartRange = true;
          } else {
            isEndRange = true;
          }
        } else {
          isBetweenRange = true;
        }
        break;
      }
      return T.JSArrayOfbool().of([isSelectedDate, isStartRange, isEndRange, isBetweenRange]);
    }
    getSelectedIndexValues(viewStartIndex, viewEndIndex) {
      let t11;
      if (viewStartIndex == null) dart.nullFailed(I[2], 3571, 40, "viewStartIndex");
      if (viewEndIndex == null) dart.nullFailed(I[2], 3571, 60, "viewEndIndex");
      let selectedIndex = T.JSArrayOfint().of([]);
      this[_selectedRangesIndex] = T.JSArrayOfListOfint().of([]);
      if (this.selectedRanges != null) {
        for (let j = 0; j < dart.notNull(dart.nullCheck(this.selectedRanges)[$length]); j = j + 1) {
          let range = dart.nullCheck(this.selectedRanges)[$_get](j);
          let startDate = dart.dload(range, 'startDate');
          let endDate = (t11 = dart.dload(range, 'endDate'), t11 == null ? dart.dload(range, 'startDate') : t11);
          let rangeIndex = month_view._getSelectedRangeIndex(startDate, endDate, this.visibleDates, {monthStartIndex: viewStartIndex, monthEndIndex: viewEndIndex});
          for (let i = 0; i < dart.notNull(rangeIndex[$length]); i = i + 1) {
            selectedIndex[$add](rangeIndex[$_get](i));
          }
          this[_selectedRangesIndex][$add](rangeIndex);
        }
      }
      return selectedIndex;
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[2], 3594, 30, "context");
      if (offset == null) dart.nullFailed(I[2], 3594, 46, "offset");
      this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this.weekNumberPanelWidth)) / 7;
      this[_cellHeight] = dart.notNull(this.size.height) / dart.notNull(this.rowCount);
      if (dart.test(this.enableMultiView)) {
        switch (this[_navigationDirection$0]) {
          case C[358] || CT.C358:
          {
            {
              this[_cellWidth] = (dart.notNull(this.size.width) - dart.notNull(this[_multiViewSpacing$0]) - dart.notNull(this.weekNumberPanelWidth) * 2) / (7 * 2);
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              this[_cellHeight] = (dart.notNull(this.size.height) - dart.notNull(this[_multiViewSpacing$0])) / (2 * dart.notNull(this.rowCount));
            }
          }
        }
      }
      this[_centerXPosition] = dart.notNull(this[_cellWidth]) / 2;
      this[_centerYPosition] = dart.notNull(this[_cellHeight]) / 2;
      month_view._drawMonthCellsAndSelection(context, this.size, this, this[_cellWidth], this[_cellHeight]);
    }
    updateSelection(details) {
      if (details == null) dart.nullFailed(I[2], 3619, 40, "details");
      if (dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(details.selectedRanges, this.selectedRanges))) {
        return;
      }
      this.selectedRanges = picker_helper.DateRangePickerHelper.cloneList(details.selectedRanges);
      this.selectionNotifier.value = !dart.test(this.selectionNotifier.value);
    }
  };
  (month_view._MonthViewMultiRangeSelectionRenderObject.new = function(visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, _selectedRanges, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth) {
    if (visibleDates == null) dart.nullFailed(I[2], 3348, 21, "visibleDates");
    if (rowCount == null) dart.nullFailed(I[2], 3349, 11, "rowCount");
    if (datePickerTheme == null) dart.nullFailed(I[2], 3357, 34, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[2], 3358, 12, "isRtl");
    if (enablePastDates == null) dart.nullFailed(I[2], 3362, 12, "enablePastDates");
    if (showLeadingAndTailingDates == null) dart.nullFailed(I[2], 3363, 12, "showLeadingAndTailingDates");
    if (weekendDays == null) dart.nullFailed(I[2], 3366, 17, "weekendDays");
    if (selectionShape == null) dart.nullFailed(I[2], 3367, 37, "selectionShape");
    if (selectionRadius == null) dart.nullFailed(I[2], 3368, 14, "selectionRadius");
    if (mouseHoverPosition == null) dart.nullFailed(I[2], 3369, 39, "mouseHoverPosition");
    if (enableMultiView == null) dart.nullFailed(I[2], 3370, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[2], 3371, 14, "multiViewSpacing");
    if (selectionNotifier == null) dart.nullFailed(I[2], 3372, 27, "selectionNotifier");
    if (textScaleFactor == null) dart.nullFailed(I[2], 3373, 14, "textScaleFactor");
    if (height == null) dart.nullFailed(I[2], 3374, 14, "height");
    if (width == null) dart.nullFailed(I[2], 3375, 14, "width");
    if (isHijri == null) dart.nullFailed(I[2], 3376, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[2], 3377, 42, "navigationDirection");
    if (localizations == null) dart.nullFailed(I[2], 3378, 23, "localizations");
    if (isMobilePlatform == null) dart.nullFailed(I[2], 3380, 12, "isMobilePlatform");
    if (weekNumberStyle == null) dart.nullFailed(I[2], 3381, 38, "weekNumberStyle");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 3382, 14, "weekNumberPanelWidth");
    this[_selectedRangesIndex] = T.JSArrayOfListOfint().of([]);
    this[_selectedRanges$0] = _selectedRanges;
    month_view._MonthViewMultiRangeSelectionRenderObject.__proto__.new.call(this, visibleDates, rowCount, cellStyle, selectionTextStyle, rangeTextStyle, selectionColor, startRangeSelectionColor, endRangeSelectionColor, rangeSelectionColor, datePickerTheme, isRtl, todayHighlightColor, minDate, maxDate, enablePastDates, showLeadingAndTailingDates, blackoutDates, specialDates, weekendDays, selectionShape, selectionRadius, mouseHoverPosition, enableMultiView, multiViewSpacing, selectionNotifier, textScaleFactor, height, width, isHijri, navigationDirection, localizations, isMobilePlatform, weekNumberStyle, weekNumberPanelWidth);
    ;
  }).prototype = month_view._MonthViewMultiRangeSelectionRenderObject.prototype;
  dart.addTypeTests(month_view._MonthViewMultiRangeSelectionRenderObject);
  dart.addTypeCaches(month_view._MonthViewMultiRangeSelectionRenderObject);
  dart.setMethodSignature(month_view._MonthViewMultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getMethods(month_view._MonthViewMultiRangeSelectionRenderObject.__proto__),
    drawSelection: dart.fnType(text_style.TextStyle, [ui.Canvas, core.double, core.double, core.int, text_style.TextStyle, text_style.TextStyle]),
    drawCustomCellSelection: dart.fnType(dart.void, [ui.Canvas, core.double, core.double, core.int]),
    [_getSelectedRangePosition$]: dart.fnType(core.List$(core.bool), [core.int]),
    getSelectedIndexValues: dart.fnType(core.List$(core.int), [core.int, core.int]),
    updateSelection: dart.fnType(dart.void, [picker_helper.PickerStateArgs])
  }));
  dart.setGetterSignature(month_view._MonthViewMultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getGetters(month_view._MonthViewMultiRangeSelectionRenderObject.__proto__),
    selectedRanges: dart.nullable(core.List)
  }));
  dart.setSetterSignature(month_view._MonthViewMultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getSetters(month_view._MonthViewMultiRangeSelectionRenderObject.__proto__),
    selectedRanges: dart.nullable(core.List)
  }));
  dart.setLibraryUri(month_view._MonthViewMultiRangeSelectionRenderObject, I[3]);
  dart.setFieldSignature(month_view._MonthViewMultiRangeSelectionRenderObject, () => ({
    __proto__: dart.getFields(month_view._MonthViewMultiRangeSelectionRenderObject.__proto__),
    [_selectedRanges$0]: dart.fieldType(dart.nullable(core.List)),
    [_selectedRangesIndex]: dart.fieldType(core.List$(core.List$(core.int)))
  }));
  month_view._drawSelectedDate = function _drawSelectedDate(canvas, radius, centerXPosition, cellWidth, cellHeight, x, y, view, centerYPosition) {
    let t11;
    if (canvas == null) dart.nullFailed(I[2], 3631, 12, "canvas");
    if (radius == null) dart.nullFailed(I[2], 3632, 12, "radius");
    if (centerXPosition == null) dart.nullFailed(I[2], 3633, 12, "centerXPosition");
    if (cellWidth == null) dart.nullFailed(I[2], 3634, 12, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 3635, 12, "cellHeight");
    if (x == null) dart.nullFailed(I[2], 3636, 12, "x");
    if (y == null) dart.nullFailed(I[2], 3637, 12, "y");
    if (view == null) dart.nullFailed(I[2], 3638, 17, "view");
    if (centerYPosition == null) dart.nullFailed(I[2], 3639, 12, "centerYPosition");
    view[_selectionPainter].isAntiAlias = true;
    view[_selectionPainter].color = (t11 = view.startRangeSelectionColor, t11 == null ? dart.nullCheck(view.datePickerTheme.startRangeSelectionColor) : t11);
    switch (view.selectionShape) {
      case C[172] || CT.C172:
      {
        {
          month_view._drawCircleSelection(canvas, dart.notNull(x) + dart.notNull(centerXPosition), dart.notNull(y) + dart.notNull(centerYPosition), radius, view[_selectionPainter]);
        }
        break;
      }
      case C[171] || CT.C171:
      {
        {
          month_view._drawFillSelection(canvas, x, y, cellWidth, cellHeight, view[_selectionPainter]);
        }
      }
    }
  };
  month_view._drawStartAndEndRange = function _drawStartAndEndRange(canvas, view, cellHeight, cellWidth, radius, centerXPosition, centerYPosition, x, y, color, heightDifference, isStartRange) {
    if (canvas == null) dart.nullFailed(I[2], 3659, 12, "canvas");
    if (view == null) dart.nullFailed(I[2], 3660, 17, "view");
    if (cellHeight == null) dart.nullFailed(I[2], 3661, 12, "cellHeight");
    if (cellWidth == null) dart.nullFailed(I[2], 3662, 12, "cellWidth");
    if (radius == null) dart.nullFailed(I[2], 3663, 12, "radius");
    if (centerXPosition == null) dart.nullFailed(I[2], 3664, 12, "centerXPosition");
    if (centerYPosition == null) dart.nullFailed(I[2], 3665, 12, "centerYPosition");
    if (x == null) dart.nullFailed(I[2], 3666, 12, "x");
    if (y == null) dart.nullFailed(I[2], 3667, 12, "y");
    if (color == null) dart.nullFailed(I[2], 3668, 11, "color");
    if (heightDifference == null) dart.nullFailed(I[2], 3669, 12, "heightDifference");
    if (isStartRange == null) dart.nullFailed(I[2], 3670, 10, "isStartRange");
    switch (view.selectionShape) {
      case C[172] || CT.C172:
      {
        {
          let rect = null;
          if (dart.test(isStartRange)) {
            rect = new ui.Rect.fromLTRB(dart.notNull(x) + dart.notNull(centerXPosition), dart.notNull(y) + dart.notNull(heightDifference), dart.notNull(x) + dart.notNull(cellWidth), dart.notNull(y) + dart.notNull(cellHeight) - dart.notNull(heightDifference));
          } else {
            rect = new ui.Rect.fromLTRB(x, dart.notNull(y) + dart.notNull(heightDifference), dart.notNull(x) + dart.notNull(centerXPosition), dart.notNull(y) + dart.notNull(cellHeight) - dart.notNull(heightDifference));
          }
          month_view._drawStartEndRangeCircleSelection(canvas, dart.notNull(x) + dart.notNull(centerXPosition), dart.notNull(y) + dart.notNull(centerYPosition), radius, rect, view[_selectionPainter], color);
        }
        break;
      }
      case C[171] || CT.C171:
      {
        {
          view[_selectionPainter].isAntiAlias = true;
          view[_selectionPainter].color = color;
          if (dart.test(isStartRange)) {
            month_view._drawStartRangeFillSelection(canvas, x, y, cellWidth, cellHeight, view[_selectionPainter]);
          } else {
            month_view._drawEndRangeFillSelection(canvas, x, y, cellWidth, cellHeight, view[_selectionPainter]);
          }
        }
      }
    }
  };
  month_view._drawBetweenSelection = function _drawBetweenSelection(canvas, view, cellWidth, cellHeight, radius, x, y, heightDifference, selectionRangeTextStyle) {
    let t11;
    if (canvas == null) dart.nullFailed(I[2], 3703, 12, "canvas");
    if (view == null) dart.nullFailed(I[2], 3704, 17, "view");
    if (cellWidth == null) dart.nullFailed(I[2], 3705, 12, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 3706, 12, "cellHeight");
    if (radius == null) dart.nullFailed(I[2], 3707, 12, "radius");
    if (x == null) dart.nullFailed(I[2], 3708, 12, "x");
    if (y == null) dart.nullFailed(I[2], 3709, 12, "y");
    if (heightDifference == null) dart.nullFailed(I[2], 3710, 12, "heightDifference");
    if (selectionRangeTextStyle == null) dart.nullFailed(I[2], 3711, 15, "selectionRangeTextStyle");
    switch (view.selectionShape) {
      case C[171] || CT.C171:
      {
        heightDifference = 1.0;
        break;
      }
      case C[172] || CT.C172:
      {
        break;
      }
    }
    view[_selectionPainter].color = (t11 = view.rangeSelectionColor, t11 == null ? dart.nullCheck(view.datePickerTheme.rangeSelectionColor) : t11);
    month_view._drawRectRangeSelection(canvas, x, dart.notNull(y) + dart.notNull(heightDifference), dart.notNull(x) + dart.notNull(cellWidth), dart.notNull(y) + dart.notNull(cellHeight) - dart.notNull(heightDifference), view[_selectionPainter]);
    return selectionRangeTextStyle;
  };
  month_view._getCellRadius = function _getCellRadius(selectionRadius, maxXRadius, maxYRadius) {
    if (selectionRadius == null) dart.nullFailed(I[2], 3728, 12, "selectionRadius");
    if (maxXRadius == null) dart.nullFailed(I[2], 3728, 36, "maxXRadius");
    if (maxYRadius == null) dart.nullFailed(I[2], 3728, 55, "maxYRadius");
    let radius = dart.notNull(maxXRadius) > dart.notNull(maxYRadius) ? dart.notNull(maxYRadius) - 2 : dart.notNull(maxXRadius) - 2;
    if (selectionRadius === -1) {
      return radius;
    }
    return radius > dart.notNull(selectionRadius) ? selectionRadius : radius;
  };
  month_view._getSelectedRangeIndex = function _getSelectedRangeIndex(startDate, endDate, visibleDates, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 3741, 55, "visibleDates");
    let monthStartIndex = opts && 'monthStartIndex' in opts ? opts.monthStartIndex : -1;
    if (monthStartIndex == null) dart.nullFailed(I[2], 3742, 10, "monthStartIndex");
    let monthEndIndex = opts && 'monthEndIndex' in opts ? opts.monthEndIndex : -1;
    if (monthEndIndex == null) dart.nullFailed(I[2], 3742, 36, "monthEndIndex");
    let startIndex = -1;
    let endIndex = -1;
    let selectedIndex = T.JSArrayOfint().of([]);
    if (startDate != null && dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
      let temp = startDate;
      startDate = endDate;
      endDate = temp;
    }
    let viewStartDate = monthStartIndex !== -1 ? visibleDates[$_get](monthStartIndex) : visibleDates[$_get](0);
    let viewEndDate = monthEndIndex !== -1 ? visibleDates[$_get](monthEndIndex) : visibleDates[$_get](dart.notNull(visibleDates[$length]) - 1);
    if (startDate != null) {
      if (dart.equals(dart.dsend(viewStartDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(viewStartDate, 'isBefore', [endDate]), true)) {
        startIndex = -1;
      } else {
        startIndex = month_view._getSelectedIndex(startDate, visibleDates, {viewStartIndex: monthStartIndex});
      }
    }
    if (endDate != null) {
      if (dart.equals(dart.dsend(viewEndDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(viewEndDate, 'isBefore', [endDate]), true)) {
        endIndex = visibleDates[$length];
      } else {
        endIndex = month_view._getSelectedIndex(endDate, visibleDates, {viewStartIndex: monthStartIndex});
      }
    }
    if (startIndex !== -1 && endIndex === -1) {
      endIndex = startIndex;
    }
    if (dart.notNull(startIndex) > dart.notNull(endIndex)) {
      let temp = startIndex;
      startIndex = endIndex;
      endIndex = temp;
    }
    for (let i = startIndex; dart.notNull(i) <= dart.notNull(endIndex); i = dart.notNull(i) + 1) {
      selectedIndex[$add](i);
    }
    return selectedIndex;
  };
  month_view._getSelectedIndex = function _getSelectedIndex(date, visibleDates, opts) {
    if (visibleDates == null) dart.nullFailed(I[2], 3795, 51, "visibleDates");
    let viewStartIndex = opts && 'viewStartIndex' in opts ? opts.viewStartIndex : 0;
    if (viewStartIndex == null) dart.nullFailed(I[2], 3796, 10, "viewStartIndex");
    if (viewStartIndex === -1) {
      viewStartIndex = 0;
    }
    for (let i = viewStartIndex; dart.notNull(i) < dart.notNull(visibleDates[$length]); i = dart.notNull(i) + 1) {
      if (dart.test(core$.isSameDate(visibleDates[$_get](i), date))) {
        return i;
      }
    }
    return -1;
  };
  month_view._drawCircleSelection = function _drawCircleSelection(canvas, x, y, radius, selectionPainter) {
    if (canvas == null) dart.nullFailed(I[2], 3811, 12, "canvas");
    if (x == null) dart.nullFailed(I[2], 3811, 27, "x");
    if (y == null) dart.nullFailed(I[2], 3811, 37, "y");
    if (radius == null) dart.nullFailed(I[2], 3811, 47, "radius");
    if (selectionPainter == null) dart.nullFailed(I[2], 3811, 61, "selectionPainter");
    canvas.drawCircle(new ui.Offset.new(x, y), radius, selectionPainter);
  };
  month_view._drawFillSelection = function _drawFillSelection(canvas, x, y, width, height, selectionPainter) {
    if (canvas == null) dart.nullFailed(I[2], 3815, 32, "canvas");
    if (x == null) dart.nullFailed(I[2], 3815, 47, "x");
    if (y == null) dart.nullFailed(I[2], 3815, 57, "y");
    if (width == null) dart.nullFailed(I[2], 3815, 67, "width");
    if (height == null) dart.nullFailed(I[2], 3816, 12, "height");
    if (selectionPainter == null) dart.nullFailed(I[2], 3816, 26, "selectionPainter");
    canvas.drawRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTRB(dart.notNull(x) + 1, dart.notNull(y) + 1, dart.notNull(x) + dart.notNull(width) - 1, dart.notNull(y) + dart.notNull(height) - 1), new ui.Radius.circular(dart.notNull(height) / 4 > 10 ? 10.0 : dart.notNull(height) / 4)), selectionPainter);
  };
  month_view._drawStartRangeFillSelection = function _drawStartRangeFillSelection(canvas, x, y, width, height, selectionPainter) {
    if (canvas == null) dart.nullFailed(I[2], 3826, 42, "canvas");
    if (x == null) dart.nullFailed(I[2], 3826, 57, "x");
    if (y == null) dart.nullFailed(I[2], 3826, 67, "y");
    if (width == null) dart.nullFailed(I[2], 3827, 12, "width");
    if (height == null) dart.nullFailed(I[2], 3827, 26, "height");
    if (selectionPainter == null) dart.nullFailed(I[2], 3827, 40, "selectionPainter");
    let cornerRadius = dart.notNull(height) / 4 > 10 ? 10.0 : dart.notNull(height) / 4;
    canvas.drawRRect(new ui.RRect.fromRectAndCorners(new ui.Rect.fromLTRB(dart.notNull(x) + 1, dart.notNull(y) + 1, dart.notNull(x) + dart.notNull(width), dart.notNull(y) + dart.notNull(height) - 1), {bottomLeft: new ui.Radius.circular(cornerRadius), topLeft: new ui.Radius.circular(cornerRadius)}), selectionPainter);
  };
  month_view._drawEndRangeFillSelection = function _drawEndRangeFillSelection(canvas, x, y, width, height, selectionPainter) {
    if (canvas == null) dart.nullFailed(I[2], 3839, 40, "canvas");
    if (x == null) dart.nullFailed(I[2], 3839, 55, "x");
    if (y == null) dart.nullFailed(I[2], 3839, 65, "y");
    if (width == null) dart.nullFailed(I[2], 3839, 75, "width");
    if (height == null) dart.nullFailed(I[2], 3840, 12, "height");
    if (selectionPainter == null) dart.nullFailed(I[2], 3840, 26, "selectionPainter");
    let cornerRadius = dart.notNull(height) / 4 > 10 ? 10.0 : dart.notNull(height) / 4;
    canvas.drawRRect(new ui.RRect.fromRectAndCorners(new ui.Rect.fromLTRB(x, dart.notNull(y) + 1, dart.notNull(x) + dart.notNull(width) - 1, dart.notNull(y) + dart.notNull(height) - 1), {bottomRight: new ui.Radius.circular(cornerRadius), topRight: new ui.Radius.circular(cornerRadius)}), selectionPainter);
  };
  month_view._drawStartEndRangeCircleSelection = function _drawStartEndRangeCircleSelection(canvas, x, y, radius, rect, selectionPainter, color) {
    if (canvas == null) dart.nullFailed(I[2], 3852, 47, "canvas");
    if (x == null) dart.nullFailed(I[2], 3852, 62, "x");
    if (y == null) dart.nullFailed(I[2], 3852, 72, "y");
    if (radius == null) dart.nullFailed(I[2], 3853, 12, "radius");
    if (rect == null) dart.nullFailed(I[2], 3853, 25, "rect");
    if (selectionPainter == null) dart.nullFailed(I[2], 3853, 37, "selectionPainter");
    if (color == null) dart.nullFailed(I[2], 3853, 61, "color");
    canvas.drawRect(rect, selectionPainter);
    selectionPainter.isAntiAlias = true;
    selectionPainter.color = color;
    canvas.drawCircle(new ui.Offset.new(x, y), radius, selectionPainter);
  };
  month_view._drawRectRangeSelection = function _drawRectRangeSelection(canvas, left, top, right, bottom, selectionPainter) {
    if (canvas == null) dart.nullFailed(I[2], 3860, 37, "canvas");
    if (left == null) dart.nullFailed(I[2], 3860, 52, "left");
    if (top == null) dart.nullFailed(I[2], 3860, 65, "top");
    if (right == null) dart.nullFailed(I[2], 3861, 12, "right");
    if (bottom == null) dart.nullFailed(I[2], 3861, 26, "bottom");
    if (selectionPainter == null) dart.nullFailed(I[2], 3861, 40, "selectionPainter");
    canvas.drawRect(new ui.Rect.fromLTRB(left, top, right, bottom), selectionPainter);
  };
  month_view._drawMonthCellsAndSelection = function _drawMonthCellsAndSelection(context, size, monthView, cellWidth, cellHeight) {
    let t11, t11$, t11$0;
    if (context == null) dart.nullFailed(I[2], 3865, 50, "context");
    if (size == null) dart.nullFailed(I[2], 3865, 64, "size");
    if (monthView == null) dart.nullFailed(I[2], 3866, 17, "monthView");
    if (cellWidth == null) dart.nullFailed(I[2], 3866, 35, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 3866, 53, "cellHeight");
    let weekNumberPanelWidth = monthView.weekNumberPanelWidth;
    let canvas = context.canvas;
    let xPosition = dart.test(monthView[_isRtl$0]) ? 0.0 : weekNumberPanelWidth;
    let yPosition = null;
    let webUIPadding = 0.0;
    let width = dart.notNull(size.width) - dart.notNull(weekNumberPanelWidth);
    let height = size.height;
    let viewCount = 1;
    let isHorizontalMultiView = dart.test(monthView.enableMultiView) && monthView.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
    let isVerticalMultiView = dart.test(monthView.enableMultiView) && monthView.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical;
    if (isHorizontalMultiView) {
      webUIPadding = monthView.multiViewSpacing;
      viewCount = 2;
      width = (width - dart.notNull(webUIPadding) - dart.notNull(weekNumberPanelWidth)) / viewCount;
    } else if (isVerticalMultiView) {
      webUIPadding = monthView.multiViewSpacing;
      viewCount = 2;
      height = (dart.notNull(height) - dart.notNull(webUIPadding)) / viewCount;
    }
    monthView[_textPainter$].textScaleFactor = monthView.textScaleFactor;
    let textStyle = (t11 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'textStyle')), t11 == null ? monthView.datePickerTheme.activeDatesTextStyle : t11);
    let datesCount = (dart.notNull(monthView.visibleDates[$length]) / viewCount)[$truncate]();
    let isNeedWidgetPaint = monthView.childCount !== 0;
    let hideLeadingAndTrailingDates = monthView.rowCount === 6 && !dart.test(monthView.showLeadingAndTailingDates) || dart.test(monthView.isHijri);
    if (isNeedWidgetPaint) {
      let child = monthView.firstChild;
      if (!isHorizontalMultiView) {
        month_view._drawWeekNumberPanel(canvas, size, weekNumberPanelWidth, monthView, isHorizontalMultiView);
      }
      for (let j = 0; j < viewCount; j = j + 1) {
        let currentViewIndex = dart.test(monthView.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(viewCount, j) : j;
        let currentMonth = core.int.as(dart.dload(monthView.visibleDates[$_get]((j * datesCount + datesCount / 2)[$truncate]()), 'month'));
        let viewStartIndex = j * datesCount;
        let viewEndIndex = (j + 1) * datesCount - 1;
        let selectedIndex = monthView.getSelectedIndexValues(viewStartIndex, viewEndIndex);
        let viewStartPosition = isVerticalMultiView ? weekNumberPanelWidth : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(weekNumberPanelWidth) * (dart.notNull(currentViewIndex) + 1);
        if (dart.test(monthView.isRtl)) {
          viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(weekNumberPanelWidth) * dart.notNull(currentViewIndex);
        }
        let viewEndPosition = dart.notNull(viewStartPosition) + width;
        xPosition = viewStartPosition;
        yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
        if (isHorizontalMultiView) {
          month_view._drawWeekNumberPanel(canvas, size, weekNumberPanelWidth, monthView, isHorizontalMultiView, {viewStartPosition: dart.test(monthView.isRtl) ? viewEndPosition + dart.notNull(weekNumberPanelWidth) + j * dart.notNull(webUIPadding) : viewStartPosition});
        }
        for (let i = 0; i < datesCount; i = i + 1) {
          let currentIndex = i;
          if (dart.test(monthView.isRtl)) {
            let rowIndex = (i / 7)[$truncate]();
            currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(7, i[$modulo](7))) + rowIndex * 7;
          }
          currentIndex = j * datesCount + currentIndex;
          let date = monthView.visibleDates[$_get](currentIndex);
          let currentDateMonth = core.int.as(dart.dload(date, 'month'));
          if (dart.notNull(xPosition) + 1 >= viewEndPosition) {
            xPosition = viewStartPosition;
            yPosition = dart.notNull(yPosition) + dart.notNull(cellHeight);
          }
          if (weekNumberPanelWidth !== 0 && hideLeadingAndTrailingDates && (i <= 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewStartIndex + 7), 'month'), currentMonth) || i > 7 && i <= 7 * 2 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewStartIndex + 7 * 2), 'month'), currentMonth) || i >= datesCount - 7 * 2 && i < datesCount - 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewEndIndex - (7 * 2 - 1)), 'month'), currentMonth) || i >= datesCount - 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewEndIndex - (7 - 1)), 'month'), currentMonth)) && dart.equals(dart.dload(date, 'weekday'), 1)) {
            month_view._drawWeekNumber(canvas, size, date, cellHeight, yPosition, weekNumberPanelWidth, monthView, viewStartPosition, viewEndPosition);
          }
          if (hideLeadingAndTrailingDates && currentDateMonth != currentMonth) {
            xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
            continue;
          }
          let isEnableDate = picker_helper.DateRangePickerHelper.isEnabledDate(monthView.minDate, monthView.maxDate, monthView.enablePastDates, date, monthView.isHijri);
          let isBlackedDate = picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(monthView.visibleDates, monthView.blackoutDates, date);
          let isSelectedDate = selectedIndex[$contains](currentIndex);
          if (dart.test(isSelectedDate) && !dart.test(isBlackedDate) && dart.test(isEnableDate) && (!dart.test(monthView.enableMultiView) || monthView.rowCount !== 6 || currentMonth == currentDateMonth)) {
            monthView.drawCustomCellSelection(canvas, xPosition, yPosition, currentIndex);
          }
          dart.nullCheck(child).paint(context, new ui.Offset.new(xPosition, yPosition));
          child = monthView.childAfter(child);
          if (weekNumberPanelWidth !== 0 && dart.equals(dart.dload(date, 'weekday'), 1) && (!hideLeadingAndTrailingDates || hideLeadingAndTrailingDates && i > 7 * 2 && i < datesCount - 7 * 2)) {
            month_view._drawWeekNumber(canvas, size, date, cellHeight, yPosition, weekNumberPanelWidth, monthView, viewStartPosition, viewEndPosition);
          }
          if (monthView.mouseHoverPosition.value != null && dart.nullCheck(monthView.mouseHoverPosition.value).offset != null) {
            if (dart.test(isSelectedDate) || dart.test(isBlackedDate) || !dart.test(isEnableDate)) {
              xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
              continue;
            }
            if (dart.notNull(xPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dx) && dart.notNull(xPosition) + dart.notNull(cellWidth) >= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dx) && dart.notNull(yPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dy) && dart.notNull(yPosition) + dart.notNull(cellHeight) >= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dy)) {
              monthView[_selectionPainter].style = ui.PaintingStyle.fill;
              monthView[_selectionPainter].strokeWidth = 2.0;
              monthView[_selectionPainter].color = monthView.selectionColor != null ? dart.nullCheck(monthView.selectionColor).withOpacity(0.4) : dart.nullCheck(monthView.datePickerTheme.selectionColor).withOpacity(0.4);
              canvas.drawRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTWH(xPosition, yPosition, cellWidth, cellHeight), C[173] || CT.C173), monthView[_selectionPainter]);
            }
          }
          xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
        }
      }
      return;
    }
    let today = picker_helper.DateRangePickerHelper.getToday(monthView.isHijri);
    if (!isHorizontalMultiView) {
      month_view._drawWeekNumberPanel(canvas, size, weekNumberPanelWidth, monthView, isHorizontalMultiView);
    }
    for (let j = 0; j < viewCount; j = j + 1) {
      let currentViewIndex = dart.test(monthView.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(viewCount, j) : j;
      let currentMonthDate = monthView.visibleDates[$_get]((j * datesCount + datesCount / 2)[$truncate]());
      let nextMonth = core.int.as(dart.dload(core$.getNextMonthDate(currentMonthDate), 'month'));
      let previousMonth = core.int.as(dart.dload(core$.getPreviousMonthDate(currentMonthDate), 'month'));
      let isCurrentDate = null;
      let selectionTextStyle = (t11$ = monthView.selectionTextStyle, t11$ == null ? monthView.datePickerTheme.selectionTextStyle : t11$);
      let selectedRangeTextStyle = (t11$0 = monthView.rangeTextStyle, t11$0 == null ? monthView.datePickerTheme.rangeSelectionTextStyle : t11$0);
      let dateDecoration = null;
      let viewStartIndex = j * datesCount;
      let viewEndIndex = (j + 1) * datesCount - 1;
      let selectedIndex = monthView.getSelectedIndexValues(viewStartIndex, viewEndIndex);
      let viewStartPosition = isVerticalMultiView ? weekNumberPanelWidth : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(weekNumberPanelWidth) * (dart.notNull(currentViewIndex) + 1);
      if (dart.test(monthView.isRtl)) {
        viewStartPosition = isVerticalMultiView ? 0.0 : dart.notNull(currentViewIndex) * width + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding) + dart.notNull(weekNumberPanelWidth) * dart.notNull(currentViewIndex);
      }
      let hoveringIndex = null;
      if (monthView.mouseHoverPosition.value != null && dart.nullCheck(monthView.mouseHoverPosition.value).hoveringRange != null) {
        hoveringIndex = month_view._getSelectedRangeIndex(dart.dload(dart.nullCheck(monthView.mouseHoverPosition.value).hoveringRange, 'startDate'), dart.dload(dart.nullCheck(monthView.mouseHoverPosition.value).hoveringRange, 'endDate'), monthView.visibleDates, {monthStartIndex: viewStartIndex, monthEndIndex: viewEndIndex});
      }
      let viewEndPosition = dart.notNull(viewStartPosition) + width;
      xPosition = viewStartPosition;
      yPosition = isHorizontalMultiView ? 0.0 : dart.notNull(currentViewIndex) * dart.notNull(height) + dart.notNull(currentViewIndex) * dart.notNull(webUIPadding);
      if (isHorizontalMultiView) {
        month_view._drawWeekNumberPanel(canvas, size, weekNumberPanelWidth, monthView, isHorizontalMultiView, {viewStartPosition: dart.test(monthView.isRtl) ? viewEndPosition + dart.notNull(weekNumberPanelWidth) + j * dart.notNull(webUIPadding) : viewStartPosition});
      }
      for (let i = 0; i < datesCount; i = i + 1) {
        let currentIndex = i;
        if (dart.test(monthView.isRtl)) {
          let rowIndex = (i / 7)[$truncate]();
          currentIndex = dart.notNull(picker_helper.DateRangePickerHelper.getRtlIndex(7, i[$modulo](7))) + rowIndex * 7;
        }
        isCurrentDate = false;
        currentIndex = j * datesCount + currentIndex;
        let date = monthView.visibleDates[$_get](currentIndex);
        let currentDateMonth = core.int.as(dart.dload(date, 'month'));
        if (dart.notNull(xPosition) + 1 >= viewEndPosition) {
          xPosition = viewStartPosition;
          yPosition = dart.notNull(yPosition) + dart.notNull(cellHeight);
        }
        if (weekNumberPanelWidth !== 0 && hideLeadingAndTrailingDates && (i <= 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewStartIndex + 7), 'month'), dart.dload(currentMonthDate, 'month')) || i > 7 && i <= 7 * 2 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewStartIndex + 7 * 2), 'month'), dart.dload(currentMonthDate, 'month')) || i >= datesCount - 7 * 2 && i < datesCount - 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewEndIndex - (7 * 2 - 1)), 'month'), dart.dload(currentMonthDate, 'month')) || i >= datesCount - 7 && dart.equals(dart.dload(monthView.visibleDates[$_get](viewEndIndex - (7 - 1)), 'month'), dart.dload(currentMonthDate, 'month'))) && dart.equals(dart.dload(date, 'weekday'), 1)) {
          month_view._drawWeekNumber(canvas, size, date, cellHeight, yPosition, weekNumberPanelWidth, monthView, viewStartPosition, viewEndPosition);
        }
        let isNextMonth = false;
        let isPreviousMonth = false;
        if (monthView.rowCount === 6 || dart.test(monthView.isHijri)) {
          if (currentDateMonth == nextMonth) {
            if (!dart.test(monthView.showLeadingAndTailingDates) || dart.test(monthView.isHijri)) {
              xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
              continue;
            }
            isNextMonth = true;
          } else if (currentDateMonth == previousMonth) {
            if (!dart.test(monthView.showLeadingAndTailingDates) || dart.test(monthView.isHijri)) {
              xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
              continue;
            }
            isPreviousMonth = true;
          }
        }
        if (weekNumberPanelWidth !== 0 && dart.equals(dart.dload(date, 'weekday'), 1) && (!hideLeadingAndTrailingDates || hideLeadingAndTrailingDates && i > 7 * 2 && i < datesCount - 7 * 2)) {
          month_view._drawWeekNumber(canvas, size, date, cellHeight, yPosition, weekNumberPanelWidth, monthView, viewStartPosition, viewEndPosition);
        }
        isCurrentDate = core$.isSameDate(date, today);
        let isEnableDate = picker_helper.DateRangePickerHelper.isEnabledDate(monthView.minDate, monthView.maxDate, monthView.enablePastDates, date, monthView.isHijri);
        let isBlackedDate = picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(monthView.visibleDates, monthView.blackoutDates, date);
        let isWeekEnd = picker_helper.DateRangePickerHelper.isWeekend(monthView.weekendDays, date);
        let isSpecialDate = picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(monthView.visibleDates, monthView.specialDates, date);
        textStyle = month_view._updateTextStyle(monthView, isNextMonth, isPreviousMonth, isCurrentDate, isEnableDate, isBlackedDate, isWeekEnd, isSpecialDate);
        dateDecoration = month_view._updateDecoration(isNextMonth, isPreviousMonth, monthView, isEnableDate, isCurrentDate, isBlackedDate, date, isWeekEnd, isSpecialDate);
        let isSelectedDate = selectedIndex[$contains](currentIndex);
        if (dart.test(isSelectedDate) && !dart.test(isBlackedDate) && dart.test(isEnableDate) && (!dart.test(monthView.enableMultiView) || monthView.rowCount !== 6 || dart.equals(dart.dload(currentMonthDate, 'month'), currentDateMonth))) {
          textStyle = month_view._drawCellAndSelection(canvas, xPosition, yPosition, selectionTextStyle, selectedRangeTextStyle, monthView, currentIndex);
        } else if (dateDecoration != null) {
          month_view._drawDecoration(canvas, xPosition, yPosition, 1, cellWidth, cellHeight, dateDecoration, monthView);
        } else if (dart.test(isCurrentDate)) {
          month_view._drawCurrentDate(canvas, monthView, xPosition, yPosition, 1, cellWidth, cellHeight);
        }
        let dateText = new text_span.TextSpan.new({text: dart.toString(dart.dload(date, 'day')), style: textStyle});
        monthView[_textPainter$].text = dateText;
        monthView[_textPainter$].layout({minWidth: cellWidth, maxWidth: cellWidth});
        monthView[_textPainter$].paint(canvas, new ui.Offset.new(dart.notNull(xPosition) + (dart.notNull(cellWidth) / 2 - dart.notNull(monthView[_textPainter$].width) / 2), dart.notNull(yPosition) + (dart.notNull(cellHeight) - dart.notNull(monthView[_textPainter$].height)) / 2));
        if (hoveringIndex != null && dart.test(hoveringIndex[$isNotEmpty]) && dart.test(hoveringIndex[$contains](currentIndex)) && !dart.test(isBlackedDate) && dart.test(isEnableDate)) {
          month_view._addRangeHoverEffect(canvas, xPosition, yPosition, monthView, currentIndex, hoveringIndex);
        }
        if (monthView.mouseHoverPosition.value != null) {
          if (dart.test(isSelectedDate) || dart.test(isBlackedDate) || !dart.test(isEnableDate)) {
            xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
            continue;
          }
          if (dart.nullCheck(monthView.mouseHoverPosition.value).offset != null) {
            month_view._addHoveringEffect(canvas, monthView, xPosition, yPosition, cellWidth, cellHeight, size);
          }
        }
        xPosition = dart.notNull(xPosition) + dart.notNull(cellWidth);
      }
    }
  };
  month_view._drawWeekNumber = function _drawWeekNumber(canvas, size, date, cellHeight, yPosition, weekNumberPanelWidth, monthView, viewStartPosition, viewEndPosition) {
    let t11;
    if (canvas == null) dart.nullFailed(I[2], 4342, 12, "canvas");
    if (size == null) dart.nullFailed(I[2], 4343, 10, "size");
    if (cellHeight == null) dart.nullFailed(I[2], 4345, 12, "cellHeight");
    if (yPosition == null) dart.nullFailed(I[2], 4346, 12, "yPosition");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 4347, 12, "weekNumberPanelWidth");
    if (monthView == null) dart.nullFailed(I[2], 4348, 17, "monthView");
    if (viewStartPosition == null) dart.nullFailed(I[2], 4349, 12, "viewStartPosition");
    if (viewEndPosition == null) dart.nullFailed(I[2], 4350, 12, "viewEndPosition");
    let weekNumber = dart.toString(picker_helper.DateRangePickerHelper.getWeekNumberOfYear(date, monthView.isHijri));
    let weekNumberTextStyle = (t11 = monthView.weekNumberStyle.textStyle, t11 == null ? monthView.datePickerTheme.weekNumberTextStyle : t11);
    let textSpan = new text_span.TextSpan.new({text: weekNumber, style: weekNumberTextStyle});
    monthView[_textPainter$].text = textSpan;
    monthView[_textPainter$].textAlign = ui.TextAlign.left;
    monthView[_textPainter$].textDirection = ui.TextDirection.ltr;
    monthView[_textPainter$].textWidthBasis = text_painter.TextWidthBasis.longestLine;
    monthView[_textPainter$].layout({minWidth: 0.0, maxWidth: weekNumberPanelWidth});
    let weekNumberPosition = (dart.notNull(weekNumberPanelWidth) - dart.notNull(monthView[_textPainter$].width)) / 2;
    weekNumberPosition = weekNumberPosition + dart.notNull(dart.test(monthView.isRtl) ? viewStartPosition === 0 && monthView.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? dart.notNull(viewEndPosition) + dart.notNull(monthView.multiViewSpacing) : viewEndPosition : dart.notNull(viewStartPosition) - dart.notNull(weekNumberPanelWidth));
    monthView[_textPainter$].paint(canvas, new ui.Offset.new(weekNumberPosition, dart.notNull(yPosition) + (dart.notNull(cellHeight) - dart.notNull(monthView[_textPainter$].height)) / 2));
  };
  month_view._drawWeekNumberPanel = function _drawWeekNumberPanel(canvas, size, weekNumberPanelWidth, monthView, isHorizontalMultiView, opts) {
    let t11;
    if (canvas == null) dart.nullFailed(I[2], 4380, 34, "canvas");
    if (size == null) dart.nullFailed(I[2], 4380, 47, "size");
    if (weekNumberPanelWidth == null) dart.nullFailed(I[2], 4380, 60, "weekNumberPanelWidth");
    if (monthView == null) dart.nullFailed(I[2], 4381, 17, "monthView");
    if (isHorizontalMultiView == null) dart.nullFailed(I[2], 4381, 33, "isHorizontalMultiView");
    let viewStartPosition = opts && 'viewStartPosition' in opts ? opts.viewStartPosition : 0;
    if (viewStartPosition == null) dart.nullFailed(I[2], 4382, 13, "viewStartPosition");
    if (weekNumberPanelWidth === 0) {
      return;
    }
    let xPosition = dart.test(monthView.isRtl) ? dart.notNull(size.width) - dart.notNull(weekNumberPanelWidth) : 0.0;
    if (dart.test(isHorizontalMultiView)) {
      xPosition = dart.notNull(viewStartPosition) - dart.notNull(weekNumberPanelWidth);
    }
    let padding = dart.test(monthView.isMobilePlatform) ? 5.0 : 0.0;
    let rect = new ui.Rect.fromLTRB(xPosition + padding, padding, xPosition + dart.notNull(weekNumberPanelWidth) - padding, dart.notNull(size.height) - padding);
    let _linePainter = ui.Paint.new();
    _linePainter.style = ui.PaintingStyle.fill;
    _linePainter.color = (t11 = monthView.weekNumberStyle.backgroundColor, t11 == null ? dart.nullCheck(monthView.datePickerTheme.weekNumberBackgroundColor) : t11);
    let roundedRect = new ui.RRect.fromRectAndRadius(rect, new ui.Radius.circular(padding));
    canvas.drawRRect(roundedRect, _linePainter);
  };
  month_view._addRangeHoverEffect = function _addRangeHoverEffect$(canvas, xPosition, yPosition, monthView, currentIndex, hoveringIndex) {
    if (canvas == null) dart.nullFailed(I[2], 4406, 34, "canvas");
    if (xPosition == null) dart.nullFailed(I[2], 4406, 49, "xPosition");
    if (yPosition == null) dart.nullFailed(I[2], 4406, 67, "yPosition");
    if (monthView == null) dart.nullFailed(I[2], 4407, 17, "monthView");
    if (currentIndex == null) dart.nullFailed(I[2], 4407, 32, "currentIndex");
    if (hoveringIndex == null || dart.test(hoveringIndex[$isEmpty])) {
      return;
    }
    let rangeSelectionMonthView = null;
    function rangeSelectionMonthView$35get() {
      let t12;
      t12 = rangeSelectionMonthView;
      return t12 == null ? dart.throw(new _internal.LateError.localNI("rangeSelectionMonthView")) : t12;
    }
    dart.fn(rangeSelectionMonthView$35get, T.VoidTo_MonthViewExtendableRangeSelectionRenderObject());
    function rangeSelectionMonthView$35set(t13) {
      if (t13 == null) dart.nullFailed(I[2], 4411, 55, "null");
      return rangeSelectionMonthView = t13;
    }
    dart.fn(rangeSelectionMonthView$35set, T._MonthViewExtendableRangeSelectionRenderObjectTodynamic());
    if (month_view._MonthViewExtendableRangeSelectionRenderObject.is(monthView)) {
      rangeSelectionMonthView$35set(monthView);
    }
    let hoveringDetails = rangeSelectionMonthView$35get()[_getSelectedRangePosition$](currentIndex, hoveringIndex);
    let isSelectedDate = hoveringDetails[$_get](0);
    let isStartRange = hoveringDetails[$_get](1);
    let isEndRange = hoveringDetails[$_get](2);
    let isBetweenRange = hoveringDetails[$_get](3);
    let radius = month_view._getCellRadius(rangeSelectionMonthView$35get().selectionRadius, rangeSelectionMonthView$35get()[_centerXPosition], rangeSelectionMonthView$35get()[_centerYPosition]);
    let cornerRadius = dart.notNull(monthView[_cellHeight]) / 4 > 10 ? 10.0 : dart.notNull(monthView[_cellHeight]) / 4;
    let heightDifference = dart.notNull(rangeSelectionMonthView$35get()[_cellHeight]) / 2 - dart.notNull(radius);
    switch (rangeSelectionMonthView$35get().selectionShape) {
      case C[171] || CT.C171:
      {
        heightDifference = 1.0;
        break;
      }
      case C[172] || CT.C172:
      {
        break;
      }
    }
    let rect = null;
    function rect$35get() {
      let t16;
      t16 = rect;
      return t16 == null ? dart.throw(new _internal.LateError.localNI("rect")) : t16;
    }
    dart.fn(rect$35get, T.VoidToRect());
    function rect$35set(t17) {
      if (t17 == null) dart.nullFailed(I[2], 4438, 13, "null");
      return rect = t17;
    }
    dart.fn(rect$35set, T.RectTodynamic());
    let path = ui.Path.new();
    if (dart.test(isStartRange) || dart.test(isSelectedDate)) {
      rect$35set(new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(rangeSelectionMonthView$35get()[_centerXPosition]), dart.notNull(yPosition) + heightDifference, dart.notNull(xPosition) + dart.notNull(rangeSelectionMonthView$35get()[_cellWidth]), dart.notNull(yPosition) + dart.notNull(rangeSelectionMonthView$35get()[_cellHeight]) - heightDifference));
      switch (monthView.selectionShape) {
        case C[172] || CT.C172:
        {
          path.addArc(new ui.Rect.fromCenter({center: new ui.Offset.new(rect$35get().left, dart.notNull(rect$35get().top) + dart.notNull(rect$35get().height) / 2), width: dart.notNull(radius) * 2, height: dart.notNull(radius) * 2}), 3.141592653589793 / 2, 3.141592653589793);
          break;
        }
        case C[171] || CT.C171:
        {
          path.addRRect(new ui.RRect.fromRectAndCorners(new ui.Rect.fromLTRB(xPosition, dart.notNull(yPosition) + heightDifference, dart.notNull(xPosition) + dart.notNull(monthView[_centerXPosition]), dart.notNull(yPosition) + dart.notNull(monthView[_cellHeight]) - heightDifference), {topLeft: new ui.Radius.circular(cornerRadius), bottomLeft: new ui.Radius.circular(cornerRadius)}));
        }
      }
    } else if (dart.test(isEndRange)) {
      rect$35set(new ui.Rect.fromLTRB(xPosition, dart.notNull(yPosition) + heightDifference, dart.notNull(xPosition) + dart.notNull(rangeSelectionMonthView$35get()[_centerXPosition]), dart.notNull(yPosition) + dart.notNull(rangeSelectionMonthView$35get()[_cellHeight]) - heightDifference));
      switch (monthView.selectionShape) {
        case C[172] || CT.C172:
        {
          path.addArc(new ui.Rect.fromCenter({center: new ui.Offset.new(rect$35get().right, dart.notNull(rect$35get().top) + dart.notNull(rect$35get().height) / 2), width: dart.notNull(radius) * 2, height: dart.notNull(radius) * 2}), -(3.141592653589793 / 2), 3.141592653589793);
          break;
        }
        case C[171] || CT.C171:
        {
          {
            path.addRRect(new ui.RRect.fromRectAndCorners(new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(monthView[_centerXPosition]), dart.notNull(yPosition) + heightDifference, dart.notNull(xPosition) + dart.notNull(monthView[_cellWidth]) - heightDifference, dart.notNull(yPosition) + dart.notNull(monthView[_cellHeight]) - heightDifference), {bottomRight: new ui.Radius.circular(cornerRadius), topRight: new ui.Radius.circular(cornerRadius)}));
          }
        }
      }
    } else if (dart.test(isBetweenRange)) {
      rect$35set(new ui.Rect.fromLTRB(xPosition, dart.notNull(yPosition) + heightDifference, dart.notNull(xPosition) + dart.notNull(rangeSelectionMonthView$35get()[_cellWidth]), dart.notNull(yPosition) + dart.notNull(rangeSelectionMonthView$35get()[_cellHeight]) - heightDifference));
    }
    monthView[_selectionPainter].style = ui.PaintingStyle.stroke;
    monthView[_selectionPainter].strokeWidth = 1.0;
    monthView[_selectionPainter].color = monthView.selectionColor != null ? dart.nullCheck(monthView.selectionColor).withOpacity(0.4) : dart.nullCheck(monthView.datePickerTheme.selectionColor).withOpacity(0.4);
    picker_helper.DateRangePickerHelper.drawDashedLine(rect$35get().left, rect$35get().top, rect$35get().right, canvas, monthView[_selectionPainter]);
    picker_helper.DateRangePickerHelper.drawDashedLine(rect$35get().left, rect$35get().bottom, rect$35get().right, canvas, monthView[_selectionPainter]);
    if (dart.test(isEndRange) || dart.test(isStartRange)) {
      canvas.drawPath(picker_helper.DateRangePickerHelper.getDashedPath(path, isStartRange, isEndRange, monthView.selectionShape == date_picker_manager.DateRangePickerSelectionShape.rectangle), monthView[_selectionPainter]);
    }
  };
  month_view._addHoveringEffect = function _addHoveringEffect(canvas, monthView, xPosition, yPosition, cellWidth, cellHeight, size) {
    if (canvas == null) dart.nullFailed(I[2], 4524, 32, "canvas");
    if (monthView == null) dart.nullFailed(I[2], 4524, 52, "monthView");
    if (xPosition == null) dart.nullFailed(I[2], 4524, 70, "xPosition");
    if (yPosition == null) dart.nullFailed(I[2], 4525, 12, "yPosition");
    if (cellWidth == null) dart.nullFailed(I[2], 4525, 30, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 4525, 48, "cellHeight");
    if (size == null) dart.nullFailed(I[2], 4525, 65, "size");
    if (dart.notNull(xPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dx) && dart.notNull(xPosition) + dart.notNull(cellWidth) >= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dx) && dart.notNull(yPosition) <= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dy) && dart.notNull(yPosition) + dart.notNull(cellHeight) >= dart.notNull(dart.nullCheck(dart.nullCheck(monthView.mouseHoverPosition.value).offset).dy)) {
      monthView[_selectionPainter].style = ui.PaintingStyle.fill;
      monthView[_selectionPainter].strokeWidth = 2.0;
      monthView[_selectionPainter].color = monthView.selectionColor != null ? dart.nullCheck(monthView.selectionColor).withOpacity(0.4) : dart.nullCheck(monthView.datePickerTheme.selectionColor).withOpacity(0.4);
      switch (monthView.selectionShape) {
        case C[172] || CT.C172:
        {
          {
            let centerXPosition = dart.notNull(cellWidth) / 2;
            let centerYPosition = dart.notNull(cellHeight) / 2;
            let radius = month_view._getCellRadius(monthView.selectionRadius, centerXPosition, centerYPosition);
            canvas.drawCircle(new ui.Offset.new(dart.notNull(xPosition) + centerXPosition, dart.notNull(yPosition) + centerYPosition), radius, monthView[_selectionPainter]);
          }
          break;
        }
        case C[171] || CT.C171:
        {
          {
            canvas.drawRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTWH(dart.notNull(xPosition) + 1, dart.notNull(yPosition) + 1, dart.notNull(cellWidth) - 1, dart.notNull(cellHeight) - 1), new ui.Radius.circular(dart.notNull(cellHeight) / 4 > 10 ? 10.0 : dart.notNull(cellHeight) / 4)), monthView[_selectionPainter]);
          }
        }
      }
    }
  };
  month_view._drawCellAndSelection = function _drawCellAndSelection(canvas, xPosition, yPosition, selectionTextStyle, selectedRangeTextStyle, monthView, currentIndex) {
    let t19;
    if (canvas == null) dart.nullFailed(I[2], 4563, 12, "canvas");
    if (xPosition == null) dart.nullFailed(I[2], 4564, 12, "xPosition");
    if (yPosition == null) dart.nullFailed(I[2], 4565, 12, "yPosition");
    if (selectionTextStyle == null) dart.nullFailed(I[2], 4566, 15, "selectionTextStyle");
    if (selectedRangeTextStyle == null) dart.nullFailed(I[2], 4567, 15, "selectedRangeTextStyle");
    if (monthView == null) dart.nullFailed(I[2], 4568, 17, "monthView");
    if (currentIndex == null) dart.nullFailed(I[2], 4569, 9, "currentIndex");
    monthView[_selectionPainter].color = (t19 = monthView.selectionColor, t19 == null ? dart.nullCheck(monthView.datePickerTheme.selectionColor) : t19);
    monthView[_selectionPainter].isAntiAlias = false;
    monthView[_selectionPainter].strokeWidth = 0.0;
    monthView[_selectionPainter].style = ui.PaintingStyle.fill;
    return monthView.drawSelection(canvas, xPosition, yPosition, currentIndex, selectionTextStyle, selectedRangeTextStyle);
  };
  month_view._drawDecoration = function _drawDecoration(canvas, xPosition, yPosition, padding, cellWidth, cellHeight, dateDecoration, monthView) {
    if (canvas == null) dart.nullFailed(I[2], 4581, 12, "canvas");
    if (xPosition == null) dart.nullFailed(I[2], 4582, 12, "xPosition");
    if (yPosition == null) dart.nullFailed(I[2], 4583, 12, "yPosition");
    if (padding == null) dart.nullFailed(I[2], 4584, 12, "padding");
    if (cellWidth == null) dart.nullFailed(I[2], 4585, 12, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 4586, 12, "cellHeight");
    if (dateDecoration == null) dart.nullFailed(I[2], 4587, 16, "dateDecoration");
    if (monthView == null) dart.nullFailed(I[2], 4588, 17, "monthView");
    let boxPainter = dateDecoration.createBoxPainter(dart.bind(monthView, 'markNeedsPaint'));
    boxPainter.paint(canvas, new ui.Offset.new(dart.notNull(xPosition) + dart.notNull(padding), dart.notNull(yPosition) + dart.notNull(padding)), new image_provider.ImageConfiguration.new({size: new ui.Size.new(dart.notNull(cellWidth) - 2 * dart.notNull(padding), dart.notNull(cellHeight) - 2 * dart.notNull(padding))}));
  };
  month_view._drawCurrentDate = function _drawCurrentDate(canvas, monthView, xPosition, yPosition, padding, cellWidth, cellHeight) {
    let t19;
    if (canvas == null) dart.nullFailed(I[2], 4598, 30, "canvas");
    if (monthView == null) dart.nullFailed(I[2], 4598, 50, "monthView");
    if (xPosition == null) dart.nullFailed(I[2], 4598, 68, "xPosition");
    if (yPosition == null) dart.nullFailed(I[2], 4599, 12, "yPosition");
    if (padding == null) dart.nullFailed(I[2], 4599, 30, "padding");
    if (cellWidth == null) dart.nullFailed(I[2], 4599, 46, "cellWidth");
    if (cellHeight == null) dart.nullFailed(I[2], 4599, 64, "cellHeight");
    monthView[_selectionPainter].color = (t19 = monthView.todayHighlightColor, t19 == null ? dart.nullCheck(monthView.datePickerTheme.todayHighlightColor) : t19);
    monthView[_selectionPainter].isAntiAlias = true;
    monthView[_selectionPainter].strokeWidth = 1.0;
    monthView[_selectionPainter].style = ui.PaintingStyle.stroke;
    switch (monthView.selectionShape) {
      case C[172] || CT.C172:
      {
        {
          let centerXPosition = dart.notNull(cellWidth) / 2;
          let centerYPosition = dart.notNull(cellHeight) / 2;
          let radius = month_view._getCellRadius(monthView.selectionRadius, centerXPosition, centerYPosition);
          canvas.drawCircle(new ui.Offset.new(dart.notNull(xPosition) + centerXPosition, dart.notNull(yPosition) + centerYPosition), radius, monthView[_selectionPainter]);
        }
        break;
      }
      case C[171] || CT.C171:
      {
        {
          canvas.drawRRect(new ui.RRect.fromRectAndRadius(new ui.Rect.fromLTRB(dart.notNull(xPosition) + dart.notNull(padding), dart.notNull(yPosition) + dart.notNull(padding), dart.notNull(xPosition) + dart.notNull(cellWidth) - dart.notNull(padding), dart.notNull(yPosition) + dart.notNull(cellHeight) - dart.notNull(padding)), new ui.Radius.circular(dart.notNull(cellHeight) / 4 > 10 ? 10.0 : dart.notNull(cellHeight) / 4)), monthView[_selectionPainter]);
        }
      }
    }
  };
  month_view._updateTextStyle = function _updateTextStyle(monthView, isNextMonth, isPreviousMonth, isCurrentDate, isEnableDate, isBlackedDate, isWeekEnd, isSpecialDate) {
    let t19, t20, t19$, t19$0, t19$1, t19$2, t19$3, t19$4;
    if (monthView == null) dart.nullFailed(I[2], 4635, 17, "monthView");
    if (isNextMonth == null) dart.nullFailed(I[2], 4636, 10, "isNextMonth");
    if (isPreviousMonth == null) dart.nullFailed(I[2], 4637, 10, "isPreviousMonth");
    if (isCurrentDate == null) dart.nullFailed(I[2], 4638, 10, "isCurrentDate");
    if (isEnableDate == null) dart.nullFailed(I[2], 4639, 10, "isEnableDate");
    if (isBlackedDate == null) dart.nullFailed(I[2], 4640, 10, "isBlackedDate");
    if (isWeekEnd == null) dart.nullFailed(I[2], 4641, 10, "isWeekEnd");
    if (isSpecialDate == null) dart.nullFailed(I[2], 4642, 10, "isSpecialDate");
    let currentDatesTextStyle = (t19 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'textStyle')), t19 == null ? monthView.datePickerTheme.activeDatesTextStyle : t19);
    if (dart.test(isBlackedDate)) {
      t19$ = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'blackoutDateTextStyle'));
      return t19$ == null ? (t20 = monthView.datePickerTheme.blackoutDatesTextStyle, t20 == null ? currentDatesTextStyle.copyWith({decoration: ui.TextDecoration.lineThrough}) : t20) : t19$;
    }
    if (dart.test(isSpecialDate)) {
      t19$0 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'specialDatesTextStyle'));
      return t19$0 == null ? monthView.datePickerTheme.specialDatesTextStyle : t19$0;
    }
    if (!dart.test(isEnableDate)) {
      t19$1 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'disabledDatesTextStyle'));
      return t19$1 == null ? monthView.datePickerTheme.disabledDatesTextStyle : t19$1;
    }
    if (dart.test(isCurrentDate)) {
      t19$2 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'todayTextStyle'));
      return t19$2 == null ? monthView.datePickerTheme.todayTextStyle : t19$2;
    }
    if (dart.test(isWeekEnd) && dart.dload(monthView.cellStyle, 'weekendTextStyle') != null) {
      return text_style.TextStyle.as(dart.dload(monthView.cellStyle, 'weekendTextStyle'));
    } else if (dart.test(isWeekEnd) && monthView.datePickerTheme.weekendDatesTextStyle != null) {
      return dart.nullCheck(monthView.datePickerTheme.weekendDatesTextStyle);
    }
    if (dart.test(isNextMonth) && !dart.test(monthView.isHijri)) {
      t19$3 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'leadingDatesTextStyle'));
      return t19$3 == null ? monthView.datePickerTheme.leadingDatesTextStyle : t19$3;
    } else if (dart.test(isPreviousMonth) && !dart.test(monthView.isHijri)) {
      t19$4 = T.TextStyleN().as(dart.dload(monthView.cellStyle, 'trailingDatesTextStyle'));
      return t19$4 == null ? monthView.datePickerTheme.trailingDatesTextStyle : t19$4;
    }
    return currentDatesTextStyle;
  };
  month_view._updateDecoration = function _updateDecoration(isNextMonth, isPreviousMonth, monthView, isEnableDate, isCurrentDate, isBlackedDate, date, isWeekEnd, isSpecialDate) {
    let t19;
    if (isNextMonth == null) dart.nullFailed(I[2], 4687, 10, "isNextMonth");
    if (isPreviousMonth == null) dart.nullFailed(I[2], 4688, 10, "isPreviousMonth");
    if (monthView == null) dart.nullFailed(I[2], 4689, 17, "monthView");
    if (isEnableDate == null) dart.nullFailed(I[2], 4690, 10, "isEnableDate");
    if (isCurrentDate == null) dart.nullFailed(I[2], 4691, 10, "isCurrentDate");
    if (isBlackedDate == null) dart.nullFailed(I[2], 4692, 10, "isBlackedDate");
    if (isWeekEnd == null) dart.nullFailed(I[2], 4694, 10, "isWeekEnd");
    if (isSpecialDate == null) dart.nullFailed(I[2], 4695, 10, "isSpecialDate");
    let dateDecoration = T.DecorationN().as(dart.dload(monthView.cellStyle, 'cellDecoration'));
    if (dart.test(isBlackedDate)) {
      return T.DecorationN().as(dart.dload(monthView.cellStyle, 'blackoutDatesDecoration'));
    }
    if (dart.test(isSpecialDate)) {
      return T.DecorationN().as(dart.dload(monthView.cellStyle, 'specialDatesDecoration'));
    }
    if (!dart.test(isEnableDate)) {
      return T.DecorationN().as(dart.dload(monthView.cellStyle, 'disabledDatesDecoration'));
    }
    if (dart.test(isCurrentDate)) {
      t19 = T.DecorationN().as(dart.dload(monthView.cellStyle, 'todayCellDecoration'));
      return t19 == null ? dateDecoration : t19;
    }
    if (dart.test(isWeekEnd) && dart.dload(monthView.cellStyle, 'weekendDatesDecoration') != null) {
      return decoration.Decoration.as(dart.dload(monthView.cellStyle, 'weekendDatesDecoration'));
    }
    if (dart.test(isNextMonth) && !dart.test(monthView.isHijri)) {
      return T.DecorationN().as(dart.dload(monthView.cellStyle, 'leadingDatesDecoration'));
    } else if (dart.test(isPreviousMonth) && !dart.test(monthView.isHijri)) {
      return T.DecorationN().as(dart.dload(monthView.cellStyle, 'trailingDatesDecoration'));
    }
    return dateDecoration;
  };
  var dayFormat$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.dayFormat");
  var enableSwipeSelection$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.enableSwipeSelection");
  var firstDayOfWeek$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.firstDayOfWeek");
  var viewHeaderStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.viewHeaderStyle");
  var viewHeaderHeight$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.viewHeaderHeight");
  var blackoutDates$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.blackoutDates");
  var specialDates$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.specialDates");
  var showWeekNumber$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.showWeekNumber");
  var weekNumberStyle$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.weekNumberStyle");
  var weekendDays$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthViewSettings.weekendDays");
  var DateRangePickerViewHeaderStyle_textStyle = dart.privateName(date_picker_manager, "DateRangePickerViewHeaderStyle.textStyle");
  var DateRangePickerViewHeaderStyle_backgroundColor = dart.privateName(date_picker_manager, "DateRangePickerViewHeaderStyle.backgroundColor");
  var DateRangePickerWeekNumberStyle_textStyle = dart.privateName(date_picker_manager, "DateRangePickerWeekNumberStyle.textStyle");
  var DateRangePickerWeekNumberStyle_backgroundColor = dart.privateName(date_picker_manager, "DateRangePickerWeekNumberStyle.backgroundColor");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  hijri_date_picker_manager.HijriDatePickerMonthViewSettings = class HijriDatePickerMonthViewSettings extends Object_Diagnosticable$36 {
    get dayFormat() {
      return this[dayFormat$];
    }
    set dayFormat(value) {
      super.dayFormat = value;
    }
    get enableSwipeSelection() {
      return this[enableSwipeSelection$];
    }
    set enableSwipeSelection(value) {
      super.enableSwipeSelection = value;
    }
    get firstDayOfWeek() {
      return this[firstDayOfWeek$];
    }
    set firstDayOfWeek(value) {
      super.firstDayOfWeek = value;
    }
    get viewHeaderStyle() {
      return this[viewHeaderStyle$];
    }
    set viewHeaderStyle(value) {
      super.viewHeaderStyle = value;
    }
    get viewHeaderHeight() {
      return this[viewHeaderHeight$];
    }
    set viewHeaderHeight(value) {
      super.viewHeaderHeight = value;
    }
    get blackoutDates() {
      return this[blackoutDates$0];
    }
    set blackoutDates(value) {
      super.blackoutDates = value;
    }
    get specialDates() {
      return this[specialDates$0];
    }
    set specialDates(value) {
      super.specialDates = value;
    }
    get showWeekNumber() {
      return this[showWeekNumber$0];
    }
    set showWeekNumber(value) {
      super.showWeekNumber = value;
    }
    get weekNumberStyle() {
      return this[weekNumberStyle$0];
    }
    set weekNumberStyle(value) {
      super.weekNumberStyle = value;
    }
    get weekendDays() {
      return this[weekendDays$0];
    }
    set weekendDays(value) {
      super.weekendDays = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t20;
        t20 = otherStyle;
        return t20 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t20;
      }
      dart.fn(otherStyle$35get, T.VoidToHijriDatePickerMonthViewSettings());
      function otherStyle$35set(t21) {
        if (t21 == null) dart.nullFailed(I[4], 366, 49, "null");
        if (otherStyle == null)
          return otherStyle = t21;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.HijriDatePickerMonthViewSettingsTodynamic());
      if (hijri_date_picker_manager.HijriDatePickerMonthViewSettings.is(other)) {
        otherStyle$35set(other);
      }
      return otherStyle$35get().dayFormat == this.dayFormat && otherStyle$35get().firstDayOfWeek == this.firstDayOfWeek && dart.equals(otherStyle$35get().viewHeaderStyle, this.viewHeaderStyle) && otherStyle$35get().viewHeaderHeight == this.viewHeaderHeight && dart.equals(otherStyle$35get().blackoutDates, this.blackoutDates) && dart.equals(otherStyle$35get().specialDates, this.specialDates) && dart.equals(otherStyle$35get().weekendDays, this.weekendDays) && otherStyle$35get().enableSwipeSelection == this.enableSwipeSelection && otherStyle$35get().showWeekNumber == this.showWeekNumber && dart.equals(otherStyle$35get().weekNumberStyle, this.weekNumberStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 383, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.IterableDiagnosticsOfHijriDateTime()).new(this.blackoutDates).toDiagnosticsNode({name: "blackoutDates"}));
      properties.add(new (T.IterableDiagnosticsOfHijriDateTime()).new(this.specialDates).toDiagnosticsNode({name: "specialDates"}));
      properties.add(new diagnostics.IntProperty.new("firstDayOfWeek", this.firstDayOfWeek));
      properties.add(new diagnostics.DoubleProperty.new("viewHeaderHeight", this.viewHeaderHeight));
      properties.add(new diagnostics.StringProperty.new("dayFormat", this.dayFormat));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enableSwipeSelection", this.enableSwipeSelection));
      properties.add(this.viewHeaderStyle.toDiagnosticsNode({name: "viewHeaderStyle"}));
      properties.add(new (T.IterablePropertyOfint()).new("weekendDays", this.weekendDays));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showWeekNumber", this.showWeekNumber));
      properties.add(this.weekNumberStyle.toDiagnosticsNode({name: "weekNumberStyle"}));
    }
    get hashCode() {
      return ui.hashValues(this.dayFormat, this.firstDayOfWeek, this.viewHeaderStyle, this.enableSwipeSelection, this.viewHeaderHeight, this.showWeekNumber, this.weekNumberStyle, ui.hashList(this.specialDates), ui.hashList(this.blackoutDates), ui.hashList(this.weekendDays));
    }
  };
  (hijri_date_picker_manager.HijriDatePickerMonthViewSettings.new = function(opts) {
    let firstDayOfWeek = opts && 'firstDayOfWeek' in opts ? opts.firstDayOfWeek : 7;
    if (firstDayOfWeek == null) dart.nullFailed(I[4], 54, 13, "firstDayOfWeek");
    let dayFormat = opts && 'dayFormat' in opts ? opts.dayFormat : "EE";
    if (dayFormat == null) dart.nullFailed(I[4], 55, 12, "dayFormat");
    let viewHeaderHeight = opts && 'viewHeaderHeight' in opts ? opts.viewHeaderHeight : 30;
    if (viewHeaderHeight == null) dart.nullFailed(I[4], 56, 12, "viewHeaderHeight");
    let viewHeaderStyle = opts && 'viewHeaderStyle' in opts ? opts.viewHeaderStyle : C[360] || CT.C360;
    if (viewHeaderStyle == null) dart.nullFailed(I[4], 57, 12, "viewHeaderStyle");
    let enableSwipeSelection = opts && 'enableSwipeSelection' in opts ? opts.enableSwipeSelection : true;
    if (enableSwipeSelection == null) dart.nullFailed(I[4], 58, 12, "enableSwipeSelection");
    let blackoutDates = opts && 'blackoutDates' in opts ? opts.blackoutDates : null;
    let specialDates = opts && 'specialDates' in opts ? opts.specialDates : null;
    let showWeekNumber = opts && 'showWeekNumber' in opts ? opts.showWeekNumber : false;
    if (showWeekNumber == null) dart.nullFailed(I[4], 61, 12, "showWeekNumber");
    let weekNumberStyle = opts && 'weekNumberStyle' in opts ? opts.weekNumberStyle : C[361] || CT.C361;
    if (weekNumberStyle == null) dart.nullFailed(I[4], 62, 12, "weekNumberStyle");
    let weekendDays = opts && 'weekendDays' in opts ? opts.weekendDays : C[362] || CT.C362;
    if (weekendDays == null) dart.nullFailed(I[4], 63, 12, "weekendDays");
    this[firstDayOfWeek$] = firstDayOfWeek;
    this[dayFormat$] = dayFormat;
    this[viewHeaderHeight$] = viewHeaderHeight;
    this[viewHeaderStyle$] = viewHeaderStyle;
    this[enableSwipeSelection$] = enableSwipeSelection;
    this[blackoutDates$0] = blackoutDates;
    this[specialDates$0] = specialDates;
    this[showWeekNumber$0] = showWeekNumber;
    this[weekNumberStyle$0] = weekNumberStyle;
    this[weekendDays$0] = weekendDays;
    if (!(dart.notNull(firstDayOfWeek) >= 1 && dart.notNull(firstDayOfWeek) <= 7)) dart.assertFailed(null, I[4], 64, 16, "firstDayOfWeek >= 1 && firstDayOfWeek <= 7");
    if (!(dart.notNull(viewHeaderHeight) >= -1)) dart.assertFailed(null, I[4], 65, 16, "viewHeaderHeight >= -1");
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerMonthViewSettings.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerMonthViewSettings);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerMonthViewSettings);
  dart.setMethodSignature(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, () => ({
    __proto__: dart.getMethods(hijri_date_picker_manager.HijriDatePickerMonthViewSettings.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerMonthViewSettings.__proto__),
    dayFormat: dart.finalFieldType(core.String),
    enableSwipeSelection: dart.finalFieldType(core.bool),
    firstDayOfWeek: dart.finalFieldType(core.int),
    viewHeaderStyle: dart.finalFieldType(date_picker_manager.DateRangePickerViewHeaderStyle),
    viewHeaderHeight: dart.finalFieldType(core.double),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List$(core$.HijriDateTime))),
    specialDates: dart.finalFieldType(dart.nullable(core.List$(core$.HijriDateTime))),
    showWeekNumber: dart.finalFieldType(core.bool),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle),
    weekendDays: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, ['_equals']);
  dart.defineExtensionAccessors(hijri_date_picker_manager.HijriDatePickerMonthViewSettings, ['hashCode']);
  var textStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.textStyle");
  var todayTextStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.todayTextStyle");
  var disabledDatesTextStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.disabledDatesTextStyle");
  var disabledDatesDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.disabledDatesDecoration");
  var cellDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.cellDecoration");
  var todayCellDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerYearCellStyle.todayCellDecoration");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  hijri_date_picker_manager.HijriDatePickerYearCellStyle = class HijriDatePickerYearCellStyle extends Object_Diagnosticable$36$ {
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get disabledDatesTextStyle() {
      return this[disabledDatesTextStyle$];
    }
    set disabledDatesTextStyle(value) {
      super.disabledDatesTextStyle = value;
    }
    get disabledDatesDecoration() {
      return this[disabledDatesDecoration$];
    }
    set disabledDatesDecoration(value) {
      super.disabledDatesDecoration = value;
    }
    get cellDecoration() {
      return this[cellDecoration$];
    }
    set cellDecoration(value) {
      super.cellDecoration = value;
    }
    get todayCellDecoration() {
      return this[todayCellDecoration$];
    }
    set todayCellDecoration(value) {
      super.todayCellDecoration = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t24;
        t24 = otherStyle;
        return t24 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t24;
      }
      dart.fn(otherStyle$35get, T.VoidToHijriDatePickerYearCellStyle());
      function otherStyle$35set(t25) {
        if (t25 == null) dart.nullFailed(I[4], 669, 45, "null");
        if (otherStyle == null)
          return otherStyle = t25;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.HijriDatePickerYearCellStyleTodynamic());
      if (hijri_date_picker_manager.HijriDatePickerYearCellStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && dart.equals(otherStyle$35get().todayTextStyle, this.todayTextStyle) && dart.equals(otherStyle$35get().disabledDatesDecoration, this.disabledDatesDecoration) && dart.equals(otherStyle$35get().cellDecoration, this.cellDecoration) && dart.equals(otherStyle$35get().todayCellDecoration, this.todayCellDecoration) && dart.equals(otherStyle$35get().disabledDatesTextStyle, this.disabledDatesTextStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 682, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("todayTextStyle", this.todayTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("disabledDatesTextStyle", this.disabledDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("disabledDatesDecoration", this.disabledDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("cellDecoration", this.cellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("todayCellDecoration", this.todayCellDecoration));
    }
    get hashCode() {
      return ui.hashValues(this.textStyle, this.todayTextStyle, this.disabledDatesTextStyle, this.disabledDatesDecoration, this.cellDecoration, this.todayCellDecoration);
    }
  };
  (hijri_date_picker_manager.HijriDatePickerYearCellStyle.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
    let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
    let todayCellDecoration = opts && 'todayCellDecoration' in opts ? opts.todayCellDecoration : null;
    let disabledDatesDecoration = opts && 'disabledDatesDecoration' in opts ? opts.disabledDatesDecoration : null;
    this[textStyle$] = textStyle;
    this[todayTextStyle$] = todayTextStyle;
    this[disabledDatesTextStyle$] = disabledDatesTextStyle;
    this[cellDecoration$] = cellDecoration;
    this[todayCellDecoration$] = todayCellDecoration;
    this[disabledDatesDecoration$] = disabledDatesDecoration;
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerYearCellStyle.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerYearCellStyle);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerYearCellStyle);
  dart.setMethodSignature(hijri_date_picker_manager.HijriDatePickerYearCellStyle, () => ({
    __proto__: dart.getMethods(hijri_date_picker_manager.HijriDatePickerYearCellStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerYearCellStyle, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerYearCellStyle, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerYearCellStyle.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    todayTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    cellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    todayCellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration))
  }));
  dart.defineExtensionMethods(hijri_date_picker_manager.HijriDatePickerYearCellStyle, ['_equals']);
  dart.defineExtensionAccessors(hijri_date_picker_manager.HijriDatePickerYearCellStyle, ['hashCode']);
  var textStyle$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.textStyle");
  var todayTextStyle$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.todayTextStyle");
  var disabledDatesTextStyle$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.disabledDatesTextStyle");
  var blackoutDateTextStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.blackoutDateTextStyle");
  var weekendTextStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.weekendTextStyle");
  var specialDatesTextStyle$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.specialDatesTextStyle");
  var specialDatesDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.specialDatesDecoration");
  var weekendDatesDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.weekendDatesDecoration");
  var blackoutDatesDecoration$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.blackoutDatesDecoration");
  var disabledDatesDecoration$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.disabledDatesDecoration");
  var cellDecoration$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.cellDecoration");
  var todayCellDecoration$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerMonthCellStyle.todayCellDecoration");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  hijri_date_picker_manager.HijriDatePickerMonthCellStyle = class HijriDatePickerMonthCellStyle extends Object_Diagnosticable$36$0 {
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$0];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get disabledDatesTextStyle() {
      return this[disabledDatesTextStyle$0];
    }
    set disabledDatesTextStyle(value) {
      super.disabledDatesTextStyle = value;
    }
    get blackoutDateTextStyle() {
      return this[blackoutDateTextStyle$];
    }
    set blackoutDateTextStyle(value) {
      super.blackoutDateTextStyle = value;
    }
    get weekendTextStyle() {
      return this[weekendTextStyle$];
    }
    set weekendTextStyle(value) {
      super.weekendTextStyle = value;
    }
    get specialDatesTextStyle() {
      return this[specialDatesTextStyle$];
    }
    set specialDatesTextStyle(value) {
      super.specialDatesTextStyle = value;
    }
    get specialDatesDecoration() {
      return this[specialDatesDecoration$];
    }
    set specialDatesDecoration(value) {
      super.specialDatesDecoration = value;
    }
    get weekendDatesDecoration() {
      return this[weekendDatesDecoration$];
    }
    set weekendDatesDecoration(value) {
      super.weekendDatesDecoration = value;
    }
    get blackoutDatesDecoration() {
      return this[blackoutDatesDecoration$];
    }
    set blackoutDatesDecoration(value) {
      super.blackoutDatesDecoration = value;
    }
    get disabledDatesDecoration() {
      return this[disabledDatesDecoration$0];
    }
    set disabledDatesDecoration(value) {
      super.disabledDatesDecoration = value;
    }
    get cellDecoration() {
      return this[cellDecoration$0];
    }
    set cellDecoration(value) {
      super.cellDecoration = value;
    }
    get todayCellDecoration() {
      return this[todayCellDecoration$0];
    }
    set todayCellDecoration(value) {
      super.todayCellDecoration = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t28;
        t28 = otherStyle;
        return t28 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t28;
      }
      dart.fn(otherStyle$35get, T.VoidToHijriDatePickerMonthCellStyle());
      function otherStyle$35set(t29) {
        if (t29 == null) dart.nullFailed(I[4], 1178, 46, "null");
        if (otherStyle == null)
          return otherStyle = t29;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.HijriDatePickerMonthCellStyleTodynamic());
      if (hijri_date_picker_manager.HijriDatePickerMonthCellStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && dart.equals(otherStyle$35get().todayTextStyle, this.todayTextStyle) && dart.equals(otherStyle$35get().blackoutDateTextStyle, this.blackoutDateTextStyle) && dart.equals(otherStyle$35get().weekendTextStyle, this.weekendTextStyle) && dart.equals(otherStyle$35get().specialDatesTextStyle, this.specialDatesTextStyle) && dart.equals(otherStyle$35get().specialDatesDecoration, this.specialDatesDecoration) && dart.equals(otherStyle$35get().weekendDatesDecoration, this.weekendDatesDecoration) && dart.equals(otherStyle$35get().blackoutDatesDecoration, this.blackoutDatesDecoration) && dart.equals(otherStyle$35get().disabledDatesDecoration, this.disabledDatesDecoration) && dart.equals(otherStyle$35get().cellDecoration, this.cellDecoration) && dart.equals(otherStyle$35get().todayCellDecoration, this.todayCellDecoration) && dart.equals(otherStyle$35get().disabledDatesTextStyle, this.disabledDatesTextStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 1197, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("todayTextStyle", this.todayTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("blackoutDateTextStyle", this.blackoutDateTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("weekendTextStyle", this.weekendTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("specialDatesTextStyle", this.specialDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("disabledDatesTextStyle", this.disabledDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("disabledDatesDecoration", this.disabledDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("cellDecoration", this.cellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("todayCellDecoration", this.todayCellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("blackoutDatesDecoration", this.blackoutDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("weekendDatesDecoration", this.weekendDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("specialDatesDecoration", this.specialDatesDecoration));
    }
    get hashCode() {
      return ui.hashList([this.textStyle, this.todayTextStyle, this.disabledDatesTextStyle, this.specialDatesDecoration, this.weekendDatesDecoration, this.blackoutDatesDecoration, this.disabledDatesDecoration, this.cellDecoration, this.todayCellDecoration, this.specialDatesTextStyle, this.blackoutDateTextStyle, this.weekendTextStyle]);
    }
  };
  (hijri_date_picker_manager.HijriDatePickerMonthCellStyle.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
    let blackoutDateTextStyle = opts && 'blackoutDateTextStyle' in opts ? opts.blackoutDateTextStyle : null;
    let weekendTextStyle = opts && 'weekendTextStyle' in opts ? opts.weekendTextStyle : null;
    let specialDatesTextStyle = opts && 'specialDatesTextStyle' in opts ? opts.specialDatesTextStyle : null;
    let specialDatesDecoration = opts && 'specialDatesDecoration' in opts ? opts.specialDatesDecoration : null;
    let blackoutDatesDecoration = opts && 'blackoutDatesDecoration' in opts ? opts.blackoutDatesDecoration : null;
    let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
    let todayCellDecoration = opts && 'todayCellDecoration' in opts ? opts.todayCellDecoration : null;
    let disabledDatesDecoration = opts && 'disabledDatesDecoration' in opts ? opts.disabledDatesDecoration : null;
    let weekendDatesDecoration = opts && 'weekendDatesDecoration' in opts ? opts.weekendDatesDecoration : null;
    this[textStyle$0] = textStyle;
    this[todayTextStyle$0] = todayTextStyle;
    this[disabledDatesTextStyle$0] = disabledDatesTextStyle;
    this[blackoutDateTextStyle$] = blackoutDateTextStyle;
    this[weekendTextStyle$] = weekendTextStyle;
    this[specialDatesTextStyle$] = specialDatesTextStyle;
    this[specialDatesDecoration$] = specialDatesDecoration;
    this[blackoutDatesDecoration$] = blackoutDatesDecoration;
    this[cellDecoration$0] = cellDecoration;
    this[todayCellDecoration$0] = todayCellDecoration;
    this[disabledDatesDecoration$0] = disabledDatesDecoration;
    this[weekendDatesDecoration$] = weekendDatesDecoration;
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerMonthCellStyle.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerMonthCellStyle);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerMonthCellStyle);
  dart.setMethodSignature(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, () => ({
    __proto__: dart.getMethods(hijri_date_picker_manager.HijriDatePickerMonthCellStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerMonthCellStyle.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    todayTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    blackoutDateTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    weekendTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    specialDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    specialDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    weekendDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    blackoutDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    disabledDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    cellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    todayCellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration))
  }));
  dart.defineExtensionMethods(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, ['_equals']);
  dart.defineExtensionAccessors(hijri_date_picker_manager.HijriDatePickerMonthCellStyle, ['hashCode']);
  var forward = dart.privateName(hijri_date_picker_manager, "HijriDatePickerController.forward");
  var backward = dart.privateName(hijri_date_picker_manager, "HijriDatePickerController.backward");
  var _selectedDate = dart.privateName(hijri_date_picker_manager, "_selectedDate");
  var _selectedDates = dart.privateName(hijri_date_picker_manager, "_selectedDates");
  var _selectedRange = dart.privateName(hijri_date_picker_manager, "_selectedRange");
  var _selectedRanges = dart.privateName(hijri_date_picker_manager, "_selectedRanges");
  var _displayDate = dart.privateName(hijri_date_picker_manager, "_displayDate");
  var _view = dart.privateName(hijri_date_picker_manager, "_view");
  var _listeners = dart.privateName(date_picker_manager, "_listeners");
  const Object_Diagnosticable$36$1 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$1.new = function() {
  }).prototype = Object_Diagnosticable$36$1.prototype;
  dart.applyMixin(Object_Diagnosticable$36$1, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerValueChangeNotifier = class DateRangePickerValueChangeNotifier extends Object_Diagnosticable$36$1 {
    addPropertyChangedListener(listener) {
      let t31;
      if (listener == null) dart.nullFailed(I[6], 2259, 43, "listener");
      this[_listeners] == null ? this[_listeners] = T.JSArrayOfStringTovoid().of([]) : null;
      t31 = this[_listeners];
      t31 == null ? null : t31[$add](listener);
    }
    removePropertyChangedListener(listener) {
      let t31;
      if (listener == null) dart.nullFailed(I[6], 2273, 43, "listener");
      if (this[_listeners] == null) {
        return;
      }
      t31 = this[_listeners];
      t31 == null ? null : t31[$remove](listener);
    }
    notifyPropertyChangedListeners(value) {
      if (value == null) dart.nullFailed(I[6], 2293, 46, "value");
      if (this[_listeners] == null) {
        return;
      }
      for (let listener of dart.nullCheck(this[_listeners])) {
        listener(value);
      }
    }
    dispose() {
      this[_listeners] = null;
    }
  };
  (date_picker_manager.DateRangePickerValueChangeNotifier.new = function() {
    this[_listeners] = null;
    ;
  }).prototype = date_picker_manager.DateRangePickerValueChangeNotifier.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerValueChangeNotifier);
  dart.addTypeCaches(date_picker_manager.DateRangePickerValueChangeNotifier);
  dart.setMethodSignature(date_picker_manager.DateRangePickerValueChangeNotifier, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerValueChangeNotifier.__proto__),
    addPropertyChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String])]),
    removePropertyChangedListener: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String])]),
    notifyPropertyChangedListeners: dart.fnType(dart.void, [core.String]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerValueChangeNotifier, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerValueChangeNotifier, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerValueChangeNotifier.__proto__),
    [_listeners]: dart.fieldType(dart.nullable(core.List$(dart.fnType(dart.void, [core.String]))))
  }));
  hijri_date_picker_manager.HijriDatePickerController = class HijriDatePickerController extends date_picker_manager.DateRangePickerValueChangeNotifier {
    get forward() {
      return this[forward];
    }
    set forward(value) {
      this[forward] = value;
    }
    get backward() {
      return this[backward];
    }
    set backward(value) {
      this[backward] = value;
    }
    get selectedDate() {
      return this[_selectedDate];
    }
    set selectedDate(date) {
      if (dart.test(core$.isSameDate(this[_selectedDate], date))) {
        return;
      }
      this[_selectedDate] = date;
      this.notifyPropertyChangedListeners("selectedDate");
    }
    get selectedDates() {
      return this[_selectedDates];
    }
    set selectedDates(dates) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates], dates))) {
        return;
      }
      this[_selectedDates] = dart.nullCheck(picker_helper.DateRangePickerHelper.cloneList(dates))[$cast](core$.HijriDateTime);
      this.notifyPropertyChangedListeners("selectedDates");
    }
    get selectedRange() {
      return this[_selectedRange];
    }
    set selectedRange(range) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange], range))) {
        return;
      }
      this[_selectedRange] = range;
      this.notifyPropertyChangedListeners("selectedRange");
    }
    get selectedRanges() {
      return this[_selectedRanges];
    }
    set selectedRanges(ranges) {
      if (dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges], ranges))) {
        return;
      }
      this[_selectedRanges] = dart.nullCheck(picker_helper.DateRangePickerHelper.cloneList(ranges))[$cast](hijri_date_picker_manager.HijriDateRange);
      this.notifyPropertyChangedListeners("selectedRanges");
    }
    get displayDate() {
      return this[_displayDate];
    }
    set displayDate(date) {
      if (dart.test(core$.isSameDate(this[_displayDate], date))) {
        return;
      }
      this[_displayDate] = date;
      this.notifyPropertyChangedListeners("displayDate");
    }
    get view() {
      return this[_view];
    }
    set view(value) {
      if (this[_view] == value) {
        return;
      }
      this[_view] = value;
      this.notifyPropertyChangedListeners("view");
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 1776, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("displayDate", this.displayDate));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("selectedDate", this.selectedDate));
      properties.add(new (T.IterableDiagnosticsOfHijriDateTime()).new(this.selectedDates).toDiagnosticsNode({name: "selectedDates"}));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateRange()).new("selectedRange", this.selectedRange));
      properties.add(new (T.IterableDiagnosticsOfHijriDateRange()).new(this.selectedRanges).toDiagnosticsNode({name: "selectedRanges"}));
      properties.add(new (T.EnumPropertyOfHijriDatePickerView()).new("view", this.view));
    }
  };
  (hijri_date_picker_manager.HijriDatePickerController.new = function() {
    this[_selectedDate] = null;
    this[_selectedDates] = null;
    this[_selectedRange] = null;
    this[_selectedRanges] = null;
    this[_displayDate] = null;
    this[_view] = null;
    this[forward] = null;
    this[backward] = null;
    hijri_date_picker_manager.HijriDatePickerController.__proto__.new.call(this);
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerController.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerController);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerController);
  dart.setGetterSignature(hijri_date_picker_manager.HijriDatePickerController, () => ({
    __proto__: dart.getGetters(hijri_date_picker_manager.HijriDatePickerController.__proto__),
    selectedDate: dart.nullable(core$.HijriDateTime),
    selectedDates: dart.nullable(core.List$(core$.HijriDateTime)),
    selectedRange: dart.nullable(hijri_date_picker_manager.HijriDateRange),
    selectedRanges: dart.nullable(core.List$(hijri_date_picker_manager.HijriDateRange)),
    displayDate: dart.nullable(core$.HijriDateTime),
    view: dart.nullable(hijri_date_picker_manager.HijriDatePickerView)
  }));
  dart.setSetterSignature(hijri_date_picker_manager.HijriDatePickerController, () => ({
    __proto__: dart.getSetters(hijri_date_picker_manager.HijriDatePickerController.__proto__),
    selectedDate: dart.nullable(core$.HijriDateTime),
    selectedDates: dart.nullable(core.List$(core$.HijriDateTime)),
    selectedRange: dart.nullable(hijri_date_picker_manager.HijriDateRange),
    selectedRanges: dart.nullable(core.List$(hijri_date_picker_manager.HijriDateRange)),
    displayDate: dart.nullable(core$.HijriDateTime),
    view: dart.nullable(hijri_date_picker_manager.HijriDatePickerView)
  }));
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerController, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerController, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerController.__proto__),
    [_selectedDate]: dart.fieldType(dart.nullable(core$.HijriDateTime)),
    [_selectedDates]: dart.fieldType(dart.nullable(core.List$(core$.HijriDateTime))),
    [_selectedRange]: dart.fieldType(dart.nullable(hijri_date_picker_manager.HijriDateRange)),
    [_selectedRanges]: dart.fieldType(dart.nullable(core.List$(hijri_date_picker_manager.HijriDateRange))),
    [_displayDate]: dart.fieldType(dart.nullable(core$.HijriDateTime)),
    [_view]: dart.fieldType(dart.nullable(hijri_date_picker_manager.HijriDatePickerView)),
    forward: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    backward: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  var _name$0 = dart.privateName(hijri_date_picker_manager, "_name");
  hijri_date_picker_manager.HijriDatePickerView = class HijriDatePickerView extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (hijri_date_picker_manager.HijriDatePickerView.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[4], 1793, 6, "index");
    if (_name == null) dart.nullFailed(I[4], 1793, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerView.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerView);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerView);
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerView, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerView, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerView.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(hijri_date_picker_manager.HijriDatePickerView, ['toString']);
  hijri_date_picker_manager.HijriDatePickerView.month = C[363] || CT.C363;
  hijri_date_picker_manager.HijriDatePickerView.year = C[364] || CT.C364;
  hijri_date_picker_manager.HijriDatePickerView.decade = C[365] || CT.C365;
  hijri_date_picker_manager.HijriDatePickerView.values = C[366] || CT.C366;
  var visibleDateRange$ = dart.privateName(hijri_date_picker_manager, "HijriDatePickerViewChangedArgs.visibleDateRange");
  var view$0 = dart.privateName(hijri_date_picker_manager, "HijriDatePickerViewChangedArgs.view");
  hijri_date_picker_manager.HijriDatePickerViewChangedArgs = class HijriDatePickerViewChangedArgs extends core.Object {
    get visibleDateRange() {
      return this[visibleDateRange$];
    }
    set visibleDateRange(value) {
      super.visibleDateRange = value;
    }
    get view() {
      return this[view$0];
    }
    set view(value) {
      super.view = value;
    }
  };
  (hijri_date_picker_manager.HijriDatePickerViewChangedArgs.new = function(visibleDateRange, view) {
    if (visibleDateRange == null) dart.nullFailed(I[4], 1811, 45, "visibleDateRange");
    if (view == null) dart.nullFailed(I[4], 1811, 68, "view");
    this[visibleDateRange$] = visibleDateRange;
    this[view$0] = view;
    ;
  }).prototype = hijri_date_picker_manager.HijriDatePickerViewChangedArgs.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDatePickerViewChangedArgs);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDatePickerViewChangedArgs);
  dart.setLibraryUri(hijri_date_picker_manager.HijriDatePickerViewChangedArgs, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDatePickerViewChangedArgs, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDatePickerViewChangedArgs.__proto__),
    visibleDateRange: dart.finalFieldType(hijri_date_picker_manager.HijriDateRange),
    view: dart.finalFieldType(hijri_date_picker_manager.HijriDatePickerView)
  }));
  var startDate$ = dart.privateName(hijri_date_picker_manager, "HijriDateRange.startDate");
  var endDate$ = dart.privateName(hijri_date_picker_manager, "HijriDateRange.endDate");
  const Object_Diagnosticable$36$2 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$2.new = function() {
  }).prototype = Object_Diagnosticable$36$2.prototype;
  dart.applyMixin(Object_Diagnosticable$36$2, diagnostics.Diagnosticable);
  hijri_date_picker_manager.HijriDateRange = class HijriDateRange extends Object_Diagnosticable$36$2 {
    get startDate() {
      return this[startDate$];
    }
    set startDate(value) {
      super.startDate = value;
    }
    get endDate() {
      return this[endDate$];
    }
    set endDate(value) {
      super.endDate = value;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[4], 1839, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("startDate", this.startDate));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("endDate", this.endDate));
    }
  };
  (hijri_date_picker_manager.HijriDateRange.new = function(startDate, endDate) {
    this[startDate$] = startDate;
    this[endDate$] = endDate;
    ;
  }).prototype = hijri_date_picker_manager.HijriDateRange.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDateRange);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDateRange);
  dart.setLibraryUri(hijri_date_picker_manager.HijriDateRange, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDateRange, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDateRange.__proto__),
    startDate: dart.finalFieldType(dart.nullable(core$.HijriDateTime)),
    endDate: dart.finalFieldType(dart.nullable(core$.HijriDateTime))
  }));
  var date$ = dart.privateName(hijri_date_picker_manager, "HijriDateRangePickerCellDetails.date");
  var bounds$ = dart.privateName(hijri_date_picker_manager, "HijriDateRangePickerCellDetails.bounds");
  var visibleDates$1 = dart.privateName(hijri_date_picker_manager, "HijriDateRangePickerCellDetails.visibleDates");
  hijri_date_picker_manager.HijriDateRangePickerCellDetails = class HijriDateRangePickerCellDetails extends core.Object {
    get date() {
      return this[date$];
    }
    set date(value) {
      super.date = value;
    }
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get visibleDates() {
      return this[visibleDates$1];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
  };
  (hijri_date_picker_manager.HijriDateRangePickerCellDetails.new = function(opts) {
    let date = opts && 'date' in opts ? opts.date : null;
    if (date == null) dart.nullFailed(I[4], 1855, 22, "date");
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    if (bounds == null) dart.nullFailed(I[4], 1855, 42, "bounds");
    let visibleDates = opts && 'visibleDates' in opts ? opts.visibleDates : null;
    if (visibleDates == null) dart.nullFailed(I[4], 1855, 64, "visibleDates");
    this[date$] = date;
    this[bounds$] = bounds;
    this[visibleDates$1] = visibleDates;
    ;
  }).prototype = hijri_date_picker_manager.HijriDateRangePickerCellDetails.prototype;
  dart.addTypeTests(hijri_date_picker_manager.HijriDateRangePickerCellDetails);
  dart.addTypeCaches(hijri_date_picker_manager.HijriDateRangePickerCellDetails);
  dart.setLibraryUri(hijri_date_picker_manager.HijriDateRangePickerCellDetails, I[5]);
  dart.setFieldSignature(hijri_date_picker_manager.HijriDateRangePickerCellDetails, () => ({
    __proto__: dart.getFields(hijri_date_picker_manager.HijriDateRangePickerCellDetails.__proto__),
    date: dart.finalFieldType(core$.HijriDateTime),
    bounds: dart.finalFieldType(ui.Rect),
    visibleDates: dart.finalFieldType(core.List$(core$.HijriDateTime))
  }));
  picker_helper.DateRangePickerHelper = class DateRangePickerHelper extends core.Object {
    static getRtlIndex(count, index) {
      if (count == null) dart.nullFailed(I[8], 12, 30, "count");
      if (index == null) dart.nullFailed(I[8], 12, 41, "index");
      return dart.notNull(count) - dart.notNull(index) - 1;
    }
    static getViewDatesCount(pickerView, numberOfWeeks, isHijri) {
      if (pickerView == null) dart.nullFailed(I[8], 18, 27, "pickerView");
      if (numberOfWeeks == null) dart.nullFailed(I[8], 18, 43, "numberOfWeeks");
      if (isHijri == null) dart.nullFailed(I[8], 18, 63, "isHijri");
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        if (dart.test(isHijri)) {
          return 7 * 6;
        } else {
          return 7 * dart.notNull(numberOfWeeks);
        }
      }
      return 0;
    }
    static isRangeEquals(range1, range2) {
      if (range1 == null && range2 != null || range2 == null && range1 != null) {
        return false;
      }
      if (dart.equals(range1, range2) || dart.test(core$.isSameDate(dart.dload(range1, 'startDate'), dart.dload(range2, 'startDate'))) && dart.test(core$.isSameDate(dart.dload(range1, 'endDate'), dart.dload(range2, 'endDate')))) {
        return true;
      }
      return false;
    }
    static isDateRangesEquals(rangeCollection1, rangeCollection2) {
      let t31, t31$;
      if (dart.equals(rangeCollection1, rangeCollection2)) {
        return true;
      }
      if (rangeCollection1 == null && rangeCollection2 != null && dart.test(rangeCollection2[$isEmpty]) || rangeCollection2 == null && rangeCollection1 != null && dart.test(rangeCollection1[$isEmpty])) {
        return true;
      }
      if (rangeCollection1 == null && rangeCollection2 != null || rangeCollection2 == null && rangeCollection1 != null || (t31 = rangeCollection1, t31 == null ? null : t31[$length]) != (t31$ = rangeCollection2, t31$ == null ? null : t31$[$length])) {
        return false;
      }
      for (let i = 0; i < dart.notNull(dart.nullCheck(rangeCollection1)[$length]); i = i + 1) {
        if (!dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(rangeCollection1[$_get](i), dart.nullCheck(rangeCollection2)[$_get](i)))) {
          return false;
        }
      }
      return true;
    }
    static getNextViewStartDate(pickerView, numberOfWeeksInView, date, isRtl, isHijri) {
      if (pickerView == null) dart.nullFailed(I[8], 80, 59, "pickerView");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 81, 11, "numberOfWeeksInView");
      if (isRtl == null) dart.nullFailed(I[8], 81, 51, "isRtl");
      if (isHijri == null) dart.nullFailed(I[8], 81, 63, "isHijri");
      if (dart.test(isRtl)) {
        return picker_helper.DateRangePickerHelper.getPreviousViewStartDate(pickerView, numberOfWeeksInView, date, false, isHijri);
      }
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            return dart.test(isHijri) || numberOfWeeksInView === 6 ? core$.getNextMonthDate(date) : core$.addDays(date, dart.notNull(numberOfWeeksInView) * 7);
          }
        }
        case C[368] || CT.C368:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextYearDate(date, 1, isHijri);
          }
        }
        case C[369] || CT.C369:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextYearDate(date, 10, isHijri);
          }
        }
        case C[370] || CT.C370:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextYearDate(date, 100, isHijri);
          }
        }
      }
    }
    static getPreviousViewStartDate(pickerView, numberOfWeeksInView, date, isRtl, isHijri) {
      if (pickerView == null) dart.nullFailed(I[8], 110, 63, "pickerView");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 111, 11, "numberOfWeeksInView");
      if (isRtl == null) dart.nullFailed(I[8], 111, 51, "isRtl");
      if (isHijri == null) dart.nullFailed(I[8], 111, 63, "isHijri");
      if (dart.test(isRtl)) {
        return picker_helper.DateRangePickerHelper.getNextViewStartDate(pickerView, numberOfWeeksInView, date, false, isHijri);
      }
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            return dart.test(isHijri) || numberOfWeeksInView === 6 ? core$.getPreviousMonthDate(date) : core$.addDays(date, -dart.notNull(numberOfWeeksInView) * 7);
          }
        }
        case C[368] || CT.C368:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousYearDate(date, 1, isHijri);
          }
        }
        case C[369] || CT.C369:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousYearDate(date, 10, isHijri);
          }
        }
        case C[370] || CT.C370:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousYearDate(date, 100, isHijri);
          }
        }
      }
    }
    static getNextYearDate(date, offset, isHijri) {
      if (offset == null) dart.nullFailed(I[8], 142, 52, "offset");
      if (isHijri == null) dart.nullFailed(I[8], 142, 65, "isHijri");
      return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dsend(dart.dsend(dart.dsend(dart.dload(date, 'year'), '~/', [offset]), '*', [offset]), '+', [offset])), 1, 1, isHijri);
    }
    static getPreviousYearDate(date, offset, isHijri) {
      if (offset == null) dart.nullFailed(I[8], 149, 56, "offset");
      if (isHijri == null) dart.nullFailed(I[8], 149, 69, "isHijri");
      return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dsend(dart.dsend(dart.dsend(dart.dload(date, 'year'), '~/', [offset]), '*', [offset]), '-', [offset])), 1, 1, isHijri);
    }
    static getMonthStartDate(date, isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 154, 55, "isHijri");
      return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), 1, isHijri);
    }
    static getMonthEndDate(date) {
      return core$.addDays(core$.getNextMonthDate(date), -1);
    }
    static isDateIndexInCollection(dates, date) {
      if (dates == null || date == null) {
        return -1;
      }
      for (let i = 0; i < dart.notNull(dates[$length]); i = i + 1) {
        let visibleDate = dates[$_get](i);
        if (dart.test(core$.isSameDate(visibleDate, date))) {
          return i;
        }
      }
      return -1;
    }
    static isDateCollectionEquals(datesCollection1, datesCollection2) {
      let t31, t31$;
      if (dart.equals(datesCollection1, datesCollection2)) {
        return true;
      }
      if (datesCollection1 == null && datesCollection2 != null && dart.test(datesCollection2[$isEmpty]) || datesCollection2 == null && datesCollection1 != null && dart.test(datesCollection1[$isEmpty])) {
        return false;
      }
      if (datesCollection1 == null && datesCollection2 != null || datesCollection2 == null && datesCollection1 != null || (t31 = datesCollection1, t31 == null ? null : t31[$length]) != (t31$ = datesCollection2, t31$ == null ? null : t31$[$length])) {
        return false;
      }
      for (let i = 0; i < dart.notNull(dart.nullCheck(datesCollection1)[$length]); i = i + 1) {
        if (!dart.test(core$.isSameDate(datesCollection1[$_get](i), dart.nullCheck(datesCollection2)[$_get](i)))) {
          return false;
        }
      }
      return true;
    }
    static isEnabledDate(startDate, endDate, enablePastDates, date, isHijri) {
      if (enablePastDates == null) dart.nullFailed(I[8], 213, 12, "enablePastDates");
      if (isHijri == null) dart.nullFailed(I[8], 213, 48, "isHijri");
      return dart.test(core$.isDateWithInDateRange(startDate, endDate, date)) && (dart.test(enablePastDates) || !dart.test(enablePastDates) && dart.test(core$.isDateWithInDateRange(picker_helper.DateRangePickerHelper.getToday(isHijri), endDate, date)));
    }
    static isDateAsCurrentMonthDate(visibleDate, rowCount, showLeadingAndTrialingDates, date, isHijri) {
      if (rowCount == null) dart.nullFailed(I[8], 221, 65, "rowCount");
      if (showLeadingAndTrialingDates == null) dart.nullFailed(I[8], 222, 12, "showLeadingAndTrialingDates");
      if (isHijri == null) dart.nullFailed(I[8], 222, 60, "isHijri");
      if ((rowCount === 6 && !dart.test(showLeadingAndTrialingDates) || dart.test(isHijri)) && !dart.equals(dart.dload(date, 'month'), dart.dload(visibleDate, 'month'))) {
        return false;
      }
      return true;
    }
    static getTopAndLeftValues(isRtl, left, top, cellWidth, cellHeight, width) {
      if (isRtl == null) dart.nullFailed(I[8], 233, 55, "isRtl");
      if (left == null) dart.nullFailed(I[8], 233, 69, "left");
      if (top == null) dart.nullFailed(I[8], 234, 14, "top");
      if (cellWidth == null) dart.nullFailed(I[8], 234, 26, "cellWidth");
      if (cellHeight == null) dart.nullFailed(I[8], 234, 44, "cellHeight");
      if (width == null) dart.nullFailed(I[8], 234, 63, "width");
      let topAndLeft = new (T.IdentityMapOfString$double()).from(["left", left, "top", top]);
      if (dart.test(isRtl)) {
        if (left[$round]() === cellWidth[$round]()) {
          left = 0.0;
        } else {
          left = dart.notNull(left) - dart.notNull(cellWidth);
        }
        if (dart.notNull(left) < 0) {
          left = dart.notNull(width) - dart.notNull(cellWidth);
          top = dart.notNull(top) + dart.notNull(cellHeight);
        }
      } else {
        left = dart.notNull(left) + dart.notNull(cellWidth);
        if (dart.notNull(left) + 1 >= dart.notNull(width)) {
          top = dart.notNull(top) + dart.notNull(cellHeight);
          left = 0.0;
        }
      }
      topAndLeft[$_set]("left", left);
      topAndLeft[$_set]("top", top);
      return topAndLeft;
    }
    static isDateWithInVisibleDates(visibleDates, dates, date) {
      if (visibleDates == null) dart.nullFailed(I[8], 264, 21, "visibleDates");
      if (dates == null || dart.test(dates[$isEmpty])) {
        return false;
      }
      let visibleStartDate = visibleDates[$_get](0);
      let visibleEndDate = visibleDates[$_get](dart.notNull(visibleDates[$length]) - 1);
      for (let currentDate of dates) {
        if (!dart.test(core$.isDateWithInDateRange(visibleStartDate, visibleEndDate, currentDate))) {
          continue;
        }
        if (dart.test(core$.isSameDate(currentDate, date))) {
          return true;
        }
      }
      return false;
    }
    static isWeekend(weekendIndex, date) {
      if (weekendIndex == null || dart.test(weekendIndex[$isEmpty])) {
        return false;
      }
      return weekendIndex[$contains](dart.dload(date, 'weekday'));
    }
    static canMoveToPreviousViewRtl(view, numberOfWeeksInView, minDate, maxDate, visibleDates, isRtl, enableMultiView, isHijri) {
      if (view == null) dart.nullFailed(I[8], 296, 27, "view");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 297, 11, "numberOfWeeksInView");
      if (visibleDates == null) dart.nullFailed(I[8], 300, 21, "visibleDates");
      if (isRtl == null) dart.nullFailed(I[8], 301, 12, "isRtl");
      if (enableMultiView == null) dart.nullFailed(I[8], 302, 12, "enableMultiView");
      if (isHijri == null) dart.nullFailed(I[8], 303, 12, "isHijri");
      if (dart.test(isRtl)) {
        return picker_helper.DateRangePickerHelper.canMoveToNextView(view, numberOfWeeksInView, maxDate, visibleDates, enableMultiView, isHijri);
      } else {
        return picker_helper.DateRangePickerHelper.canMoveToPreviousView(view, numberOfWeeksInView, minDate, visibleDates, enableMultiView, isHijri);
      }
    }
    static canMoveToNextViewRtl(view, numberOfWeeksInView, minDate, maxDate, visibleDates, isRtl, enableMultiView, isHijri) {
      if (view == null) dart.nullFailed(I[8], 315, 27, "view");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 316, 11, "numberOfWeeksInView");
      if (visibleDates == null) dart.nullFailed(I[8], 319, 21, "visibleDates");
      if (isRtl == null) dart.nullFailed(I[8], 320, 12, "isRtl");
      if (enableMultiView == null) dart.nullFailed(I[8], 321, 12, "enableMultiView");
      if (isHijri == null) dart.nullFailed(I[8], 322, 12, "isHijri");
      if (dart.test(isRtl)) {
        return picker_helper.DateRangePickerHelper.canMoveToPreviousView(view, numberOfWeeksInView, minDate, visibleDates, enableMultiView, isHijri);
      } else {
        return picker_helper.DateRangePickerHelper.canMoveToNextView(view, numberOfWeeksInView, maxDate, visibleDates, enableMultiView, isHijri);
      }
    }
    static canMoveToPreviousView(view, numberOfWeeksInView, minDate, visibleDates, enableMultiView, isHijri) {
      if (view == null) dart.nullFailed(I[8], 334, 27, "view");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 335, 11, "numberOfWeeksInView");
      if (visibleDates == null) dart.nullFailed(I[8], 337, 21, "visibleDates");
      if (enableMultiView == null) dart.nullFailed(I[8], 338, 12, "enableMultiView");
      if (isHijri == null) dart.nullFailed(I[8], 339, 12, "isHijri");
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            if (numberOfWeeksInView !== 6 && !dart.test(isHijri)) {
              let prevViewDate = picker_helper.DateRangePickerHelper.getDateTimeValue(visibleDates[$_get](0));
              prevViewDate = picker_helper.DateRangePickerHelper.getDateTimeValue(core$.addDays(prevViewDate, -1));
              if (!dart.test(core$.isSameOrAfterDate(minDate, prevViewDate))) {
                return false;
              }
            } else {
              let currentDate = visibleDates[$_get]((dart.notNull(visibleDates[$length]) / (dart.test(enableMultiView) ? 4 : 2))[$truncate]());
              let previousDate = core$.getPreviousMonthDate(currentDate);
              if (dart.equals(dart.dsend(dart.dload(previousDate, 'month'), '<', [dart.dload(minDate, 'month')]), true) && dart.equals(dart.dload(previousDate, 'year'), dart.dload(minDate, 'year')) || dart.equals(dart.dsend(dart.dload(previousDate, 'year'), '<', [dart.dload(minDate, 'year')]), true)) {
                return false;
              }
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            let currentYear = core.int.as(dart.dload(visibleDates[$_get]((dart.notNull(visibleDates[$length]) / (dart.test(enableMultiView) ? 4 : 2))[$truncate]()), 'year'));
            let minYear = core.int.as(dart.dload(minDate, 'year'));
            let offset = picker_helper.DateRangePickerHelper.getOffset(view);
            if ((dart.notNull(currentYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset) - dart.notNull(offset) < (dart.notNull(minYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset)) {
              return false;
            }
          }
        }
      }
      return true;
    }
    static getOffset(view) {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          break;
        }
        case C[368] || CT.C368:
        {
          return 1;
        }
        case C[369] || CT.C369:
        {
          return 10;
        }
        case C[370] || CT.C370:
        {
          return 100;
        }
      }
      return 0;
    }
    static getVisibleYearDates(date, view, isHijri) {
      if (view == null) dart.nullFailed(I[8], 402, 41, "view");
      if (isHijri == null) dart.nullFailed(I[8], 402, 52, "isHijri");
      let datesCollection = null;
      if (dart.test(isHijri)) {
        datesCollection = T.JSArrayOfHijriDateTime().of([]);
      } else {
        datesCollection = T.JSArrayOfDateTime().of([]);
      }
      let currentDate = null;
      switch (view) {
        case C[367] || CT.C367:
        {
          break;
        }
        case C[368] || CT.C368:
        {
          {
            for (let i = 1; i <= 12; i = i + 1) {
              currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), i, 1, isHijri);
              datesCollection[$add](currentDate);
            }
          }
          break;
        }
        case C[369] || CT.C369:
        {
          {
            let year = (dart.notNull(core.int.as(dart.dload(date, 'year'))) / 10)[$truncate]() * 10;
            for (let i = 0; i < 12; i = i + 1) {
              currentDate = picker_helper.DateRangePickerHelper.getDate(year + i, 1, 1, isHijri);
              datesCollection[$add](currentDate);
            }
          }
          break;
        }
        case C[370] || CT.C370:
        {
          {
            let year = (dart.notNull(core.int.as(dart.dload(date, 'year'))) / 100)[$truncate]() * 100;
            for (let i = 0; i < 12; i = i + 1) {
              currentDate = picker_helper.DateRangePickerHelper.getDate(year + i * 10, 1, 1, isHijri);
              datesCollection[$add](currentDate);
            }
          }
        }
      }
      return datesCollection;
    }
    static canMoveToNextView(view, numberOfWeeksInView, maxDate, visibleDates, enableMultiView, isHijri) {
      if (view == null) dart.nullFailed(I[8], 450, 27, "view");
      if (numberOfWeeksInView == null) dart.nullFailed(I[8], 451, 11, "numberOfWeeksInView");
      if (visibleDates == null) dart.nullFailed(I[8], 453, 21, "visibleDates");
      if (enableMultiView == null) dart.nullFailed(I[8], 454, 12, "enableMultiView");
      if (isHijri == null) dart.nullFailed(I[8], 455, 12, "isHijri");
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            if (!dart.test(isHijri) && numberOfWeeksInView !== 6) {
              let nextViewDate = picker_helper.DateRangePickerHelper.getDateTimeValue(visibleDates[$_get](dart.notNull(visibleDates[$length]) - 1));
              nextViewDate = picker_helper.DateRangePickerHelper.getDateTimeValue(core$.addDays(nextViewDate, 1));
              if (!dart.test(core$.isSameOrBeforeDate(maxDate, nextViewDate))) {
                return false;
              }
            } else {
              let currentDate = visibleDates[$_get]((dart.notNull(visibleDates[$length]) / (dart.test(enableMultiView) ? 4 : 2))[$truncate]());
              let nextDate = core$.getNextMonthDate(currentDate);
              if (dart.equals(dart.dsend(dart.dload(nextDate, 'month'), '>', [dart.dload(maxDate, 'month')]), true) && dart.equals(dart.dload(nextDate, 'year'), dart.dload(maxDate, 'year')) || dart.equals(dart.dsend(dart.dload(nextDate, 'year'), '>', [dart.dload(maxDate, 'year')]), true)) {
                return false;
              }
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            let currentYear = core.int.as(dart.dload(visibleDates[$_get]((dart.notNull(visibleDates[$length]) / (dart.test(enableMultiView) ? 4 : 2))[$truncate]()), 'year'));
            let maxYear = core.int.as(dart.dload(maxDate, 'year'));
            let offset = picker_helper.DateRangePickerHelper.getOffset(view);
            if ((dart.notNull(currentYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset) + dart.notNull(offset) > (dart.notNull(maxYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset)) {
              return false;
            }
          }
        }
      }
      return true;
    }
    static cloneList(value) {
      if (value == null) {
        return value;
      }
      return value[$sublist](0);
    }
    static isMobileLayout(platform) {
      if (platform == null) dart.nullFailed(I[8], 507, 45, "platform");
      if (true) {
        return false;
      }
      return platform == platform$.TargetPlatform.android || platform == platform$.TargetPlatform.iOS;
    }
    static getHijriMonthText(date, localizations, format) {
      if (localizations == null) dart.nullFailed(I[8], 518, 37, "localizations");
      if (format == null) dart.nullFailed(I[8], 518, 59, "format");
      if (dart.equals(dart.dload(date, 'month'), 1)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortMuharramLabel;
        }
        return localizations.muharramLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 2)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortSafarLabel;
        }
        return localizations.safarLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 3)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortRabi1Label;
        }
        return localizations.rabi1Label;
      } else if (dart.equals(dart.dload(date, 'month'), 4)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortRabi2Label;
        }
        return localizations.rabi2Label;
      } else if (dart.equals(dart.dload(date, 'month'), 5)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortJumada1Label;
        }
        return localizations.jumada1Label;
      } else if (dart.equals(dart.dload(date, 'month'), 6)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortJumada2Label;
        }
        return localizations.jumada2Label;
      } else if (dart.equals(dart.dload(date, 'month'), 7)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortRajabLabel;
        }
        return localizations.rajabLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 8)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortShaabanLabel;
        }
        return localizations.shaabanLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 9)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortRamadanLabel;
        }
        return localizations.ramadanLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 10)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortShawwalLabel;
        }
        return localizations.shawwalLabel;
      } else if (dart.equals(dart.dload(date, 'month'), 11)) {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortDhualqiLabel;
        }
        return localizations.dhualqiLabel;
      } else {
        if (format === "M" || format === "MM") {
          return dart.toString(dart.dload(date, 'month'));
        } else if (format === "MMM") {
          return localizations.shortDhualhiLabel;
        }
        return localizations.dhualhiLabel;
      }
    }
    static getPickerView(view) {
      if (date_picker_manager.DateRangePickerView.is(view)) {
        return view;
      }
      switch (view) {
        case C[363] || CT.C363:
        {
          {
            return date_picker_manager.DateRangePickerView.month;
          }
        }
        case C[364] || CT.C364:
        {
          {
            return date_picker_manager.DateRangePickerView.year;
          }
        }
        case C[365] || CT.C365:
        {
          {
            return date_picker_manager.DateRangePickerView.decade;
          }
        }
      }
      return date_picker_manager.DateRangePickerView.month;
    }
    static getHijriPickerView(view) {
      if (hijri_date_picker_manager.HijriDatePickerView.is(view)) {
        return view;
      }
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            return hijri_date_picker_manager.HijriDatePickerView.month;
          }
        }
        case C[368] || CT.C368:
        {
          {
            return hijri_date_picker_manager.HijriDatePickerView.year;
          }
        }
        case C[369] || CT.C369:
        {
          {
            return hijri_date_picker_manager.HijriDatePickerView.decade;
          }
        }
        case C[370] || CT.C370:
        {
          {
            return hijri_date_picker_manager.HijriDatePickerView.decade;
          }
        }
      }
      return hijri_date_picker_manager.HijriDatePickerView.month;
    }
    static getNumberOfWeeksInView(monthViewSettings, isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 661, 69, "isHijri");
      if (dart.test(isHijri)) {
        return 6;
      }
      return core.int.as(dart.dload(monthViewSettings, 'numberOfWeeksInView'));
    }
    static canShowLeadingAndTrailingDates(monthViewSettings, isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 671, 39, "isHijri");
      if (dart.test(isHijri)) {
        return false;
      }
      return dart.equals(dart.dload(monthViewSettings, 'showTrailingAndLeadingDates'), true);
    }
    static getToday(isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 680, 32, "isHijri");
      if (dart.test(isHijri)) {
        return core$.HijriDateTime.now();
      }
      return new core.DateTime.now();
    }
    static getDate(year, month, day, isHijri) {
      if (year == null) dart.nullFailed(I[8], 689, 30, "year");
      if (month == null) dart.nullFailed(I[8], 689, 40, "month");
      if (day == null) dart.nullFailed(I[8], 689, 51, "day");
      if (isHijri == null) dart.nullFailed(I[8], 689, 61, "isHijri");
      if (dart.test(isHijri)) {
        return new core$.HijriDateTime.new(year, month, day);
      }
      return new core.DateTime.new(year, month, day);
    }
    static isSameCellDates(date, currentDate, view) {
      if (date == null || currentDate == null) {
        return false;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        return false;
      }
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        return dart.equals(dart.dload(date, 'month'), dart.dload(currentDate, 'month')) && dart.equals(dart.dload(date, 'year'), dart.dload(currentDate, 'year'));
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return dart.equals(dart.dload(date, 'year'), dart.dload(currentDate, 'year'));
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        return dart.equals(dart.dsend(dart.dload(date, 'year'), '~/', [10]), dart.dsend(dart.dload(currentDate, 'year'), '~/', [10]));
      }
      return false;
    }
    static isLeadingCellDate(index, viewStartIndex, visibleDates, view) {
      if (index == null) dart.nullFailed(I[8], 728, 11, "index");
      if (viewStartIndex == null) dart.nullFailed(I[8], 728, 22, "viewStartIndex");
      if (visibleDates == null) dart.nullFailed(I[8], 728, 52, "visibleDates");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      if (pickerView == date_picker_manager.DateRangePickerView.month || pickerView == date_picker_manager.DateRangePickerView.year) {
        return false;
      }
      let currentDate = visibleDates[$_get](index);
      let viewStartDate = visibleDates[$_get](viewStartIndex);
      if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return !dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '~/', [10]), dart.dsend(dart.dload(viewStartDate, 'year'), '~/', [10]));
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        return !dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '~/', [100]), dart.dsend(dart.dload(viewStartDate, 'year'), '~/', [100]));
      }
      return false;
    }
    static isBetweenMinMaxDateCell(date, minDate, maxDate, enablePastDates, view, isHijri) {
      if (enablePastDates == null) dart.nullFailed(I[8], 753, 29, "enablePastDates");
      if (isHijri == null) dart.nullFailed(I[8], 753, 65, "isHijri");
      if (date == null || minDate == null || maxDate == null) {
        return true;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        return false;
      }
      let today = picker_helper.DateRangePickerHelper.getToday(isHijri);
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        return (dart.equals(dart.dsend(dart.dload(date, 'month'), '>=', [dart.dload(minDate, 'month')]), true) && dart.equals(dart.dload(date, 'year'), dart.dload(minDate, 'year')) || dart.equals(dart.dsend(dart.dload(date, 'year'), '>', [dart.dload(minDate, 'year')]), true)) && (dart.equals(dart.dsend(dart.dload(date, 'month'), '<=', [dart.dload(maxDate, 'month')]), true) && dart.equals(dart.dload(date, 'year'), dart.dload(maxDate, 'year')) || dart.equals(dart.dsend(dart.dload(date, 'year'), '<', [dart.dload(maxDate, 'year')]), true)) && (dart.test(enablePastDates) || !dart.test(enablePastDates) && (dart.equals(dart.dsend(dart.dload(date, 'month'), '>=', [dart.dload(today, 'month')]), true) && dart.equals(dart.dload(date, 'year'), dart.dload(today, 'year')) || dart.equals(dart.dsend(dart.dload(date, 'year'), '>', [dart.dload(today, 'year')]), true)));
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return dart.equals(dart.dsend(dart.dload(date, 'year'), '>=', [dart.dload(minDate, 'year')]), true) && dart.equals(dart.dsend(dart.dload(date, 'year'), '<=', [dart.dload(maxDate, 'year')]), true) && (dart.test(enablePastDates) || !dart.test(enablePastDates) && dart.equals(dart.dsend(dart.dload(date, 'year'), '>=', [dart.dload(today, 'year')]), true));
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        let currentYear = (dart.notNull(core.int.as(dart.dload(date, 'year'))) / 10)[$truncate]();
        return currentYear >= dart.notNull(core.num.as(dart.dsend(dart.dload(minDate, 'year'), '~/', [10]))) && currentYear <= dart.notNull(core.num.as(dart.dsend(dart.dload(maxDate, 'year'), '~/', [10]))) && (dart.test(enablePastDates) || !dart.test(enablePastDates) && currentYear >= dart.notNull(core.num.as(dart.dsend(dart.dload(today, 'year'), '~/', [10]))));
      }
      return false;
    }
    static getLastDate(date, view, isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 795, 63, "isHijri");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        return date;
      }
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        let currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dsend(dart.dload(date, 'month'), '+', [1])), 1, isHijri);
        return core$.addDays(currentDate, -1);
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        let currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dsend(dart.dload(date, 'year'), '+', [1])), 1, 1, isHijri);
        return core$.addDays(currentDate, -1);
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        let currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dsend(dart.dsend(dart.dsend(dart.dload(date, 'year'), '~/', [10]), '*', [10]), '+', [10])), 1, 1, isHijri);
        return core$.addDays(currentDate, -1);
      }
      return date;
    }
    static getDateCellIndex(dates, date, view, opts) {
      if (dates == null) dart.nullFailed(I[8], 819, 45, "dates");
      let viewStartIndex = opts && 'viewStartIndex' in opts ? opts.viewStartIndex : -1;
      if (viewStartIndex == null) dart.nullFailed(I[8], 820, 12, "viewStartIndex");
      let viewEndIndex = opts && 'viewEndIndex' in opts ? opts.viewEndIndex : -1;
      if (viewEndIndex == null) dart.nullFailed(I[8], 820, 37, "viewEndIndex");
      if (date == null) {
        return -1;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(view);
      viewStartIndex = viewStartIndex === -1 ? 0 : viewStartIndex;
      viewEndIndex = viewEndIndex === -1 ? dart.notNull(dates[$length]) - 1 : viewEndIndex;
      for (let i = viewStartIndex; dart.notNull(i) <= dart.notNull(viewEndIndex); i = dart.notNull(i) + 1) {
        let currentDate = dates[$_get](i);
        if (dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(date, currentDate, pickerView))) {
          return i;
        }
      }
      return -1;
    }
    static getDateTimeValue(date) {
      let dateTimeData = null;
      function dateTimeData$35get() {
        let t32;
        t32 = dateTimeData;
        return t32 == null ? dart.throw(new _internal.LateError.localNI("dateTimeData")) : t32;
      }
      dart.fn(dateTimeData$35get, T.VoidToDateTime());
      function dateTimeData$35set(t33) {
        if (t33 == null) dart.nullFailed(I[8], 840, 25, "null");
        if (dateTimeData == null)
          return dateTimeData = t33;
        else
          dart.throw(new _internal.LateError.localAI("dateTimeData"));
      }
      dart.fn(dateTimeData$35set, T.DateTimeTodynamic());
      if (core.DateTime.is(date)) {
        dateTimeData$35set(date);
      }
      return dateTimeData$35get();
    }
    static getWeekNumberPanelWidth(showWeekNumber, width, isMobilePlatform) {
      if (showWeekNumber == null) dart.nullFailed(I[8], 850, 12, "showWeekNumber");
      if (width == null) dart.nullFailed(I[8], 850, 35, "width");
      if (isMobilePlatform == null) dart.nullFailed(I[8], 850, 47, "isMobilePlatform");
      return dart.test(showWeekNumber) ? dart.notNull(width) / (7 + 1) / (dart.test(isMobilePlatform) ? 1.3 : 4) : 0.0;
    }
    static getWeekNumberOfYear(date, isHijri) {
      if (isHijri == null) dart.nullFailed(I[8], 857, 53, "isHijri");
      let yearEndDate = dart.test(isHijri) ? new core$.HijriDateTime.new(core.int.as(dart.dsend(dart.dload(date, 'year'), '-', [1])), 12, 31) : new core.DateTime.new(core.int.as(dart.dsend(dart.dload(date, 'year'), '-', [1])), 12, 31);
      let dayOfYear = core.int.as(dart.dload(dart.dsend(date, 'difference', [yearEndDate]), 'inDays'));
      let weekNumber = ((dart.notNull(dayOfYear) - dart.notNull(core.num.as(dart.dload(date, 'weekday'))) + 10) / 7)[$truncate]();
      if (dart.notNull(weekNumber) < 1) {
        weekNumber = picker_helper.DateRangePickerHelper.getWeeksInYear(core.int.as(dart.dsend(dart.dload(date, 'year'), '-', [1])));
      } else if (dart.notNull(weekNumber) > dart.notNull(picker_helper.DateRangePickerHelper.getWeeksInYear(core.int.as(dart.dload(date, 'year'))))) {
        weekNumber = 1;
      }
      return weekNumber;
    }
    static getWeeksInYear(year) {
      if (year == null) dart.nullFailed(I[8], 872, 33, "year");
      function P(y) {
        if (y == null) dart.nullFailed(I[8], 873, 15, "y");
        return (dart.notNull(y) + (dart.notNull(y) / 4)[$truncate]() - (dart.notNull(y) / 100)[$truncate]() + (dart.notNull(y) / 400)[$truncate]())[$modulo](7);
      }
      dart.fn(P, T.intToint());
      if (P(year) === 4 || P(dart.notNull(year) - 1) === 3) {
        return 53;
      }
      return 52;
    }
    static drawDashedLine(xPosition, yPosition, endXPosition, canvas, painter) {
      if (xPosition == null) dart.nullFailed(I[8], 881, 37, "xPosition");
      if (yPosition == null) dart.nullFailed(I[8], 881, 55, "yPosition");
      if (endXPosition == null) dart.nullFailed(I[8], 882, 14, "endXPosition");
      if (canvas == null) dart.nullFailed(I[8], 882, 35, "canvas");
      if (painter == null) dart.nullFailed(I[8], 882, 49, "painter");
      while (dart.notNull(xPosition) < dart.notNull(endXPosition)) {
        canvas.drawLine(new ui.Offset.new(xPosition, yPosition), new ui.Offset.new(dart.notNull(xPosition) + 4, yPosition), painter);
        xPosition = dart.notNull(xPosition) + (4 + 5);
      }
    }
    static getDashedPath(sourcePath, isStartRange, isEndRange, isRectSelection) {
      if (sourcePath == null) dart.nullFailed(I[8], 892, 34, "sourcePath");
      if (isStartRange == null) dart.nullFailed(I[8], 892, 51, "isStartRange");
      if (isEndRange == null) dart.nullFailed(I[8], 892, 70, "isEndRange");
      if (isRectSelection == null) dart.nullFailed(I[8], 893, 12, "isRectSelection");
      let dashedPath = ui.Path.new();
      let array = T.JSArrayOfdouble().of([6.0, 5.0]);
      let sourceMetrics = sourcePath.computeMetrics()[$toList]();
      let sourceRect = sourcePath.getBounds();
      let restrictXPosition = dart.test(isRectSelection) ? dart.test(isStartRange) ? sourceRect.right : sourceRect.left : -1.0;
      for (let i = 0; i < dart.notNull(sourceMetrics[$length]); i = i + 1) {
        let metric = sourceMetrics[$_get](i);
        let distance = 0.0;
        let canDrawPath = true;
        let j = 0;
        while (distance < dart.notNull(metric.length)) {
          let length = array[$_get](j);
          if (canDrawPath) {
            let extractedPath = metric.extractPath(distance, distance + dart.notNull(length));
            let extractedRect = extractedPath.getBounds();
            if (dart.test(isStartRange) && extractedRect.right != restrictXPosition || dart.test(isEndRange) && extractedRect.left != restrictXPosition) {
              dashedPath.addPath(extractedPath, ui.Offset.zero);
            }
          }
          distance = distance + dart.notNull(length);
          canDrawPath = !canDrawPath;
          if (j + 1 >= dart.notNull(array[$length])) {
            j = 0;
          } else {
            j = j + 1;
          }
        }
      }
      return dashedPath;
    }
  };
  (picker_helper.DateRangePickerHelper.new = function() {
    ;
  }).prototype = picker_helper.DateRangePickerHelper.prototype;
  dart.addTypeTests(picker_helper.DateRangePickerHelper);
  dart.addTypeCaches(picker_helper.DateRangePickerHelper);
  dart.setLibraryUri(picker_helper.DateRangePickerHelper, I[9]);
  var hoveringRange$ = dart.privateName(picker_helper, "HoveringDetails.hoveringRange");
  var offset$ = dart.privateName(picker_helper, "HoveringDetails.offset");
  picker_helper.HoveringDetails = class HoveringDetails extends core.Object {
    get hoveringRange() {
      return this[hoveringRange$];
    }
    set hoveringRange(value) {
      super.hoveringRange = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
  };
  (picker_helper.HoveringDetails.new = function(hoveringRange, offset) {
    this[hoveringRange$] = hoveringRange;
    this[offset$] = offset;
    ;
  }).prototype = picker_helper.HoveringDetails.prototype;
  dart.addTypeTests(picker_helper.HoveringDetails);
  dart.addTypeCaches(picker_helper.HoveringDetails);
  dart.setLibraryUri(picker_helper.HoveringDetails, I[9]);
  dart.setFieldSignature(picker_helper.HoveringDetails, () => ({
    __proto__: dart.getFields(picker_helper.HoveringDetails.__proto__),
    hoveringRange: dart.finalFieldType(dart.dynamic),
    offset: dart.finalFieldType(dart.nullable(ui.Offset))
  }));
  var currentDate = dart.privateName(picker_helper, "PickerStateArgs.currentDate");
  var currentViewVisibleDates = dart.privateName(picker_helper, "PickerStateArgs.currentViewVisibleDates");
  var selectedDate = dart.privateName(picker_helper, "PickerStateArgs.selectedDate");
  var selectedDates = dart.privateName(picker_helper, "PickerStateArgs.selectedDates");
  var selectedRange = dart.privateName(picker_helper, "PickerStateArgs.selectedRange");
  var selectedRanges = dart.privateName(picker_helper, "PickerStateArgs.selectedRanges");
  var view = dart.privateName(picker_helper, "PickerStateArgs.view");
  picker_helper.PickerStateArgs = class PickerStateArgs extends core.Object {
    get currentDate() {
      return this[currentDate];
    }
    set currentDate(value) {
      this[currentDate] = value;
    }
    get currentViewVisibleDates() {
      return this[currentViewVisibleDates];
    }
    set currentViewVisibleDates(value) {
      this[currentViewVisibleDates] = value;
    }
    get selectedDate() {
      return this[selectedDate];
    }
    set selectedDate(value) {
      this[selectedDate] = value;
    }
    get selectedDates() {
      return this[selectedDates];
    }
    set selectedDates(value) {
      this[selectedDates] = value;
    }
    get selectedRange() {
      return this[selectedRange];
    }
    set selectedRange(value) {
      this[selectedRange] = value;
    }
    get selectedRanges() {
      return this[selectedRanges];
    }
    set selectedRanges(value) {
      this[selectedRanges] = value;
    }
    get view() {
      return this[view];
    }
    set view(value) {
      this[view] = value;
    }
    clone() {
      let t35;
      t35 = new picker_helper.PickerStateArgs.new();
      return (() => {
        t35.currentViewVisibleDates = this.currentViewVisibleDates;
        t35.currentDate = this.currentDate;
        t35.view = this.view;
        t35.selectedDate = this.selectedDate;
        t35.selectedDates = this.selectedDates;
        t35.selectedRange = this.selectedRange;
        t35.selectedRanges = this.selectedRanges;
        return t35;
      })();
    }
  };
  (picker_helper.PickerStateArgs.new = function() {
    this[currentDate] = null;
    this[currentViewVisibleDates] = [];
    this[selectedDate] = null;
    this[selectedDates] = null;
    this[selectedRange] = null;
    this[selectedRanges] = null;
    this[view] = date_picker_manager.DateRangePickerView.month;
    ;
  }).prototype = picker_helper.PickerStateArgs.prototype;
  dart.addTypeTests(picker_helper.PickerStateArgs);
  dart.addTypeCaches(picker_helper.PickerStateArgs);
  dart.setMethodSignature(picker_helper.PickerStateArgs, () => ({
    __proto__: dart.getMethods(picker_helper.PickerStateArgs.__proto__),
    clone: dart.fnType(picker_helper.PickerStateArgs, [])
  }));
  dart.setLibraryUri(picker_helper.PickerStateArgs, I[9]);
  dart.setFieldSignature(picker_helper.PickerStateArgs, () => ({
    __proto__: dart.getFields(picker_helper.PickerStateArgs.__proto__),
    currentDate: dart.fieldType(dart.dynamic),
    currentViewVisibleDates: dart.fieldType(core.List),
    selectedDate: dart.fieldType(dart.dynamic),
    selectedDates: dart.fieldType(dart.nullable(core.List)),
    selectedRange: dart.fieldType(dart.dynamic),
    selectedRanges: dart.fieldType(dart.nullable(core.List)),
    view: dart.fieldType(date_picker_manager.DateRangePickerView)
  }));
  var textStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerHeaderStyle.textStyle");
  var textAlign$ = dart.privateName(date_picker_manager, "DateRangePickerHeaderStyle.textAlign");
  var backgroundColor$ = dart.privateName(date_picker_manager, "DateRangePickerHeaderStyle.backgroundColor");
  var _name = dart.privateName(ui, "_name");
  const Object_Diagnosticable$36$3 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$3.new = function() {
  }).prototype = Object_Diagnosticable$36$3.prototype;
  dart.applyMixin(Object_Diagnosticable$36$3, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerHeaderStyle = class DateRangePickerHeaderStyle extends Object_Diagnosticable$36$3 {
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t36;
        t36 = otherStyle;
        return t36 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t36;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerHeaderStyle());
      function otherStyle$35set(t37) {
        if (t37 == null) dart.nullFailed(I[6], 124, 43, "null");
        if (otherStyle == null)
          return otherStyle = t37;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerHeaderStyleTodynamic());
      if (date_picker_manager.DateRangePickerHeaderStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && otherStyle$35get().textAlign == this.textAlign && dart.equals(otherStyle$35get().backgroundColor, this.backgroundColor);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 134, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfTextAlign()).new("textAlign", this.textAlign));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
    }
    get hashCode() {
      return ui.hashValues(this.textStyle, this.textAlign, this.backgroundColor);
    }
  };
  (date_picker_manager.DateRangePickerHeaderStyle.new = function(opts) {
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[371] || CT.C371;
    if (textAlign == null) dart.nullFailed(I[6], 34, 13, "textAlign");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[textAlign$] = textAlign;
    this[backgroundColor$] = backgroundColor;
    this[textStyle$1] = textStyle;
    ;
  }).prototype = date_picker_manager.DateRangePickerHeaderStyle.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerHeaderStyle);
  dart.addTypeCaches(date_picker_manager.DateRangePickerHeaderStyle);
  dart.setMethodSignature(date_picker_manager.DateRangePickerHeaderStyle, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerHeaderStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerHeaderStyle, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerHeaderStyle, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerHeaderStyle.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    textAlign: dart.finalFieldType(ui.TextAlign),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerHeaderStyle, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerHeaderStyle, ['hashCode']);
  const backgroundColor$0 = DateRangePickerViewHeaderStyle_backgroundColor;
  const textStyle$2 = DateRangePickerViewHeaderStyle_textStyle;
  const Object_Diagnosticable$36$4 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$4.new = function() {
  }).prototype = Object_Diagnosticable$36$4.prototype;
  dart.applyMixin(Object_Diagnosticable$36$4, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerViewHeaderStyle = class DateRangePickerViewHeaderStyle extends Object_Diagnosticable$36$4 {
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get textStyle() {
      return this[textStyle$2];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t40;
        t40 = otherStyle;
        return t40 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t40;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerViewHeaderStyle());
      function otherStyle$35set(t41) {
        if (t41 == null) dart.nullFailed(I[6], 254, 47, "null");
        if (otherStyle == null)
          return otherStyle = t41;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerViewHeaderStyleTodynamic());
      if (date_picker_manager.DateRangePickerViewHeaderStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().backgroundColor, this.backgroundColor) && dart.equals(otherStyle$35get().textStyle, this.textStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 263, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
    }
    get hashCode() {
      return ui.hashValues(this.backgroundColor, this.textStyle);
    }
  };
  (date_picker_manager.DateRangePickerViewHeaderStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    this[backgroundColor$0] = backgroundColor;
    this[textStyle$2] = textStyle;
    ;
  }).prototype = date_picker_manager.DateRangePickerViewHeaderStyle.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerViewHeaderStyle);
  dart.addTypeCaches(date_picker_manager.DateRangePickerViewHeaderStyle);
  dart.setMethodSignature(date_picker_manager.DateRangePickerViewHeaderStyle, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerViewHeaderStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerViewHeaderStyle, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerViewHeaderStyle, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerViewHeaderStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerViewHeaderStyle, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerViewHeaderStyle, ['hashCode']);
  const backgroundColor$1 = DateRangePickerWeekNumberStyle_backgroundColor;
  const textStyle$3 = DateRangePickerWeekNumberStyle_textStyle;
  const Object_Diagnosticable$36$5 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$5.new = function() {
  }).prototype = Object_Diagnosticable$36$5.prototype;
  dart.applyMixin(Object_Diagnosticable$36$5, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerWeekNumberStyle = class DateRangePickerWeekNumberStyle extends Object_Diagnosticable$36$5 {
    get backgroundColor() {
      return this[backgroundColor$1];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get textStyle() {
      return this[textStyle$3];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t44;
        t44 = otherStyle;
        return t44 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t44;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerWeekNumberStyle());
      function otherStyle$35set(t45) {
        if (t45 == null) dart.nullFailed(I[6], 367, 47, "null");
        if (otherStyle == null)
          return otherStyle = t45;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerWeekNumberStyleTodynamic());
      if (date_picker_manager.DateRangePickerWeekNumberStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && dart.equals(otherStyle$35get().backgroundColor, this.backgroundColor);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 376, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor));
    }
    get hashCode() {
      return ui.hashValues(this.textStyle, this.backgroundColor);
    }
  };
  (date_picker_manager.DateRangePickerWeekNumberStyle.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[textStyle$3] = textStyle;
    this[backgroundColor$1] = backgroundColor;
    ;
  }).prototype = date_picker_manager.DateRangePickerWeekNumberStyle.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerWeekNumberStyle);
  dart.addTypeCaches(date_picker_manager.DateRangePickerWeekNumberStyle);
  dart.setMethodSignature(date_picker_manager.DateRangePickerWeekNumberStyle, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerWeekNumberStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerWeekNumberStyle, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerWeekNumberStyle, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerWeekNumberStyle.__proto__),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerWeekNumberStyle, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerWeekNumberStyle, ['hashCode']);
  var dayFormat$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.dayFormat");
  var numberOfWeeksInView$ = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.numberOfWeeksInView");
  var enableSwipeSelection$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.enableSwipeSelection");
  var firstDayOfWeek$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.firstDayOfWeek");
  var viewHeaderStyle$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.viewHeaderStyle");
  var viewHeaderHeight$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.viewHeaderHeight");
  var selectionRadius$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.selectionRadius");
  var showTrailingAndLeadingDates$ = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.showTrailingAndLeadingDates");
  var blackoutDates$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.blackoutDates");
  var specialDates$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.specialDates");
  var weekendDays$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.weekendDays");
  var showWeekNumber$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.showWeekNumber");
  var weekNumberStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthViewSettings.weekNumberStyle");
  const Object_Diagnosticable$36$6 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$6.new = function() {
  }).prototype = Object_Diagnosticable$36$6.prototype;
  dart.applyMixin(Object_Diagnosticable$36$6, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerMonthViewSettings = class DateRangePickerMonthViewSettings extends Object_Diagnosticable$36$6 {
    get dayFormat() {
      return this[dayFormat$0];
    }
    set dayFormat(value) {
      super.dayFormat = value;
    }
    get numberOfWeeksInView() {
      return this[numberOfWeeksInView$];
    }
    set numberOfWeeksInView(value) {
      super.numberOfWeeksInView = value;
    }
    get enableSwipeSelection() {
      return this[enableSwipeSelection$0];
    }
    set enableSwipeSelection(value) {
      super.enableSwipeSelection = value;
    }
    get firstDayOfWeek() {
      return this[firstDayOfWeek$0];
    }
    set firstDayOfWeek(value) {
      super.firstDayOfWeek = value;
    }
    get viewHeaderStyle() {
      return this[viewHeaderStyle$0];
    }
    set viewHeaderStyle(value) {
      super.viewHeaderStyle = value;
    }
    get viewHeaderHeight() {
      return this[viewHeaderHeight$0];
    }
    set viewHeaderHeight(value) {
      super.viewHeaderHeight = value;
    }
    get selectionRadius() {
      return this[selectionRadius$1];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get showTrailingAndLeadingDates() {
      return this[showTrailingAndLeadingDates$];
    }
    set showTrailingAndLeadingDates(value) {
      super.showTrailingAndLeadingDates = value;
    }
    get blackoutDates() {
      return this[blackoutDates$1];
    }
    set blackoutDates(value) {
      super.blackoutDates = value;
    }
    get specialDates() {
      return this[specialDates$1];
    }
    set specialDates(value) {
      super.specialDates = value;
    }
    get weekendDays() {
      return this[weekendDays$1];
    }
    set weekendDays(value) {
      super.weekendDays = value;
    }
    get showWeekNumber() {
      return this[showWeekNumber$1];
    }
    set showWeekNumber(value) {
      super.showWeekNumber = value;
    }
    get weekNumberStyle() {
      return this[weekNumberStyle$1];
    }
    set weekNumberStyle(value) {
      super.weekNumberStyle = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t48;
        t48 = otherStyle;
        return t48 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t48;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerMonthViewSettings());
      function otherStyle$35set(t49) {
        if (t49 == null) dart.nullFailed(I[6], 847, 49, "null");
        if (otherStyle == null)
          return otherStyle = t49;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerMonthViewSettingsTodynamic());
      if (date_picker_manager.DateRangePickerMonthViewSettings.is(other)) {
        otherStyle$35set(other);
      }
      return otherStyle$35get().dayFormat == this.dayFormat && otherStyle$35get().numberOfWeeksInView == this.numberOfWeeksInView && otherStyle$35get().firstDayOfWeek == this.firstDayOfWeek && dart.equals(otherStyle$35get().viewHeaderStyle, this.viewHeaderStyle) && otherStyle$35get().viewHeaderHeight == this.viewHeaderHeight && otherStyle$35get().showTrailingAndLeadingDates == this.showTrailingAndLeadingDates && dart.equals(otherStyle$35get().blackoutDates, this.blackoutDates) && dart.equals(otherStyle$35get().specialDates, this.specialDates) && dart.equals(otherStyle$35get().weekendDays, this.weekendDays) && otherStyle$35get().enableSwipeSelection == this.enableSwipeSelection && otherStyle$35get().showWeekNumber == this.showWeekNumber && dart.equals(otherStyle$35get().weekNumberStyle, this.weekNumberStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 866, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.IterableDiagnosticsOfDateTime()).new(this.blackoutDates).toDiagnosticsNode({name: "blackoutDates"}));
      properties.add(new (T.IterableDiagnosticsOfDateTime()).new(this.specialDates).toDiagnosticsNode({name: "specialDates"}));
      properties.add(new diagnostics.IntProperty.new("numberOfWeeksInView", this.numberOfWeeksInView));
      properties.add(new diagnostics.IntProperty.new("firstDayOfWeek", this.firstDayOfWeek));
      properties.add(new diagnostics.DoubleProperty.new("viewHeaderHeight", this.viewHeaderHeight));
      properties.add(new diagnostics.StringProperty.new("dayFormat", this.dayFormat));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showTrailingAndLeadingDates", this.showTrailingAndLeadingDates));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enableSwipeSelection", this.enableSwipeSelection));
      properties.add(this.viewHeaderStyle.toDiagnosticsNode({name: "viewHeaderStyle"}));
      properties.add(new (T.IterablePropertyOfint()).new("weekendDays", this.weekendDays));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showWeekNumber", this.showWeekNumber));
      properties.add(this.weekNumberStyle.toDiagnosticsNode({name: "weekNumberStyle"}));
    }
    get hashCode() {
      return ui.hashValues(this.dayFormat, this.firstDayOfWeek, this.viewHeaderStyle, this.enableSwipeSelection, this.viewHeaderHeight, this.showTrailingAndLeadingDates, this.numberOfWeeksInView, this.showWeekNumber, this.weekNumberStyle, ui.hashList(this.specialDates), ui.hashList(this.blackoutDates), ui.hashList(this.weekendDays));
    }
  };
  (date_picker_manager.DateRangePickerMonthViewSettings.new = function(opts) {
    let numberOfWeeksInView = opts && 'numberOfWeeksInView' in opts ? opts.numberOfWeeksInView : 6;
    if (numberOfWeeksInView == null) dart.nullFailed(I[6], 442, 13, "numberOfWeeksInView");
    let firstDayOfWeek = opts && 'firstDayOfWeek' in opts ? opts.firstDayOfWeek : 7;
    if (firstDayOfWeek == null) dart.nullFailed(I[6], 443, 12, "firstDayOfWeek");
    let dayFormat = opts && 'dayFormat' in opts ? opts.dayFormat : "EE";
    if (dayFormat == null) dart.nullFailed(I[6], 444, 12, "dayFormat");
    let viewHeaderHeight = opts && 'viewHeaderHeight' in opts ? opts.viewHeaderHeight : 30;
    if (viewHeaderHeight == null) dart.nullFailed(I[6], 445, 12, "viewHeaderHeight");
    let selectionRadius = opts && 'selectionRadius' in opts ? opts.selectionRadius : -1;
    if (selectionRadius == null) dart.nullFailed(I[6], 448, 16, "selectionRadius");
    let showTrailingAndLeadingDates = opts && 'showTrailingAndLeadingDates' in opts ? opts.showTrailingAndLeadingDates : false;
    if (showTrailingAndLeadingDates == null) dart.nullFailed(I[6], 449, 12, "showTrailingAndLeadingDates");
    let viewHeaderStyle = opts && 'viewHeaderStyle' in opts ? opts.viewHeaderStyle : C[360] || CT.C360;
    if (viewHeaderStyle == null) dart.nullFailed(I[6], 450, 12, "viewHeaderStyle");
    let enableSwipeSelection = opts && 'enableSwipeSelection' in opts ? opts.enableSwipeSelection : true;
    if (enableSwipeSelection == null) dart.nullFailed(I[6], 451, 12, "enableSwipeSelection");
    let blackoutDates = opts && 'blackoutDates' in opts ? opts.blackoutDates : null;
    let specialDates = opts && 'specialDates' in opts ? opts.specialDates : null;
    let weekendDays = opts && 'weekendDays' in opts ? opts.weekendDays : C[362] || CT.C362;
    if (weekendDays == null) dart.nullFailed(I[6], 454, 12, "weekendDays");
    let showWeekNumber = opts && 'showWeekNumber' in opts ? opts.showWeekNumber : false;
    if (showWeekNumber == null) dart.nullFailed(I[6], 455, 12, "showWeekNumber");
    let weekNumberStyle = opts && 'weekNumberStyle' in opts ? opts.weekNumberStyle : C[361] || CT.C361;
    if (weekNumberStyle == null) dart.nullFailed(I[6], 456, 12, "weekNumberStyle");
    this[numberOfWeeksInView$] = numberOfWeeksInView;
    this[firstDayOfWeek$0] = firstDayOfWeek;
    this[dayFormat$0] = dayFormat;
    this[viewHeaderHeight$0] = viewHeaderHeight;
    this[selectionRadius$1] = selectionRadius;
    this[showTrailingAndLeadingDates$] = showTrailingAndLeadingDates;
    this[viewHeaderStyle$0] = viewHeaderStyle;
    this[enableSwipeSelection$0] = enableSwipeSelection;
    this[blackoutDates$1] = blackoutDates;
    this[specialDates$1] = specialDates;
    this[weekendDays$1] = weekendDays;
    this[showWeekNumber$1] = showWeekNumber;
    this[weekNumberStyle$1] = weekNumberStyle;
    if (!(dart.notNull(numberOfWeeksInView) >= 1 && dart.notNull(numberOfWeeksInView) <= 6)) dart.assertFailed(null, I[6], 457, 16, "numberOfWeeksInView >= 1 && numberOfWeeksInView <= 6");
    if (!(dart.notNull(firstDayOfWeek) >= 1 && dart.notNull(firstDayOfWeek) <= 7)) dart.assertFailed(null, I[6], 458, 16, "firstDayOfWeek >= 1 && firstDayOfWeek <= 7");
    if (!(dart.notNull(viewHeaderHeight) >= -1)) dart.assertFailed(null, I[6], 459, 16, "viewHeaderHeight >= -1");
    ;
  }).prototype = date_picker_manager.DateRangePickerMonthViewSettings.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerMonthViewSettings);
  dart.addTypeCaches(date_picker_manager.DateRangePickerMonthViewSettings);
  dart.setMethodSignature(date_picker_manager.DateRangePickerMonthViewSettings, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerMonthViewSettings.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerMonthViewSettings, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerMonthViewSettings, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerMonthViewSettings.__proto__),
    dayFormat: dart.finalFieldType(core.String),
    numberOfWeeksInView: dart.finalFieldType(core.int),
    enableSwipeSelection: dart.finalFieldType(core.bool),
    firstDayOfWeek: dart.finalFieldType(core.int),
    viewHeaderStyle: dart.finalFieldType(date_picker_manager.DateRangePickerViewHeaderStyle),
    viewHeaderHeight: dart.finalFieldType(core.double),
    selectionRadius: dart.finalFieldType(core.double),
    showTrailingAndLeadingDates: dart.finalFieldType(core.bool),
    blackoutDates: dart.finalFieldType(dart.nullable(core.List$(core.DateTime))),
    specialDates: dart.finalFieldType(dart.nullable(core.List$(core.DateTime))),
    weekendDays: dart.finalFieldType(core.List$(core.int)),
    showWeekNumber: dart.finalFieldType(core.bool),
    weekNumberStyle: dart.finalFieldType(date_picker_manager.DateRangePickerWeekNumberStyle)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerMonthViewSettings, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerMonthViewSettings, ['hashCode']);
  var textStyle$4 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.textStyle");
  var todayTextStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.todayTextStyle");
  var leadingDatesTextStyle$ = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.leadingDatesTextStyle");
  var disabledDatesTextStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.disabledDatesTextStyle");
  var disabledDatesDecoration$1 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.disabledDatesDecoration");
  var cellDecoration$1 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.cellDecoration");
  var todayCellDecoration$1 = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.todayCellDecoration");
  var leadingDatesDecoration$ = dart.privateName(date_picker_manager, "DateRangePickerYearCellStyle.leadingDatesDecoration");
  const Object_Diagnosticable$36$7 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$7.new = function() {
  }).prototype = Object_Diagnosticable$36$7.prototype;
  dart.applyMixin(Object_Diagnosticable$36$7, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerYearCellStyle = class DateRangePickerYearCellStyle extends Object_Diagnosticable$36$7 {
    get textStyle() {
      return this[textStyle$4];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$1];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get leadingDatesTextStyle() {
      return this[leadingDatesTextStyle$];
    }
    set leadingDatesTextStyle(value) {
      super.leadingDatesTextStyle = value;
    }
    get disabledDatesTextStyle() {
      return this[disabledDatesTextStyle$1];
    }
    set disabledDatesTextStyle(value) {
      super.disabledDatesTextStyle = value;
    }
    get disabledDatesDecoration() {
      return this[disabledDatesDecoration$1];
    }
    set disabledDatesDecoration(value) {
      super.disabledDatesDecoration = value;
    }
    get cellDecoration() {
      return this[cellDecoration$1];
    }
    set cellDecoration(value) {
      super.cellDecoration = value;
    }
    get todayCellDecoration() {
      return this[todayCellDecoration$1];
    }
    set todayCellDecoration(value) {
      super.todayCellDecoration = value;
    }
    get leadingDatesDecoration() {
      return this[leadingDatesDecoration$];
    }
    set leadingDatesDecoration(value) {
      super.leadingDatesDecoration = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t52;
        t52 = otherStyle;
        return t52 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t52;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerYearCellStyle());
      function otherStyle$35set(t53) {
        if (t53 == null) dart.nullFailed(I[6], 1232, 45, "null");
        if (otherStyle == null)
          return otherStyle = t53;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerYearCellStyleTodynamic());
      if (date_picker_manager.DateRangePickerYearCellStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && dart.equals(otherStyle$35get().todayTextStyle, this.todayTextStyle) && dart.equals(otherStyle$35get().leadingDatesTextStyle, this.leadingDatesTextStyle) && dart.equals(otherStyle$35get().disabledDatesDecoration, this.disabledDatesDecoration) && dart.equals(otherStyle$35get().cellDecoration, this.cellDecoration) && dart.equals(otherStyle$35get().todayCellDecoration, this.todayCellDecoration) && dart.equals(otherStyle$35get().leadingDatesDecoration, this.leadingDatesDecoration) && dart.equals(otherStyle$35get().disabledDatesTextStyle, this.disabledDatesTextStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 1247, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("todayTextStyle", this.todayTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("leadingDatesTextStyle", this.leadingDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("disabledDatesTextStyle", this.disabledDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("disabledDatesDecoration", this.disabledDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("cellDecoration", this.cellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("todayCellDecoration", this.todayCellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("leadingDatesDecoration", this.leadingDatesDecoration));
    }
    get hashCode() {
      return ui.hashValues(this.textStyle, this.todayTextStyle, this.leadingDatesTextStyle, this.disabledDatesTextStyle, this.disabledDatesDecoration, this.cellDecoration, this.todayCellDecoration, this.leadingDatesDecoration);
    }
  };
  (date_picker_manager.DateRangePickerYearCellStyle.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
    let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
    let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
    let todayCellDecoration = opts && 'todayCellDecoration' in opts ? opts.todayCellDecoration : null;
    let disabledDatesDecoration = opts && 'disabledDatesDecoration' in opts ? opts.disabledDatesDecoration : null;
    let leadingDatesDecoration = opts && 'leadingDatesDecoration' in opts ? opts.leadingDatesDecoration : null;
    this[textStyle$4] = textStyle;
    this[todayTextStyle$1] = todayTextStyle;
    this[leadingDatesTextStyle$] = leadingDatesTextStyle;
    this[disabledDatesTextStyle$1] = disabledDatesTextStyle;
    this[cellDecoration$1] = cellDecoration;
    this[todayCellDecoration$1] = todayCellDecoration;
    this[disabledDatesDecoration$1] = disabledDatesDecoration;
    this[leadingDatesDecoration$] = leadingDatesDecoration;
    ;
  }).prototype = date_picker_manager.DateRangePickerYearCellStyle.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerYearCellStyle);
  dart.addTypeCaches(date_picker_manager.DateRangePickerYearCellStyle);
  dart.setMethodSignature(date_picker_manager.DateRangePickerYearCellStyle, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerYearCellStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerYearCellStyle, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerYearCellStyle, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerYearCellStyle.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    todayTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    leadingDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    cellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    todayCellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    leadingDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration))
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerYearCellStyle, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerYearCellStyle, ['hashCode']);
  var textStyle$5 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.textStyle");
  var todayTextStyle$2 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.todayTextStyle");
  var trailingDatesTextStyle$ = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.trailingDatesTextStyle");
  var leadingDatesTextStyle$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.leadingDatesTextStyle");
  var disabledDatesTextStyle$2 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.disabledDatesTextStyle");
  var selectionTextStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.selectionTextStyle");
  var rangeTextStyle$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.rangeTextStyle");
  var blackoutDateTextStyle$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.blackoutDateTextStyle");
  var weekendTextStyle$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.weekendTextStyle");
  var specialDatesTextStyle$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.specialDatesTextStyle");
  var specialDatesDecoration$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.specialDatesDecoration");
  var weekendDatesDecoration$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.weekendDatesDecoration");
  var blackoutDatesDecoration$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.blackoutDatesDecoration");
  var disabledDatesDecoration$2 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.disabledDatesDecoration");
  var cellDecoration$2 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.cellDecoration");
  var todayCellDecoration$2 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.todayCellDecoration");
  var trailingDatesDecoration$ = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.trailingDatesDecoration");
  var leadingDatesDecoration$0 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.leadingDatesDecoration");
  var selectionColor$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.selectionColor");
  var startRangeSelectionColor$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.startRangeSelectionColor");
  var rangeSelectionColor$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.rangeSelectionColor");
  var endRangeSelectionColor$1 = dart.privateName(date_picker_manager, "DateRangePickerMonthCellStyle.endRangeSelectionColor");
  const Object_Diagnosticable$36$8 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$8.new = function() {
  }).prototype = Object_Diagnosticable$36$8.prototype;
  dart.applyMixin(Object_Diagnosticable$36$8, diagnostics.Diagnosticable);
  date_picker_manager.DateRangePickerMonthCellStyle = class DateRangePickerMonthCellStyle extends Object_Diagnosticable$36$8 {
    get textStyle() {
      return this[textStyle$5];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get todayTextStyle() {
      return this[todayTextStyle$2];
    }
    set todayTextStyle(value) {
      super.todayTextStyle = value;
    }
    get trailingDatesTextStyle() {
      return this[trailingDatesTextStyle$];
    }
    set trailingDatesTextStyle(value) {
      super.trailingDatesTextStyle = value;
    }
    get leadingDatesTextStyle() {
      return this[leadingDatesTextStyle$0];
    }
    set leadingDatesTextStyle(value) {
      super.leadingDatesTextStyle = value;
    }
    get disabledDatesTextStyle() {
      return this[disabledDatesTextStyle$2];
    }
    set disabledDatesTextStyle(value) {
      super.disabledDatesTextStyle = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$1];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$1];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get blackoutDateTextStyle() {
      return this[blackoutDateTextStyle$0];
    }
    set blackoutDateTextStyle(value) {
      super.blackoutDateTextStyle = value;
    }
    get weekendTextStyle() {
      return this[weekendTextStyle$0];
    }
    set weekendTextStyle(value) {
      super.weekendTextStyle = value;
    }
    get specialDatesTextStyle() {
      return this[specialDatesTextStyle$0];
    }
    set specialDatesTextStyle(value) {
      super.specialDatesTextStyle = value;
    }
    get specialDatesDecoration() {
      return this[specialDatesDecoration$0];
    }
    set specialDatesDecoration(value) {
      super.specialDatesDecoration = value;
    }
    get weekendDatesDecoration() {
      return this[weekendDatesDecoration$0];
    }
    set weekendDatesDecoration(value) {
      super.weekendDatesDecoration = value;
    }
    get blackoutDatesDecoration() {
      return this[blackoutDatesDecoration$0];
    }
    set blackoutDatesDecoration(value) {
      super.blackoutDatesDecoration = value;
    }
    get disabledDatesDecoration() {
      return this[disabledDatesDecoration$2];
    }
    set disabledDatesDecoration(value) {
      super.disabledDatesDecoration = value;
    }
    get cellDecoration() {
      return this[cellDecoration$2];
    }
    set cellDecoration(value) {
      super.cellDecoration = value;
    }
    get todayCellDecoration() {
      return this[todayCellDecoration$2];
    }
    set todayCellDecoration(value) {
      super.todayCellDecoration = value;
    }
    get trailingDatesDecoration() {
      return this[trailingDatesDecoration$];
    }
    set trailingDatesDecoration(value) {
      super.trailingDatesDecoration = value;
    }
    get leadingDatesDecoration() {
      return this[leadingDatesDecoration$0];
    }
    set leadingDatesDecoration(value) {
      super.leadingDatesDecoration = value;
    }
    get selectionColor() {
      return this[selectionColor$1];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$1];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$1];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$1];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = null;
      function otherStyle$35get() {
        let t56;
        t56 = otherStyle;
        return t56 == null ? dart.throw(new _internal.LateError.localNI("otherStyle")) : t56;
      }
      dart.fn(otherStyle$35get, T.VoidToDateRangePickerMonthCellStyle());
      function otherStyle$35set(t57) {
        if (t57 == null) dart.nullFailed(I[6], 2168, 46, "null");
        if (otherStyle == null)
          return otherStyle = t57;
        else
          dart.throw(new _internal.LateError.localAI("otherStyle"));
      }
      dart.fn(otherStyle$35set, T.DateRangePickerMonthCellStyleTodynamic());
      if (date_picker_manager.DateRangePickerMonthCellStyle.is(other)) {
        otherStyle$35set(other);
      }
      return dart.equals(otherStyle$35get().textStyle, this.textStyle) && dart.equals(otherStyle$35get().todayTextStyle, this.todayTextStyle) && dart.equals(otherStyle$35get().trailingDatesTextStyle, this.trailingDatesTextStyle) && dart.equals(otherStyle$35get().leadingDatesTextStyle, this.leadingDatesTextStyle) && dart.equals(otherStyle$35get().blackoutDateTextStyle, this.blackoutDateTextStyle) && dart.equals(otherStyle$35get().weekendTextStyle, this.weekendTextStyle) && dart.equals(otherStyle$35get().specialDatesTextStyle, this.specialDatesTextStyle) && dart.equals(otherStyle$35get().specialDatesDecoration, this.specialDatesDecoration) && dart.equals(otherStyle$35get().weekendDatesDecoration, this.weekendDatesDecoration) && dart.equals(otherStyle$35get().blackoutDatesDecoration, this.blackoutDatesDecoration) && dart.equals(otherStyle$35get().disabledDatesDecoration, this.disabledDatesDecoration) && dart.equals(otherStyle$35get().cellDecoration, this.cellDecoration) && dart.equals(otherStyle$35get().todayCellDecoration, this.todayCellDecoration) && dart.equals(otherStyle$35get().trailingDatesDecoration, this.trailingDatesDecoration) && dart.equals(otherStyle$35get().leadingDatesDecoration, this.leadingDatesDecoration) && dart.equals(otherStyle$35get().disabledDatesTextStyle, this.disabledDatesTextStyle);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 2191, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("textStyle", this.textStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("todayTextStyle", this.todayTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("trailingDatesTextStyle", this.trailingDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("leadingDatesTextStyle", this.leadingDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("blackoutDateTextStyle", this.blackoutDateTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("weekendTextStyle", this.weekendTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("specialDatesTextStyle", this.specialDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("disabledDatesTextStyle", this.disabledDatesTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("disabledDatesDecoration", this.disabledDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("cellDecoration", this.cellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("todayCellDecoration", this.todayCellDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("trailingDatesDecoration", this.trailingDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("leadingDatesDecoration", this.leadingDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("blackoutDatesDecoration", this.blackoutDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("weekendDatesDecoration", this.weekendDatesDecoration));
      properties.add(new (T.DiagnosticsPropertyOfDecoration()).new("specialDatesDecoration", this.specialDatesDecoration));
    }
    get hashCode() {
      return ui.hashList([this.textStyle, this.todayTextStyle, this.trailingDatesTextStyle, this.leadingDatesTextStyle, this.disabledDatesTextStyle, this.specialDatesDecoration, this.weekendDatesDecoration, this.blackoutDatesDecoration, this.disabledDatesDecoration, this.cellDecoration, this.todayCellDecoration, this.trailingDatesDecoration, this.leadingDatesDecoration, this.specialDatesTextStyle, this.blackoutDateTextStyle, this.weekendTextStyle]);
    }
  };
  (date_picker_manager.DateRangePickerMonthCellStyle.new = function(opts) {
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
    let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
    let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let todayTextStyle = opts && 'todayTextStyle' in opts ? opts.todayTextStyle : null;
    let trailingDatesTextStyle = opts && 'trailingDatesTextStyle' in opts ? opts.trailingDatesTextStyle : null;
    let leadingDatesTextStyle = opts && 'leadingDatesTextStyle' in opts ? opts.leadingDatesTextStyle : null;
    let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
    let disabledDatesTextStyle = opts && 'disabledDatesTextStyle' in opts ? opts.disabledDatesTextStyle : null;
    let blackoutDateTextStyle = opts && 'blackoutDateTextStyle' in opts ? opts.blackoutDateTextStyle : null;
    let weekendTextStyle = opts && 'weekendTextStyle' in opts ? opts.weekendTextStyle : null;
    let specialDatesTextStyle = opts && 'specialDatesTextStyle' in opts ? opts.specialDatesTextStyle : null;
    let specialDatesDecoration = opts && 'specialDatesDecoration' in opts ? opts.specialDatesDecoration : null;
    let blackoutDatesDecoration = opts && 'blackoutDatesDecoration' in opts ? opts.blackoutDatesDecoration : null;
    let cellDecoration = opts && 'cellDecoration' in opts ? opts.cellDecoration : null;
    let todayCellDecoration = opts && 'todayCellDecoration' in opts ? opts.todayCellDecoration : null;
    let disabledDatesDecoration = opts && 'disabledDatesDecoration' in opts ? opts.disabledDatesDecoration : null;
    let trailingDatesDecoration = opts && 'trailingDatesDecoration' in opts ? opts.trailingDatesDecoration : null;
    let leadingDatesDecoration = opts && 'leadingDatesDecoration' in opts ? opts.leadingDatesDecoration : null;
    let rangeTextStyle = opts && 'rangeTextStyle' in opts ? opts.rangeTextStyle : null;
    let weekendDatesDecoration = opts && 'weekendDatesDecoration' in opts ? opts.weekendDatesDecoration : null;
    this[selectionColor$1] = selectionColor;
    this[startRangeSelectionColor$1] = startRangeSelectionColor;
    this[endRangeSelectionColor$1] = endRangeSelectionColor;
    this[rangeSelectionColor$1] = rangeSelectionColor;
    this[textStyle$5] = textStyle;
    this[todayTextStyle$2] = todayTextStyle;
    this[trailingDatesTextStyle$] = trailingDatesTextStyle;
    this[leadingDatesTextStyle$0] = leadingDatesTextStyle;
    this[selectionTextStyle$1] = selectionTextStyle;
    this[disabledDatesTextStyle$2] = disabledDatesTextStyle;
    this[blackoutDateTextStyle$0] = blackoutDateTextStyle;
    this[weekendTextStyle$0] = weekendTextStyle;
    this[specialDatesTextStyle$0] = specialDatesTextStyle;
    this[specialDatesDecoration$0] = specialDatesDecoration;
    this[blackoutDatesDecoration$0] = blackoutDatesDecoration;
    this[cellDecoration$2] = cellDecoration;
    this[todayCellDecoration$2] = todayCellDecoration;
    this[disabledDatesDecoration$2] = disabledDatesDecoration;
    this[trailingDatesDecoration$] = trailingDatesDecoration;
    this[leadingDatesDecoration$0] = leadingDatesDecoration;
    this[rangeTextStyle$1] = rangeTextStyle;
    this[weekendDatesDecoration$0] = weekendDatesDecoration;
    ;
  }).prototype = date_picker_manager.DateRangePickerMonthCellStyle.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerMonthCellStyle);
  dart.addTypeCaches(date_picker_manager.DateRangePickerMonthCellStyle);
  dart.setMethodSignature(date_picker_manager.DateRangePickerMonthCellStyle, () => ({
    __proto__: dart.getMethods(date_picker_manager.DateRangePickerMonthCellStyle.__proto__),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerMonthCellStyle, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerMonthCellStyle, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerMonthCellStyle.__proto__),
    textStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    todayTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    trailingDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    leadingDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    disabledDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    blackoutDateTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    weekendTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    specialDatesTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    specialDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    weekendDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    blackoutDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    disabledDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    cellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    todayCellDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    trailingDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    leadingDatesDecoration: dart.finalFieldType(dart.nullable(decoration.Decoration)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerMonthCellStyle, ['_equals']);
  dart.defineExtensionAccessors(date_picker_manager.DateRangePickerMonthCellStyle, ['hashCode']);
  var forward$ = dart.privateName(date_picker_manager, "DateRangePickerController.forward");
  var backward$ = dart.privateName(date_picker_manager, "DateRangePickerController.backward");
  var _selectedDate$1 = dart.privateName(date_picker_manager, "_selectedDate");
  var _selectedDates$1 = dart.privateName(date_picker_manager, "_selectedDates");
  var _selectedRange$1 = dart.privateName(date_picker_manager, "_selectedRange");
  var _selectedRanges$1 = dart.privateName(date_picker_manager, "_selectedRanges");
  var _displayDate$ = dart.privateName(date_picker_manager, "_displayDate");
  var _view$0 = dart.privateName(date_picker_manager, "_view");
  date_picker_manager.DateRangePickerController = class DateRangePickerController extends date_picker_manager.DateRangePickerValueChangeNotifier {
    get forward() {
      return this[forward$];
    }
    set forward(value) {
      this[forward$] = value;
    }
    get backward() {
      return this[backward$];
    }
    set backward(value) {
      this[backward$] = value;
    }
    get selectedDate() {
      return this[_selectedDate$1];
    }
    set selectedDate(date) {
      if (dart.test(core$.isSameDate(this[_selectedDate$1], date))) {
        return;
      }
      this[_selectedDate$1] = date;
      this.notifyPropertyChangedListeners("selectedDate");
    }
    get selectedDates() {
      return this[_selectedDates$1];
    }
    set selectedDates(dates) {
      let t59;
      if (dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$1], dates))) {
        return;
      }
      this[_selectedDates$1] = (t59 = picker_helper.DateRangePickerHelper.cloneList(dates), t59 == null ? null : t59[$cast](core.DateTime));
      this.notifyPropertyChangedListeners("selectedDates");
    }
    get selectedRange() {
      return this[_selectedRange$1];
    }
    set selectedRange(range) {
      if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$1], range))) {
        return;
      }
      this[_selectedRange$1] = range;
      this.notifyPropertyChangedListeners("selectedRange");
    }
    get selectedRanges() {
      return this[_selectedRanges$1];
    }
    set selectedRanges(ranges) {
      let t59;
      if (dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$1], ranges))) {
        return;
      }
      this[_selectedRanges$1] = (t59 = picker_helper.DateRangePickerHelper.cloneList(ranges), t59 == null ? null : t59[$cast](date_picker_manager.PickerDateRange));
      this.notifyPropertyChangedListeners("selectedRanges");
    }
    get displayDate() {
      return this[_displayDate$];
    }
    set displayDate(date) {
      if (dart.test(core$.isSameDate(this[_displayDate$], date))) {
        return;
      }
      this[_displayDate$] = date;
      this.notifyPropertyChangedListeners("displayDate");
    }
    get view() {
      return this[_view$0];
    }
    set view(value) {
      if (this[_view$0] == value) {
        return;
      }
      this[_view$0] = value;
      this.notifyPropertyChangedListeners("view");
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 2842, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("displayDate", this.displayDate));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("selectedDate", this.selectedDate));
      properties.add(new (T.IterableDiagnosticsOfDateTime()).new(this.selectedDates).toDiagnosticsNode({name: "selectedDates"}));
      properties.add(new (T.DiagnosticsPropertyOfPickerDateRange()).new("selectedRange", this.selectedRange));
      properties.add(new (T.IterableDiagnosticsOfPickerDateRange()).new(this.selectedRanges).toDiagnosticsNode({name: "selectedRanges"}));
      properties.add(new (T.EnumPropertyOfDateRangePickerView()).new("view", this.view));
    }
  };
  (date_picker_manager.DateRangePickerController.new = function() {
    this[_selectedDate$1] = null;
    this[_selectedDates$1] = null;
    this[_selectedRange$1] = null;
    this[_selectedRanges$1] = null;
    this[_displayDate$] = null;
    this[_view$0] = null;
    this[forward$] = null;
    this[backward$] = null;
    date_picker_manager.DateRangePickerController.__proto__.new.call(this);
    ;
  }).prototype = date_picker_manager.DateRangePickerController.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerController);
  dart.addTypeCaches(date_picker_manager.DateRangePickerController);
  dart.setGetterSignature(date_picker_manager.DateRangePickerController, () => ({
    __proto__: dart.getGetters(date_picker_manager.DateRangePickerController.__proto__),
    selectedDate: dart.nullable(core.DateTime),
    selectedDates: dart.nullable(core.List$(core.DateTime)),
    selectedRange: dart.nullable(date_picker_manager.PickerDateRange),
    selectedRanges: dart.nullable(core.List$(date_picker_manager.PickerDateRange)),
    displayDate: dart.nullable(core.DateTime),
    view: dart.nullable(date_picker_manager.DateRangePickerView)
  }));
  dart.setSetterSignature(date_picker_manager.DateRangePickerController, () => ({
    __proto__: dart.getSetters(date_picker_manager.DateRangePickerController.__proto__),
    selectedDate: dart.nullable(core.DateTime),
    selectedDates: dart.nullable(core.List$(core.DateTime)),
    selectedRange: dart.nullable(date_picker_manager.PickerDateRange),
    selectedRanges: dart.nullable(core.List$(date_picker_manager.PickerDateRange)),
    displayDate: dart.nullable(core.DateTime),
    view: dart.nullable(date_picker_manager.DateRangePickerView)
  }));
  dart.setLibraryUri(date_picker_manager.DateRangePickerController, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerController, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerController.__proto__),
    [_selectedDate$1]: dart.fieldType(dart.nullable(core.DateTime)),
    [_selectedDates$1]: dart.fieldType(dart.nullable(core.List$(core.DateTime))),
    [_selectedRange$1]: dart.fieldType(dart.nullable(date_picker_manager.PickerDateRange)),
    [_selectedRanges$1]: dart.fieldType(dart.nullable(core.List$(date_picker_manager.PickerDateRange))),
    [_displayDate$]: dart.fieldType(dart.nullable(core.DateTime)),
    [_view$0]: dart.fieldType(dart.nullable(date_picker_manager.DateRangePickerView)),
    forward: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    backward: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  date_picker_manager.DateRangePickerSelectionMode = class DateRangePickerSelectionMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (date_picker_manager.DateRangePickerSelectionMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 2857, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 2857, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = date_picker_manager.DateRangePickerSelectionMode.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerSelectionMode);
  dart.addTypeCaches(date_picker_manager.DateRangePickerSelectionMode);
  dart.setLibraryUri(date_picker_manager.DateRangePickerSelectionMode, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerSelectionMode, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerSelectionMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerSelectionMode, ['toString']);
  date_picker_manager.DateRangePickerSelectionMode.single = C[33] || CT.C33;
  date_picker_manager.DateRangePickerSelectionMode.multiple = C[67] || CT.C67;
  date_picker_manager.DateRangePickerSelectionMode.range = C[101] || CT.C101;
  date_picker_manager.DateRangePickerSelectionMode.multiRange = C[169] || CT.C169;
  date_picker_manager.DateRangePickerSelectionMode.extendableRange = C[135] || CT.C135;
  date_picker_manager.DateRangePickerSelectionMode.values = C[372] || CT.C372;
  date_picker_manager.DateRangePickerView = class DateRangePickerView extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (date_picker_manager.DateRangePickerView.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 2906, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 2906, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = date_picker_manager.DateRangePickerView.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerView);
  dart.addTypeCaches(date_picker_manager.DateRangePickerView);
  dart.setLibraryUri(date_picker_manager.DateRangePickerView, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerView, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerView.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerView, ['toString']);
  date_picker_manager.DateRangePickerView.month = C[367] || CT.C367;
  date_picker_manager.DateRangePickerView.year = C[368] || CT.C368;
  date_picker_manager.DateRangePickerView.decade = C[369] || CT.C369;
  date_picker_manager.DateRangePickerView.century = C[370] || CT.C370;
  date_picker_manager.DateRangePickerView.values = C[373] || CT.C373;
  date_picker_manager.DateRangePickerSelectionShape = class DateRangePickerSelectionShape extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (date_picker_manager.DateRangePickerSelectionShape.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 2924, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 2924, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = date_picker_manager.DateRangePickerSelectionShape.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerSelectionShape);
  dart.addTypeCaches(date_picker_manager.DateRangePickerSelectionShape);
  dart.setLibraryUri(date_picker_manager.DateRangePickerSelectionShape, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerSelectionShape, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerSelectionShape.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerSelectionShape, ['toString']);
  date_picker_manager.DateRangePickerSelectionShape.circle = C[172] || CT.C172;
  date_picker_manager.DateRangePickerSelectionShape.rectangle = C[171] || CT.C171;
  date_picker_manager.DateRangePickerSelectionShape.values = C[374] || CT.C374;
  date_picker_manager.DateRangePickerNavigationDirection = class DateRangePickerNavigationDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (date_picker_manager.DateRangePickerNavigationDirection.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 2935, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 2935, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = date_picker_manager.DateRangePickerNavigationDirection.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerNavigationDirection);
  dart.addTypeCaches(date_picker_manager.DateRangePickerNavigationDirection);
  dart.setLibraryUri(date_picker_manager.DateRangePickerNavigationDirection, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerNavigationDirection, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerNavigationDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerNavigationDirection, ['toString']);
  date_picker_manager.DateRangePickerNavigationDirection.vertical = C[359] || CT.C359;
  date_picker_manager.DateRangePickerNavigationDirection.horizontal = C[358] || CT.C358;
  date_picker_manager.DateRangePickerNavigationDirection.values = C[375] || CT.C375;
  date_picker_manager.DateRangePickerNavigationMode = class DateRangePickerNavigationMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (date_picker_manager.DateRangePickerNavigationMode.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[6], 2946, 6, "index");
    if (_name == null) dart.nullFailed(I[6], 2946, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = date_picker_manager.DateRangePickerNavigationMode.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerNavigationMode);
  dart.addTypeCaches(date_picker_manager.DateRangePickerNavigationMode);
  dart.setLibraryUri(date_picker_manager.DateRangePickerNavigationMode, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerNavigationMode, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerNavigationMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_picker_manager.DateRangePickerNavigationMode, ['toString']);
  date_picker_manager.DateRangePickerNavigationMode.none = C[376] || CT.C376;
  date_picker_manager.DateRangePickerNavigationMode.snap = C[377] || CT.C377;
  date_picker_manager.DateRangePickerNavigationMode.scroll = C[378] || CT.C378;
  date_picker_manager.DateRangePickerNavigationMode.values = C[379] || CT.C379;
  var visibleDateRange$0 = dart.privateName(date_picker_manager, "DateRangePickerViewChangedArgs.visibleDateRange");
  var view$1 = dart.privateName(date_picker_manager, "DateRangePickerViewChangedArgs.view");
  date_picker_manager.DateRangePickerViewChangedArgs = class DateRangePickerViewChangedArgs extends core.Object {
    get visibleDateRange() {
      return this[visibleDateRange$0];
    }
    set visibleDateRange(value) {
      super.visibleDateRange = value;
    }
    get view() {
      return this[view$1];
    }
    set view(value) {
      super.view = value;
    }
  };
  (date_picker_manager.DateRangePickerViewChangedArgs.new = function(visibleDateRange, view) {
    if (visibleDateRange == null) dart.nullFailed(I[6], 2985, 45, "visibleDateRange");
    if (view == null) dart.nullFailed(I[6], 2985, 68, "view");
    this[visibleDateRange$0] = visibleDateRange;
    this[view$1] = view;
    ;
  }).prototype = date_picker_manager.DateRangePickerViewChangedArgs.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerViewChangedArgs);
  dart.addTypeCaches(date_picker_manager.DateRangePickerViewChangedArgs);
  dart.setLibraryUri(date_picker_manager.DateRangePickerViewChangedArgs, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerViewChangedArgs, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerViewChangedArgs.__proto__),
    visibleDateRange: dart.finalFieldType(date_picker_manager.PickerDateRange),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView)
  }));
  var value$ = dart.privateName(date_picker_manager, "DateRangePickerSelectionChangedArgs.value");
  date_picker_manager.DateRangePickerSelectionChangedArgs = class DateRangePickerSelectionChangedArgs extends core.Object {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
  };
  (date_picker_manager.DateRangePickerSelectionChangedArgs.new = function(value) {
    this[value$] = value;
    ;
  }).prototype = date_picker_manager.DateRangePickerSelectionChangedArgs.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerSelectionChangedArgs);
  dart.addTypeCaches(date_picker_manager.DateRangePickerSelectionChangedArgs);
  dart.setLibraryUri(date_picker_manager.DateRangePickerSelectionChangedArgs, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerSelectionChangedArgs, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerSelectionChangedArgs.__proto__),
    value: dart.finalFieldType(dart.dynamic)
  }));
  var startDate$0 = dart.privateName(date_picker_manager, "PickerDateRange.startDate");
  var endDate$0 = dart.privateName(date_picker_manager, "PickerDateRange.endDate");
  const Object_Diagnosticable$36$9 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$9.new = function() {
  }).prototype = Object_Diagnosticable$36$9.prototype;
  dart.applyMixin(Object_Diagnosticable$36$9, diagnostics.Diagnosticable);
  date_picker_manager.PickerDateRange = class PickerDateRange extends Object_Diagnosticable$36$9 {
    get startDate() {
      return this[startDate$0];
    }
    set startDate(value) {
      super.startDate = value;
    }
    get endDate() {
      return this[endDate$0];
    }
    set endDate(value) {
      super.endDate = value;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[6], 3038, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("startDate", this.startDate));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("endDate", this.endDate));
    }
  };
  (date_picker_manager.PickerDateRange.new = function(startDate, endDate) {
    this[startDate$0] = startDate;
    this[endDate$0] = endDate;
    ;
  }).prototype = date_picker_manager.PickerDateRange.prototype;
  dart.addTypeTests(date_picker_manager.PickerDateRange);
  dart.addTypeCaches(date_picker_manager.PickerDateRange);
  dart.setLibraryUri(date_picker_manager.PickerDateRange, I[7]);
  dart.setFieldSignature(date_picker_manager.PickerDateRange, () => ({
    __proto__: dart.getFields(date_picker_manager.PickerDateRange.__proto__),
    startDate: dart.finalFieldType(dart.nullable(core.DateTime)),
    endDate: dart.finalFieldType(dart.nullable(core.DateTime))
  }));
  var date$0 = dart.privateName(date_picker_manager, "DateRangePickerCellDetails.date");
  var bounds$0 = dart.privateName(date_picker_manager, "DateRangePickerCellDetails.bounds");
  var visibleDates$2 = dart.privateName(date_picker_manager, "DateRangePickerCellDetails.visibleDates");
  date_picker_manager.DateRangePickerCellDetails = class DateRangePickerCellDetails extends core.Object {
    get date() {
      return this[date$0];
    }
    set date(value) {
      super.date = value;
    }
    get bounds() {
      return this[bounds$0];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get visibleDates() {
      return this[visibleDates$2];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
  };
  (date_picker_manager.DateRangePickerCellDetails.new = function(opts) {
    let date = opts && 'date' in opts ? opts.date : null;
    if (date == null) dart.nullFailed(I[6], 3054, 22, "date");
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    if (bounds == null) dart.nullFailed(I[6], 3054, 42, "bounds");
    let visibleDates = opts && 'visibleDates' in opts ? opts.visibleDates : null;
    if (visibleDates == null) dart.nullFailed(I[6], 3054, 64, "visibleDates");
    this[date$0] = date;
    this[bounds$0] = bounds;
    this[visibleDates$2] = visibleDates;
    ;
  }).prototype = date_picker_manager.DateRangePickerCellDetails.prototype;
  dart.addTypeTests(date_picker_manager.DateRangePickerCellDetails);
  dart.addTypeCaches(date_picker_manager.DateRangePickerCellDetails);
  dart.setLibraryUri(date_picker_manager.DateRangePickerCellDetails, I[7]);
  dart.setFieldSignature(date_picker_manager.DateRangePickerCellDetails, () => ({
    __proto__: dart.getFields(date_picker_manager.DateRangePickerCellDetails.__proto__),
    date: dart.finalFieldType(core.DateTime),
    bounds: dart.finalFieldType(ui.Rect),
    visibleDates: dart.finalFieldType(core.List$(core.DateTime))
  }));
  var collection$ = dart.privateName(date_picker_manager, "IterableDiagnostics.collection");
  const _is_IterableDiagnostics_default = Symbol('_is_IterableDiagnostics_default');
  date_picker_manager.IterableDiagnostics$ = dart.generic(T => {
    var DiagnosticsPropertyOfT = () => (DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var TToDiagnosticsNode = () => (TToDiagnosticsNode = dart.constFn(dart.fnType(diagnostics.DiagnosticsNode, [T])))();
    class IterableDiagnostics extends diagnostics.DiagnosticableTree {
      get collection() {
        return this[collection$];
      }
      set collection(value) {
        super.collection = value;
      }
      debugDescribeChildren() {
        if (this.collection != null && dart.test(dart.nullCheck(this.collection)[$isNotEmpty])) {
          return dart.nullCheck(this.collection)[$map](diagnostics.DiagnosticsNode, dart.fn(value => {
            if (diagnostics.Diagnosticable.is(value)) {
              return value.toDiagnosticsNode();
            } else {
              return new (DiagnosticsPropertyOfT()).new("", value);
            }
          }, TToDiagnosticsNode()))[$toList]();
        }
        return super.debugDescribeChildren();
      }
      toStringShort() {
        return this.collection == null ? "null" : dart.test(dart.nullCheck(this.collection)[$isNotEmpty]) ? "<" + dart.notNull(dart.wrapType(T).toString()) + ">" : "<none>";
      }
    }
    (IterableDiagnostics.new = function(collection) {
      this[collection$] = collection;
      IterableDiagnostics.__proto__.new.call(this);
      ;
    }).prototype = IterableDiagnostics.prototype;
    dart.addTypeTests(IterableDiagnostics);
    IterableDiagnostics.prototype[_is_IterableDiagnostics_default] = true;
    dart.addTypeCaches(IterableDiagnostics);
    dart.setLibraryUri(IterableDiagnostics, I[7]);
    dart.setFieldSignature(IterableDiagnostics, () => ({
      __proto__: dart.getFields(IterableDiagnostics.__proto__),
      collection: dart.finalFieldType(dart.nullable(core.List$(T)))
    }));
    return IterableDiagnostics;
  });
  date_picker_manager.IterableDiagnostics = date_picker_manager.IterableDiagnostics$();
  dart.addTypeTests(date_picker_manager.IterableDiagnostics, _is_IterableDiagnostics_default);
  var view$2 = dart.privateName(date_picker, "SfDateRangePicker.view");
  var selectionMode$1 = dart.privateName(date_picker, "SfDateRangePicker.selectionMode");
  var headerStyle$ = dart.privateName(date_picker, "SfDateRangePicker.headerStyle");
  var headerHeight$ = dart.privateName(date_picker, "SfDateRangePicker.headerHeight");
  var todayHighlightColor$1 = dart.privateName(date_picker, "SfDateRangePicker.todayHighlightColor");
  var backgroundColor$2 = dart.privateName(date_picker, "SfDateRangePicker.backgroundColor");
  var toggleDaySelection$ = dart.privateName(date_picker, "SfDateRangePicker.toggleDaySelection");
  var allowViewNavigation$0 = dart.privateName(date_picker, "SfDateRangePicker.allowViewNavigation");
  var cellBuilder$1 = dart.privateName(date_picker, "SfDateRangePicker.cellBuilder");
  var enableMultiView$1 = dart.privateName(date_picker, "SfDateRangePicker.enableMultiView");
  var viewSpacing$ = dart.privateName(date_picker, "SfDateRangePicker.viewSpacing");
  var selectionRadius$2 = dart.privateName(date_picker, "SfDateRangePicker.selectionRadius");
  var selectionTextStyle$2 = dart.privateName(date_picker, "SfDateRangePicker.selectionTextStyle");
  var rangeTextStyle$2 = dart.privateName(date_picker, "SfDateRangePicker.rangeTextStyle");
  var selectionColor$2 = dart.privateName(date_picker, "SfDateRangePicker.selectionColor");
  var startRangeSelectionColor$2 = dart.privateName(date_picker, "SfDateRangePicker.startRangeSelectionColor");
  var rangeSelectionColor$2 = dart.privateName(date_picker, "SfDateRangePicker.rangeSelectionColor");
  var endRangeSelectionColor$2 = dart.privateName(date_picker, "SfDateRangePicker.endRangeSelectionColor");
  var monthViewSettings$ = dart.privateName(date_picker, "SfDateRangePicker.monthViewSettings");
  var yearCellStyle$ = dart.privateName(date_picker, "SfDateRangePicker.yearCellStyle");
  var monthCellStyle$ = dart.privateName(date_picker, "SfDateRangePicker.monthCellStyle");
  var initialDisplayDate$ = dart.privateName(date_picker, "SfDateRangePicker.initialDisplayDate");
  var initialSelectedDate$ = dart.privateName(date_picker, "SfDateRangePicker.initialSelectedDate");
  var minDate$1 = dart.privateName(date_picker, "SfDateRangePicker.minDate");
  var maxDate$1 = dart.privateName(date_picker, "SfDateRangePicker.maxDate");
  var enablePastDates$1 = dart.privateName(date_picker, "SfDateRangePicker.enablePastDates");
  var initialSelectedDates$ = dart.privateName(date_picker, "SfDateRangePicker.initialSelectedDates");
  var initialSelectedRange$ = dart.privateName(date_picker, "SfDateRangePicker.initialSelectedRange");
  var initialSelectedRanges$ = dart.privateName(date_picker, "SfDateRangePicker.initialSelectedRanges");
  var controller$ = dart.privateName(date_picker, "SfDateRangePicker.controller");
  var showNavigationArrow$ = dart.privateName(date_picker, "SfDateRangePicker.showNavigationArrow");
  var navigationDirection$1 = dart.privateName(date_picker, "SfDateRangePicker.navigationDirection");
  var selectionShape$1 = dart.privateName(date_picker, "SfDateRangePicker.selectionShape");
  var monthFormat$0 = dart.privateName(date_picker, "SfDateRangePicker.monthFormat");
  var navigationMode$ = dart.privateName(date_picker, "SfDateRangePicker.navigationMode");
  var onViewChanged$ = dart.privateName(date_picker, "SfDateRangePicker.onViewChanged");
  var onSelectionChanged$ = dart.privateName(date_picker, "SfDateRangePicker.onSelectionChanged");
  var confirmText$ = dart.privateName(date_picker, "SfDateRangePicker.confirmText");
  var cancelText$ = dart.privateName(date_picker, "SfDateRangePicker.cancelText");
  var showActionButtons$ = dart.privateName(date_picker, "SfDateRangePicker.showActionButtons");
  var onCancel$ = dart.privateName(date_picker, "SfDateRangePicker.onCancel");
  var onSubmit$ = dart.privateName(date_picker, "SfDateRangePicker.onSubmit");
  date_picker.SfDateRangePicker = class SfDateRangePicker extends framework.StatelessWidget {
    get view() {
      return this[view$2];
    }
    set view(value) {
      super.view = value;
    }
    get selectionMode() {
      return this[selectionMode$1];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get headerStyle() {
      return this[headerStyle$];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get headerHeight() {
      return this[headerHeight$];
    }
    set headerHeight(value) {
      super.headerHeight = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$1];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$2];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get toggleDaySelection() {
      return this[toggleDaySelection$];
    }
    set toggleDaySelection(value) {
      super.toggleDaySelection = value;
    }
    get allowViewNavigation() {
      return this[allowViewNavigation$0];
    }
    set allowViewNavigation(value) {
      super.allowViewNavigation = value;
    }
    get cellBuilder() {
      return this[cellBuilder$1];
    }
    set cellBuilder(value) {
      super.cellBuilder = value;
    }
    get enableMultiView() {
      return this[enableMultiView$1];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get viewSpacing() {
      return this[viewSpacing$];
    }
    set viewSpacing(value) {
      super.viewSpacing = value;
    }
    get selectionRadius() {
      return this[selectionRadius$2];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$2];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$2];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$2];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$2];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$2];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$2];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get monthViewSettings() {
      return this[monthViewSettings$];
    }
    set monthViewSettings(value) {
      super.monthViewSettings = value;
    }
    get yearCellStyle() {
      return this[yearCellStyle$];
    }
    set yearCellStyle(value) {
      super.yearCellStyle = value;
    }
    get monthCellStyle() {
      return this[monthCellStyle$];
    }
    set monthCellStyle(value) {
      super.monthCellStyle = value;
    }
    get initialDisplayDate() {
      return this[initialDisplayDate$];
    }
    set initialDisplayDate(value) {
      super.initialDisplayDate = value;
    }
    get initialSelectedDate() {
      return this[initialSelectedDate$];
    }
    set initialSelectedDate(value) {
      super.initialSelectedDate = value;
    }
    get minDate() {
      return this[minDate$1];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$1];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get enablePastDates() {
      return this[enablePastDates$1];
    }
    set enablePastDates(value) {
      super.enablePastDates = value;
    }
    get initialSelectedDates() {
      return this[initialSelectedDates$];
    }
    set initialSelectedDates(value) {
      super.initialSelectedDates = value;
    }
    get initialSelectedRange() {
      return this[initialSelectedRange$];
    }
    set initialSelectedRange(value) {
      super.initialSelectedRange = value;
    }
    get initialSelectedRanges() {
      return this[initialSelectedRanges$];
    }
    set initialSelectedRanges(value) {
      super.initialSelectedRanges = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get showNavigationArrow() {
      return this[showNavigationArrow$];
    }
    set showNavigationArrow(value) {
      super.showNavigationArrow = value;
    }
    get navigationDirection() {
      return this[navigationDirection$1];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get selectionShape() {
      return this[selectionShape$1];
    }
    set selectionShape(value) {
      super.selectionShape = value;
    }
    get monthFormat() {
      return this[monthFormat$0];
    }
    set monthFormat(value) {
      super.monthFormat = value;
    }
    get navigationMode() {
      return this[navigationMode$];
    }
    set navigationMode(value) {
      super.navigationMode = value;
    }
    get onViewChanged() {
      return this[onViewChanged$];
    }
    set onViewChanged(value) {
      super.onViewChanged = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get confirmText() {
      return this[confirmText$];
    }
    set confirmText(value) {
      super.confirmText = value;
    }
    get cancelText() {
      return this[cancelText$];
    }
    set cancelText(value) {
      super.cancelText = value;
    }
    get showActionButtons() {
      return this[showActionButtons$];
    }
    set showActionButtons(value) {
      super.showActionButtons = value;
    }
    get onCancel() {
      return this[onCancel$];
    }
    set onCancel(value) {
      super.onCancel = value;
    }
    get onSubmit() {
      return this[onSubmit$];
    }
    set onSubmit(value) {
      super.onSubmit = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 1677, 29, "context");
      return new date_picker._SfDateRangePicker.new({key: this.key, view: this.view, selectionMode: this.selectionMode, headerHeight: this.headerHeight, todayHighlightColor: this.todayHighlightColor, backgroundColor: this.backgroundColor, initialSelectedDate: this.initialSelectedDate, initialSelectedDates: this.initialSelectedDates, initialSelectedRange: this.initialSelectedRange, initialSelectedRanges: this.initialSelectedRanges, toggleDaySelection: this.toggleDaySelection, enablePastDates: this.enablePastDates, showNavigationArrow: this.showNavigationArrow, selectionShape: this.selectionShape, navigationDirection: this.navigationDirection, controller: this.controller, onViewChanged: this.onViewChanged, onSelectionChanged: this.onSelectionChanged, onCancel: this.onCancel, onSubmit: this.onSubmit, headerStyle: this.headerStyle, yearCellStyle: this.yearCellStyle, monthViewSettings: this.monthViewSettings, initialDisplayDate: this.initialDisplayDate, minDate: this.minDate, maxDate: this.maxDate, monthCellStyle: this.monthCellStyle, allowViewNavigation: this.allowViewNavigation, enableMultiView: this.enableMultiView, viewSpacing: this.viewSpacing, selectionRadius: this.selectionRadius, selectionColor: this.selectionColor, startRangeSelectionColor: this.startRangeSelectionColor, endRangeSelectionColor: this.endRangeSelectionColor, rangeSelectionColor: this.rangeSelectionColor, selectionTextStyle: this.selectionTextStyle, rangeTextStyle: this.rangeTextStyle, monthFormat: this.monthFormat, cellBuilder: this.cellBuilder, navigationMode: this.navigationMode, confirmText: this.confirmText, cancelText: this.cancelText, showActionButtons: this.showActionButtons, $creationLocationd_0dea112b090073317d4: C[384] || CT.C384});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[10], 1726, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfDateRangePickerView()).new("view", this.view));
      properties.add(new (T.EnumPropertyOfDateRangePickerSelectionMode()).new("selectionMode", this.selectionMode));
      properties.add(new (T.EnumPropertyOfDateRangePickerSelectionShape()).new("selectionShape", this.selectionShape));
      properties.add(new (T.EnumPropertyOfDateRangePickerNavigationDirection()).new("navigationDirection", this.navigationDirection));
      properties.add(new (T.EnumPropertyOfDateRangePickerNavigationMode()).new("navigationMode", this.navigationMode));
      properties.add(new diagnostics.DoubleProperty.new("headerHeight", this.headerHeight));
      properties.add(new diagnostics.DoubleProperty.new("viewSpacing", this.viewSpacing));
      properties.add(new diagnostics.DoubleProperty.new("selectionRadius", this.selectionRadius));
      properties.add(new colors.ColorProperty.new("todayHighlightColor", this.todayHighlightColor));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor));
      properties.add(new colors.ColorProperty.new("startRangeSelectionColor", this.startRangeSelectionColor));
      properties.add(new colors.ColorProperty.new("endRangeSelectionColor", this.endRangeSelectionColor));
      properties.add(new colors.ColorProperty.new("rangeSelectionColor", this.rangeSelectionColor));
      properties.add(new diagnostics.StringProperty.new("monthFormat", this.monthFormat));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("selectionTextStyle", this.selectionTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("rangeTextStyle", this.rangeTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("initialDisplayDate", this.initialDisplayDate));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("initialSelectedDate", this.initialSelectedDate));
      properties.add(new (T.IterableDiagnosticsOfDateTime()).new(this.initialSelectedDates).toDiagnosticsNode({name: "initialSelectedDates"}));
      properties.add(new (T.DiagnosticsPropertyOfPickerDateRange()).new("initialSelectedRange", this.initialSelectedRange));
      properties.add(new (T.IterableDiagnosticsOfPickerDateRange()).new(this.initialSelectedRanges).toDiagnosticsNode({name: "initialSelectedRanges"}));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("minDate", this.minDate));
      properties.add(new (T.DiagnosticsPropertyOfDateTime()).new("maxDate", this.maxDate));
      properties.add(new (T.DiagnosticsPropertyOfBuildContextAndDateRangePickerCellDetailsToWidget()).new("cellBuilder", this.cellBuilder));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("allowViewNavigation", this.allowViewNavigation));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("toggleDaySelection", this.toggleDaySelection));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enablePastDates", this.enablePastDates));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showNavigationArrow", this.showNavigationArrow));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showActionButtons", this.showActionButtons));
      properties.add(new diagnostics.StringProperty.new("cancelText", this.cancelText));
      properties.add(new diagnostics.StringProperty.new("confirmText", this.confirmText));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enableMultiView", this.enableMultiView));
      properties.add(new (T.DiagnosticsPropertyOfDateRangePickerViewChangedArgsTovoid()).new("onViewChanged", this.onViewChanged));
      properties.add(new (T.DiagnosticsPropertyOfDateRangePickerSelectionChangedArgsTovoid()).new("onSelectionChanged", this.onSelectionChanged));
      properties.add(new (T.DiagnosticsPropertyOfVoidTovoid()).new("onCancel", this.onCancel));
      properties.add(new (T.DiagnosticsPropertyOfObjectTodynamic()).new("onSubmit", this.onSubmit));
      properties.add(new (T.DiagnosticsPropertyOfDateRangePickerController()).new("controller", this.controller));
      properties.add(this.headerStyle.toDiagnosticsNode({name: "headerStyle"}));
      properties.add(this.yearCellStyle.toDiagnosticsNode({name: "yearCellStyle"}));
      properties.add(this.monthViewSettings.toDiagnosticsNode({name: "monthViewSettings"}));
      properties.add(this.monthCellStyle.toDiagnosticsNode({name: "monthCellStyle"}));
    }
  };
  (date_picker.SfDateRangePicker.new = function(opts) {
    let t59, t59$, t59$0;
    let key = opts && 'key' in opts ? opts.key : null;
    let view = opts && 'view' in opts ? opts.view : C[367] || CT.C367;
    if (view == null) dart.nullFailed(I[10], 180, 25, "view");
    let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : C[33] || CT.C33;
    if (selectionMode == null) dart.nullFailed(I[10], 181, 10, "selectionMode");
    let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : 40;
    if (headerHeight == null) dart.nullFailed(I[10], 182, 10, "headerHeight");
    let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let initialSelectedDate = opts && 'initialSelectedDate' in opts ? opts.initialSelectedDate : null;
    let initialSelectedDates = opts && 'initialSelectedDates' in opts ? opts.initialSelectedDates : null;
    let initialSelectedRange = opts && 'initialSelectedRange' in opts ? opts.initialSelectedRange : null;
    let initialSelectedRanges = opts && 'initialSelectedRanges' in opts ? opts.initialSelectedRanges : null;
    let toggleDaySelection = opts && 'toggleDaySelection' in opts ? opts.toggleDaySelection : false;
    if (toggleDaySelection == null) dart.nullFailed(I[10], 189, 10, "toggleDaySelection");
    let enablePastDates = opts && 'enablePastDates' in opts ? opts.enablePastDates : true;
    if (enablePastDates == null) dart.nullFailed(I[10], 190, 10, "enablePastDates");
    let showNavigationArrow = opts && 'showNavigationArrow' in opts ? opts.showNavigationArrow : false;
    if (showNavigationArrow == null) dart.nullFailed(I[10], 191, 10, "showNavigationArrow");
    let confirmText = opts && 'confirmText' in opts ? opts.confirmText : "OK";
    if (confirmText == null) dart.nullFailed(I[10], 192, 10, "confirmText");
    let cancelText = opts && 'cancelText' in opts ? opts.cancelText : "CANCEL";
    if (cancelText == null) dart.nullFailed(I[10], 193, 10, "cancelText");
    let showActionButtons = opts && 'showActionButtons' in opts ? opts.showActionButtons : false;
    if (showActionButtons == null) dart.nullFailed(I[10], 194, 10, "showActionButtons");
    let selectionShape = opts && 'selectionShape' in opts ? opts.selectionShape : C[172] || CT.C172;
    if (selectionShape == null) dart.nullFailed(I[10], 195, 10, "selectionShape");
    let navigationDirection = opts && 'navigationDirection' in opts ? opts.navigationDirection : C[358] || CT.C358;
    if (navigationDirection == null) dart.nullFailed(I[10], 196, 10, "navigationDirection");
    let allowViewNavigation = opts && 'allowViewNavigation' in opts ? opts.allowViewNavigation : true;
    if (allowViewNavigation == null) dart.nullFailed(I[10], 197, 10, "allowViewNavigation");
    let navigationMode = opts && 'navigationMode' in opts ? opts.navigationMode : C[377] || CT.C377;
    if (navigationMode == null) dart.nullFailed(I[10], 198, 10, "navigationMode");
    let enableMultiView = opts && 'enableMultiView' in opts ? opts.enableMultiView : false;
    if (enableMultiView == null) dart.nullFailed(I[10], 199, 10, "enableMultiView");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let onViewChanged = opts && 'onViewChanged' in opts ? opts.onViewChanged : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onSubmit = opts && 'onSubmit' in opts ? opts.onSubmit : null;
    let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : C[380] || CT.C380;
    if (headerStyle == null) dart.nullFailed(I[10], 205, 10, "headerStyle");
    let yearCellStyle = opts && 'yearCellStyle' in opts ? opts.yearCellStyle : C[381] || CT.C381;
    if (yearCellStyle == null) dart.nullFailed(I[10], 206, 10, "yearCellStyle");
    let monthViewSettings = opts && 'monthViewSettings' in opts ? opts.monthViewSettings : C[382] || CT.C382;
    if (monthViewSettings == null) dart.nullFailed(I[10], 207, 10, "monthViewSettings");
    let monthCellStyle = opts && 'monthCellStyle' in opts ? opts.monthCellStyle : C[383] || CT.C383;
    if (monthCellStyle == null) dart.nullFailed(I[10], 208, 10, "monthCellStyle");
    let minDate = opts && 'minDate' in opts ? opts.minDate : null;
    let maxDate = opts && 'maxDate' in opts ? opts.maxDate : null;
    let initialDisplayDate = opts && 'initialDisplayDate' in opts ? opts.initialDisplayDate : null;
    let viewSpacing = opts && 'viewSpacing' in opts ? opts.viewSpacing : 20;
    if (viewSpacing == null) dart.nullFailed(I[10], 212, 12, "viewSpacing");
    let selectionRadius = opts && 'selectionRadius' in opts ? opts.selectionRadius : -1;
    if (selectionRadius == null) dart.nullFailed(I[10], 213, 10, "selectionRadius");
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
    let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
    let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
    let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
    let rangeTextStyle = opts && 'rangeTextStyle' in opts ? opts.rangeTextStyle : null;
    let monthFormat = opts && 'monthFormat' in opts ? opts.monthFormat : null;
    let cellBuilder = opts && 'cellBuilder' in opts ? opts.cellBuilder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[selectionMode$1] = selectionMode;
    this[headerHeight$] = headerHeight;
    this[todayHighlightColor$1] = todayHighlightColor;
    this[backgroundColor$2] = backgroundColor;
    this[toggleDaySelection$] = toggleDaySelection;
    this[enablePastDates$1] = enablePastDates;
    this[showNavigationArrow$] = showNavigationArrow;
    this[confirmText$] = confirmText;
    this[cancelText$] = cancelText;
    this[showActionButtons$] = showActionButtons;
    this[selectionShape$1] = selectionShape;
    this[navigationDirection$1] = navigationDirection;
    this[allowViewNavigation$0] = allowViewNavigation;
    this[navigationMode$] = navigationMode;
    this[enableMultiView$1] = enableMultiView;
    this[controller$] = controller;
    this[onViewChanged$] = onViewChanged;
    this[onSelectionChanged$] = onSelectionChanged;
    this[onCancel$] = onCancel;
    this[onSubmit$] = onSubmit;
    this[headerStyle$] = headerStyle;
    this[yearCellStyle$] = yearCellStyle;
    this[monthViewSettings$] = monthViewSettings;
    this[monthCellStyle$] = monthCellStyle;
    this[selectionRadius$2] = selectionRadius;
    this[selectionColor$2] = selectionColor;
    this[startRangeSelectionColor$2] = startRangeSelectionColor;
    this[endRangeSelectionColor$2] = endRangeSelectionColor;
    this[rangeSelectionColor$2] = rangeSelectionColor;
    this[selectionTextStyle$2] = selectionTextStyle;
    this[rangeTextStyle$2] = rangeTextStyle;
    this[monthFormat$0] = monthFormat;
    this[cellBuilder$1] = cellBuilder;
    if (!(dart.notNull(headerHeight) >= -1)) dart.assertFailed(null, I[10], 222, 16, "headerHeight >= -1");
    if (!(minDate == null || maxDate == null || dart.test(minDate.isBefore(maxDate)))) dart.assertFailed(null, I[10], 223, 16, "minDate == null || maxDate == null || minDate.isBefore(maxDate)");
    if (!(minDate == null || maxDate == null || dart.test(maxDate.isAfter(minDate)))) dart.assertFailed(null, I[10], 224, 16, "minDate == null || maxDate == null || maxDate.isAfter(minDate)");
    if (!(dart.notNull(viewSpacing) >= 0)) dart.assertFailed(null, I[10], 225, 16, "viewSpacing >= 0");
    this[initialSelectedDate$] = controller != null && controller.selectedDate != null ? controller.selectedDate : initialSelectedDate;
    this[initialSelectedDates$] = controller != null && controller.selectedDates != null ? controller.selectedDates : initialSelectedDates;
    this[initialSelectedRange$] = controller != null && controller.selectedRange != null ? controller.selectedRange : initialSelectedRange;
    this[initialSelectedRanges$] = controller != null && controller.selectedRanges != null ? controller.selectedRanges : initialSelectedRanges;
    this[view$2] = controller != null && controller.view != null ? dart.nullCheck(controller.view) : view;
    this[initialDisplayDate$] = controller != null && controller.displayDate != null ? dart.nullCheck(controller.displayDate) : (t59 = initialDisplayDate, t59 == null ? new core.DateTime.now() : t59);
    this[minDate$1] = (t59$ = minDate, t59$ == null ? new core.DateTime.new(1900, 1, 1) : t59$);
    this[maxDate$1] = (t59$0 = maxDate, t59$0 == null ? new core.DateTime.new(2100, 12, 31) : t59$0);
    this[viewSpacing$] = dart.test(enableMultiView) ? viewSpacing : 0.0;
    date_picker.SfDateRangePicker.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker.SfDateRangePicker.prototype;
  dart.addTypeTests(date_picker.SfDateRangePicker);
  dart.addTypeCaches(date_picker.SfDateRangePicker);
  dart.setMethodSignature(date_picker.SfDateRangePicker, () => ({
    __proto__: dart.getMethods(date_picker.SfDateRangePicker.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(date_picker.SfDateRangePicker, I[11]);
  dart.setFieldSignature(date_picker.SfDateRangePicker, () => ({
    __proto__: dart.getFields(date_picker.SfDateRangePicker.__proto__),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    headerStyle: dart.finalFieldType(date_picker_manager.DateRangePickerHeaderStyle),
    headerHeight: dart.finalFieldType(core.double),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    toggleDaySelection: dart.finalFieldType(core.bool),
    allowViewNavigation: dart.finalFieldType(core.bool),
    cellBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, date_picker_manager.DateRangePickerCellDetails]))),
    enableMultiView: dart.finalFieldType(core.bool),
    viewSpacing: dart.finalFieldType(core.double),
    selectionRadius: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    monthViewSettings: dart.finalFieldType(date_picker_manager.DateRangePickerMonthViewSettings),
    yearCellStyle: dart.finalFieldType(date_picker_manager.DateRangePickerYearCellStyle),
    monthCellStyle: dart.finalFieldType(date_picker_manager.DateRangePickerMonthCellStyle),
    initialDisplayDate: dart.finalFieldType(core.DateTime),
    initialSelectedDate: dart.finalFieldType(dart.nullable(core.DateTime)),
    minDate: dart.finalFieldType(core.DateTime),
    maxDate: dart.finalFieldType(core.DateTime),
    enablePastDates: dart.finalFieldType(core.bool),
    initialSelectedDates: dart.finalFieldType(dart.nullable(core.List$(core.DateTime))),
    initialSelectedRange: dart.finalFieldType(dart.nullable(date_picker_manager.PickerDateRange)),
    initialSelectedRanges: dart.finalFieldType(dart.nullable(core.List$(date_picker_manager.PickerDateRange))),
    controller: dart.finalFieldType(dart.nullable(date_picker_manager.DateRangePickerController)),
    showNavigationArrow: dart.finalFieldType(core.bool),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    navigationMode: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationMode),
    onViewChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [date_picker_manager.DateRangePickerViewChangedArgs]))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [date_picker_manager.DateRangePickerSelectionChangedArgs]))),
    confirmText: dart.finalFieldType(core.String),
    cancelText: dart.finalFieldType(core.String),
    showActionButtons: dart.finalFieldType(core.bool),
    onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSubmit: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [core.Object])))
  }));
  var view$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.view");
  var selectionMode$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.selectionMode");
  var headerStyle$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.headerStyle");
  var headerHeight$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.headerHeight");
  var todayHighlightColor$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.todayHighlightColor");
  var backgroundColor$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.backgroundColor");
  var toggleDaySelection$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.toggleDaySelection");
  var cellBuilder$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.cellBuilder");
  var allowViewNavigation$1 = dart.privateName(date_picker, "SfHijriDateRangePicker.allowViewNavigation");
  var enableMultiView$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.enableMultiView");
  var viewSpacing$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.viewSpacing");
  var selectionRadius$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.selectionRadius");
  var selectionTextStyle$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.selectionTextStyle");
  var rangeTextStyle$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.rangeTextStyle");
  var selectionColor$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.selectionColor");
  var startRangeSelectionColor$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.startRangeSelectionColor");
  var rangeSelectionColor$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.rangeSelectionColor");
  var endRangeSelectionColor$3 = dart.privateName(date_picker, "SfHijriDateRangePicker.endRangeSelectionColor");
  var monthViewSettings$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.monthViewSettings");
  var yearCellStyle$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.yearCellStyle");
  var monthCellStyle$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.monthCellStyle");
  var initialDisplayDate$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.initialDisplayDate");
  var initialSelectedDate$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.initialSelectedDate");
  var minDate$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.minDate");
  var maxDate$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.maxDate");
  var enablePastDates$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.enablePastDates");
  var initialSelectedDates$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.initialSelectedDates");
  var initialSelectedRange$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.initialSelectedRange");
  var initialSelectedRanges$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.initialSelectedRanges");
  var controller$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.controller");
  var showNavigationArrow$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.showNavigationArrow");
  var navigationDirection$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.navigationDirection");
  var selectionShape$2 = dart.privateName(date_picker, "SfHijriDateRangePicker.selectionShape");
  var monthFormat$1 = dart.privateName(date_picker, "SfHijriDateRangePicker.monthFormat");
  var navigationMode$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.navigationMode");
  var onViewChanged$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.onViewChanged");
  var onSelectionChanged$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.onSelectionChanged");
  var confirmText$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.confirmText");
  var cancelText$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.cancelText");
  var showActionButtons$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.showActionButtons");
  var onCancel$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.onCancel");
  var onSubmit$0 = dart.privateName(date_picker, "SfHijriDateRangePicker.onSubmit");
  date_picker.SfHijriDateRangePicker = class SfHijriDateRangePicker extends framework.StatelessWidget {
    get view() {
      return this[view$3];
    }
    set view(value) {
      super.view = value;
    }
    get selectionMode() {
      return this[selectionMode$2];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get headerStyle() {
      return this[headerStyle$0];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get headerHeight() {
      return this[headerHeight$0];
    }
    set headerHeight(value) {
      super.headerHeight = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$2];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get toggleDaySelection() {
      return this[toggleDaySelection$0];
    }
    set toggleDaySelection(value) {
      super.toggleDaySelection = value;
    }
    get cellBuilder() {
      return this[cellBuilder$2];
    }
    set cellBuilder(value) {
      super.cellBuilder = value;
    }
    get allowViewNavigation() {
      return this[allowViewNavigation$1];
    }
    set allowViewNavigation(value) {
      super.allowViewNavigation = value;
    }
    get enableMultiView() {
      return this[enableMultiView$2];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get viewSpacing() {
      return this[viewSpacing$0];
    }
    set viewSpacing(value) {
      super.viewSpacing = value;
    }
    get selectionRadius() {
      return this[selectionRadius$3];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$3];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$3];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$3];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$3];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$3];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$3];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get monthViewSettings() {
      return this[monthViewSettings$0];
    }
    set monthViewSettings(value) {
      super.monthViewSettings = value;
    }
    get yearCellStyle() {
      return this[yearCellStyle$0];
    }
    set yearCellStyle(value) {
      super.yearCellStyle = value;
    }
    get monthCellStyle() {
      return this[monthCellStyle$0];
    }
    set monthCellStyle(value) {
      super.monthCellStyle = value;
    }
    get initialDisplayDate() {
      return this[initialDisplayDate$0];
    }
    set initialDisplayDate(value) {
      super.initialDisplayDate = value;
    }
    get initialSelectedDate() {
      return this[initialSelectedDate$0];
    }
    set initialSelectedDate(value) {
      super.initialSelectedDate = value;
    }
    get minDate() {
      return this[minDate$2];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$2];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get enablePastDates() {
      return this[enablePastDates$2];
    }
    set enablePastDates(value) {
      super.enablePastDates = value;
    }
    get initialSelectedDates() {
      return this[initialSelectedDates$0];
    }
    set initialSelectedDates(value) {
      super.initialSelectedDates = value;
    }
    get initialSelectedRange() {
      return this[initialSelectedRange$0];
    }
    set initialSelectedRange(value) {
      super.initialSelectedRange = value;
    }
    get initialSelectedRanges() {
      return this[initialSelectedRanges$0];
    }
    set initialSelectedRanges(value) {
      super.initialSelectedRanges = value;
    }
    get controller() {
      return this[controller$0];
    }
    set controller(value) {
      super.controller = value;
    }
    get showNavigationArrow() {
      return this[showNavigationArrow$0];
    }
    set showNavigationArrow(value) {
      super.showNavigationArrow = value;
    }
    get navigationDirection() {
      return this[navigationDirection$2];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get selectionShape() {
      return this[selectionShape$2];
    }
    set selectionShape(value) {
      super.selectionShape = value;
    }
    get monthFormat() {
      return this[monthFormat$1];
    }
    set monthFormat(value) {
      super.monthFormat = value;
    }
    get navigationMode() {
      return this[navigationMode$0];
    }
    set navigationMode(value) {
      super.navigationMode = value;
    }
    get onViewChanged() {
      return this[onViewChanged$0];
    }
    set onViewChanged(value) {
      super.onViewChanged = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$0];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get confirmText() {
      return this[confirmText$0];
    }
    set confirmText(value) {
      super.confirmText = value;
    }
    get cancelText() {
      return this[cancelText$0];
    }
    set cancelText(value) {
      super.cancelText = value;
    }
    get showActionButtons() {
      return this[showActionButtons$0];
    }
    set showActionButtons(value) {
      super.showActionButtons = value;
    }
    get onCancel() {
      return this[onCancel$0];
    }
    set onCancel(value) {
      super.onCancel = value;
    }
    get onSubmit() {
      return this[onSubmit$0];
    }
    set onSubmit(value) {
      super.onSubmit = value;
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 3382, 29, "context");
      return new date_picker._SfDateRangePicker.new({key: this.key, view: picker_helper.DateRangePickerHelper.getPickerView(this.view), selectionMode: this.selectionMode, headerHeight: this.headerHeight, todayHighlightColor: this.todayHighlightColor, backgroundColor: this.backgroundColor, initialSelectedDate: this.initialSelectedDate, initialSelectedDates: this.initialSelectedDates, initialSelectedRange: this.initialSelectedRange, initialSelectedRanges: this.initialSelectedRanges, toggleDaySelection: this.toggleDaySelection, enablePastDates: this.enablePastDates, showNavigationArrow: this.showNavigationArrow, selectionShape: this.selectionShape, navigationDirection: this.navigationDirection, controller: this.controller, onViewChanged: this.onViewChanged, onSelectionChanged: this.onSelectionChanged, onCancel: this.onCancel, onSubmit: this.onSubmit, headerStyle: this.headerStyle, yearCellStyle: this.yearCellStyle, monthViewSettings: this.monthViewSettings, initialDisplayDate: this.initialDisplayDate, minDate: this.minDate, maxDate: this.maxDate, monthCellStyle: this.monthCellStyle, allowViewNavigation: this.allowViewNavigation, enableMultiView: this.enableMultiView, viewSpacing: this.viewSpacing, selectionRadius: this.selectionRadius, selectionColor: this.selectionColor, startRangeSelectionColor: this.startRangeSelectionColor, endRangeSelectionColor: this.endRangeSelectionColor, rangeSelectionColor: this.rangeSelectionColor, selectionTextStyle: this.selectionTextStyle, rangeTextStyle: this.rangeTextStyle, monthFormat: this.monthFormat, cellBuilder: this.cellBuilder, navigationMode: this.navigationMode, confirmText: this.confirmText, cancelText: this.cancelText, showActionButtons: this.showActionButtons, isHijri: true, $creationLocationd_0dea112b090073317d4: C[432] || CT.C432});
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[10], 3432, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfHijriDatePickerView()).new("view", this.view));
      properties.add(new (T.EnumPropertyOfDateRangePickerSelectionMode()).new("selectionMode", this.selectionMode));
      properties.add(new (T.EnumPropertyOfDateRangePickerSelectionShape()).new("selectionShape", this.selectionShape));
      properties.add(new (T.EnumPropertyOfDateRangePickerNavigationDirection()).new("navigationDirection", this.navigationDirection));
      properties.add(new (T.EnumPropertyOfDateRangePickerNavigationMode()).new("navigationMode", this.navigationMode));
      properties.add(new diagnostics.DoubleProperty.new("headerHeight", this.headerHeight));
      properties.add(new diagnostics.DoubleProperty.new("viewSpacing", this.viewSpacing));
      properties.add(new diagnostics.DoubleProperty.new("selectionRadius", this.selectionRadius));
      properties.add(new colors.ColorProperty.new("todayHighlightColor", this.todayHighlightColor));
      properties.add(new colors.ColorProperty.new("backgroundColor", this.backgroundColor));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor));
      properties.add(new colors.ColorProperty.new("startRangeSelectionColor", this.startRangeSelectionColor));
      properties.add(new colors.ColorProperty.new("endRangeSelectionColor", this.endRangeSelectionColor));
      properties.add(new colors.ColorProperty.new("rangeSelectionColor", this.rangeSelectionColor));
      properties.add(new diagnostics.StringProperty.new("monthFormat", this.monthFormat));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("selectionTextStyle", this.selectionTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfTextStyle()).new("rangeTextStyle", this.rangeTextStyle));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("initialDisplayDate", this.initialDisplayDate));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("initialSelectedDate", this.initialSelectedDate));
      properties.add(new (T.IterableDiagnosticsOfHijriDateTime()).new(this.initialSelectedDates).toDiagnosticsNode({name: "initialSelectedDates"}));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateRange()).new("HijriDateRange", this.initialSelectedRange));
      properties.add(new (T.IterableDiagnosticsOfHijriDateRange()).new(this.initialSelectedRanges).toDiagnosticsNode({name: "initialSelectedRanges"}));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("minDate", this.minDate));
      properties.add(new (T.DiagnosticsPropertyOfHijriDateTime()).new("maxDate", this.maxDate));
      properties.add(new (T.DiagnosticsPropertyOfBuildContextAndHijriDateRangePickerCellDetailsToWidget()).new("cellBuilder", this.cellBuilder));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("allowViewNavigation", this.allowViewNavigation));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("toggleDaySelection", this.toggleDaySelection));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enablePastDates", this.enablePastDates));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showNavigationArrow", this.showNavigationArrow));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("showActionButtons", this.showActionButtons));
      properties.add(new diagnostics.StringProperty.new("cancelText", this.cancelText));
      properties.add(new diagnostics.StringProperty.new("confirmText", this.confirmText));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("enableMultiView", this.enableMultiView));
      properties.add(new (T.DiagnosticsPropertyOfHijriDatePickerViewChangedArgsTovoid()).new("onViewChanged", this.onViewChanged));
      properties.add(new (T.DiagnosticsPropertyOfDateRangePickerSelectionChangedArgsTovoid()).new("onSelectionChanged", this.onSelectionChanged));
      properties.add(new (T.DiagnosticsPropertyOfVoidTovoid()).new("onCancel", this.onCancel));
      properties.add(new (T.DiagnosticsPropertyOfObjectTodynamic()).new("onSubmit", this.onSubmit));
      properties.add(new (T.DiagnosticsPropertyOfHijriDatePickerController()).new("controller", this.controller));
      properties.add(this.headerStyle.toDiagnosticsNode({name: "headerStyle"}));
      properties.add(this.yearCellStyle.toDiagnosticsNode({name: "yearCellStyle"}));
      properties.add(this.monthViewSettings.toDiagnosticsNode({name: "monthViewSettings"}));
      properties.add(this.monthCellStyle.toDiagnosticsNode({name: "monthCellStyle"}));
    }
  };
  (date_picker.SfHijriDateRangePicker.new = function(opts) {
    let t59, t59$, t59$0;
    let key = opts && 'key' in opts ? opts.key : null;
    let view = opts && 'view' in opts ? opts.view : C[363] || CT.C363;
    if (view == null) dart.nullFailed(I[10], 1899, 25, "view");
    let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : C[33] || CT.C33;
    if (selectionMode == null) dart.nullFailed(I[10], 1900, 10, "selectionMode");
    let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : 40;
    if (headerHeight == null) dart.nullFailed(I[10], 1901, 10, "headerHeight");
    let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let initialSelectedDate = opts && 'initialSelectedDate' in opts ? opts.initialSelectedDate : null;
    let initialSelectedDates = opts && 'initialSelectedDates' in opts ? opts.initialSelectedDates : null;
    let initialSelectedRange = opts && 'initialSelectedRange' in opts ? opts.initialSelectedRange : null;
    let initialSelectedRanges = opts && 'initialSelectedRanges' in opts ? opts.initialSelectedRanges : null;
    let toggleDaySelection = opts && 'toggleDaySelection' in opts ? opts.toggleDaySelection : false;
    if (toggleDaySelection == null) dart.nullFailed(I[10], 1908, 10, "toggleDaySelection");
    let enablePastDates = opts && 'enablePastDates' in opts ? opts.enablePastDates : true;
    if (enablePastDates == null) dart.nullFailed(I[10], 1909, 10, "enablePastDates");
    let showNavigationArrow = opts && 'showNavigationArrow' in opts ? opts.showNavigationArrow : false;
    if (showNavigationArrow == null) dart.nullFailed(I[10], 1910, 10, "showNavigationArrow");
    let confirmText = opts && 'confirmText' in opts ? opts.confirmText : "OK";
    if (confirmText == null) dart.nullFailed(I[10], 1911, 10, "confirmText");
    let cancelText = opts && 'cancelText' in opts ? opts.cancelText : "CANCEL";
    if (cancelText == null) dart.nullFailed(I[10], 1912, 10, "cancelText");
    let showActionButtons = opts && 'showActionButtons' in opts ? opts.showActionButtons : false;
    if (showActionButtons == null) dart.nullFailed(I[10], 1913, 10, "showActionButtons");
    let selectionShape = opts && 'selectionShape' in opts ? opts.selectionShape : C[172] || CT.C172;
    if (selectionShape == null) dart.nullFailed(I[10], 1914, 10, "selectionShape");
    let navigationDirection = opts && 'navigationDirection' in opts ? opts.navigationDirection : C[358] || CT.C358;
    if (navigationDirection == null) dart.nullFailed(I[10], 1915, 10, "navigationDirection");
    let navigationMode = opts && 'navigationMode' in opts ? opts.navigationMode : C[377] || CT.C377;
    if (navigationMode == null) dart.nullFailed(I[10], 1916, 10, "navigationMode");
    let allowViewNavigation = opts && 'allowViewNavigation' in opts ? opts.allowViewNavigation : true;
    if (allowViewNavigation == null) dart.nullFailed(I[10], 1917, 10, "allowViewNavigation");
    let enableMultiView = opts && 'enableMultiView' in opts ? opts.enableMultiView : false;
    if (enableMultiView == null) dart.nullFailed(I[10], 1918, 10, "enableMultiView");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let onViewChanged = opts && 'onViewChanged' in opts ? opts.onViewChanged : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onSubmit = opts && 'onSubmit' in opts ? opts.onSubmit : null;
    let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : C[380] || CT.C380;
    if (headerStyle == null) dart.nullFailed(I[10], 1924, 10, "headerStyle");
    let yearCellStyle = opts && 'yearCellStyle' in opts ? opts.yearCellStyle : C[429] || CT.C429;
    if (yearCellStyle == null) dart.nullFailed(I[10], 1925, 10, "yearCellStyle");
    let monthViewSettings = opts && 'monthViewSettings' in opts ? opts.monthViewSettings : C[430] || CT.C430;
    if (monthViewSettings == null) dart.nullFailed(I[10], 1926, 10, "monthViewSettings");
    let initialDisplayDate = opts && 'initialDisplayDate' in opts ? opts.initialDisplayDate : null;
    let minDate = opts && 'minDate' in opts ? opts.minDate : null;
    let maxDate = opts && 'maxDate' in opts ? opts.maxDate : null;
    let monthCellStyle = opts && 'monthCellStyle' in opts ? opts.monthCellStyle : C[431] || CT.C431;
    if (monthCellStyle == null) dart.nullFailed(I[10], 1930, 10, "monthCellStyle");
    let viewSpacing = opts && 'viewSpacing' in opts ? opts.viewSpacing : 20;
    if (viewSpacing == null) dart.nullFailed(I[10], 1931, 12, "viewSpacing");
    let selectionRadius = opts && 'selectionRadius' in opts ? opts.selectionRadius : -1;
    if (selectionRadius == null) dart.nullFailed(I[10], 1932, 10, "selectionRadius");
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
    let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
    let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
    let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
    let rangeTextStyle = opts && 'rangeTextStyle' in opts ? opts.rangeTextStyle : null;
    let monthFormat = opts && 'monthFormat' in opts ? opts.monthFormat : null;
    let cellBuilder = opts && 'cellBuilder' in opts ? opts.cellBuilder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[selectionMode$2] = selectionMode;
    this[headerHeight$0] = headerHeight;
    this[todayHighlightColor$2] = todayHighlightColor;
    this[backgroundColor$3] = backgroundColor;
    this[toggleDaySelection$0] = toggleDaySelection;
    this[enablePastDates$2] = enablePastDates;
    this[showNavigationArrow$0] = showNavigationArrow;
    this[confirmText$0] = confirmText;
    this[cancelText$0] = cancelText;
    this[showActionButtons$0] = showActionButtons;
    this[selectionShape$2] = selectionShape;
    this[navigationDirection$2] = navigationDirection;
    this[navigationMode$0] = navigationMode;
    this[allowViewNavigation$1] = allowViewNavigation;
    this[enableMultiView$2] = enableMultiView;
    this[controller$0] = controller;
    this[onViewChanged$0] = onViewChanged;
    this[onSelectionChanged$0] = onSelectionChanged;
    this[onCancel$0] = onCancel;
    this[onSubmit$0] = onSubmit;
    this[headerStyle$0] = headerStyle;
    this[yearCellStyle$0] = yearCellStyle;
    this[monthViewSettings$0] = monthViewSettings;
    this[monthCellStyle$0] = monthCellStyle;
    this[selectionRadius$3] = selectionRadius;
    this[selectionColor$3] = selectionColor;
    this[startRangeSelectionColor$3] = startRangeSelectionColor;
    this[endRangeSelectionColor$3] = endRangeSelectionColor;
    this[rangeSelectionColor$3] = rangeSelectionColor;
    this[selectionTextStyle$3] = selectionTextStyle;
    this[rangeTextStyle$3] = rangeTextStyle;
    this[monthFormat$1] = monthFormat;
    this[cellBuilder$2] = cellBuilder;
    this[initialSelectedDate$0] = controller != null && controller.selectedDate != null ? controller.selectedDate : initialSelectedDate;
    this[initialSelectedDates$0] = controller != null && controller.selectedDates != null ? controller.selectedDates : initialSelectedDates;
    this[initialSelectedRange$0] = controller != null && controller.selectedRange != null ? controller.selectedRange : initialSelectedRange;
    this[initialSelectedRanges$0] = controller != null && controller.selectedRanges != null ? controller.selectedRanges : initialSelectedRanges;
    this[view$3] = controller != null && controller.view != null ? dart.nullCheck(controller.view) : view;
    this[initialDisplayDate$0] = controller != null && controller.displayDate != null ? dart.nullCheck(controller.displayDate) : (t59 = initialDisplayDate, t59 == null ? core$.HijriDateTime.now() : t59);
    this[minDate$2] = (t59$ = minDate, t59$ == null ? new core$.HijriDateTime.new(1356, 1, 1) : t59$);
    this[maxDate$2] = (t59$0 = maxDate, t59$0 == null ? new core$.HijriDateTime.new(1499, 12, 30) : t59$0);
    this[viewSpacing$0] = dart.test(enableMultiView) ? viewSpacing : 0.0;
    date_picker.SfHijriDateRangePicker.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker.SfHijriDateRangePicker.prototype;
  dart.addTypeTests(date_picker.SfHijriDateRangePicker);
  dart.addTypeCaches(date_picker.SfHijriDateRangePicker);
  dart.setMethodSignature(date_picker.SfHijriDateRangePicker, () => ({
    __proto__: dart.getMethods(date_picker.SfHijriDateRangePicker.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(date_picker.SfHijriDateRangePicker, I[11]);
  dart.setFieldSignature(date_picker.SfHijriDateRangePicker, () => ({
    __proto__: dart.getFields(date_picker.SfHijriDateRangePicker.__proto__),
    view: dart.finalFieldType(hijri_date_picker_manager.HijriDatePickerView),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    headerStyle: dart.finalFieldType(date_picker_manager.DateRangePickerHeaderStyle),
    headerHeight: dart.finalFieldType(core.double),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    toggleDaySelection: dart.finalFieldType(core.bool),
    cellBuilder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, hijri_date_picker_manager.HijriDateRangePickerCellDetails]))),
    allowViewNavigation: dart.finalFieldType(core.bool),
    enableMultiView: dart.finalFieldType(core.bool),
    viewSpacing: dart.finalFieldType(core.double),
    selectionRadius: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    monthViewSettings: dart.finalFieldType(hijri_date_picker_manager.HijriDatePickerMonthViewSettings),
    yearCellStyle: dart.finalFieldType(hijri_date_picker_manager.HijriDatePickerYearCellStyle),
    monthCellStyle: dart.finalFieldType(hijri_date_picker_manager.HijriDatePickerMonthCellStyle),
    initialDisplayDate: dart.finalFieldType(core$.HijriDateTime),
    initialSelectedDate: dart.finalFieldType(dart.nullable(core$.HijriDateTime)),
    minDate: dart.finalFieldType(core$.HijriDateTime),
    maxDate: dart.finalFieldType(core$.HijriDateTime),
    enablePastDates: dart.finalFieldType(core.bool),
    initialSelectedDates: dart.finalFieldType(dart.nullable(core.List$(core$.HijriDateTime))),
    initialSelectedRange: dart.finalFieldType(dart.nullable(hijri_date_picker_manager.HijriDateRange)),
    initialSelectedRanges: dart.finalFieldType(dart.nullable(core.List$(hijri_date_picker_manager.HijriDateRange))),
    controller: dart.finalFieldType(dart.nullable(hijri_date_picker_manager.HijriDatePickerController)),
    showNavigationArrow: dart.finalFieldType(core.bool),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    navigationMode: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationMode),
    onViewChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [hijri_date_picker_manager.HijriDatePickerViewChangedArgs]))),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [date_picker_manager.DateRangePickerSelectionChangedArgs]))),
    confirmText: dart.finalFieldType(core.String),
    cancelText: dart.finalFieldType(core.String),
    showActionButtons: dart.finalFieldType(core.bool),
    onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSubmit: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [core.Object])))
  }));
  var view$4 = dart.privateName(date_picker, "_SfDateRangePicker.view");
  var selectionMode$3 = dart.privateName(date_picker, "_SfDateRangePicker.selectionMode");
  var isHijri$1 = dart.privateName(date_picker, "_SfDateRangePicker.isHijri");
  var headerStyle$1 = dart.privateName(date_picker, "_SfDateRangePicker.headerStyle");
  var headerHeight$1 = dart.privateName(date_picker, "_SfDateRangePicker.headerHeight");
  var confirmText$1 = dart.privateName(date_picker, "_SfDateRangePicker.confirmText");
  var cancelText$1 = dart.privateName(date_picker, "_SfDateRangePicker.cancelText");
  var showActionButtons$1 = dart.privateName(date_picker, "_SfDateRangePicker.showActionButtons");
  var todayHighlightColor$3 = dart.privateName(date_picker, "_SfDateRangePicker.todayHighlightColor");
  var backgroundColor$4 = dart.privateName(date_picker, "_SfDateRangePicker.backgroundColor");
  var toggleDaySelection$1 = dart.privateName(date_picker, "_SfDateRangePicker.toggleDaySelection");
  var allowViewNavigation$2 = dart.privateName(date_picker, "_SfDateRangePicker.allowViewNavigation");
  var enableMultiView$3 = dart.privateName(date_picker, "_SfDateRangePicker.enableMultiView");
  var viewSpacing$1 = dart.privateName(date_picker, "_SfDateRangePicker.viewSpacing");
  var selectionRadius$4 = dart.privateName(date_picker, "_SfDateRangePicker.selectionRadius");
  var selectionTextStyle$4 = dart.privateName(date_picker, "_SfDateRangePicker.selectionTextStyle");
  var rangeTextStyle$4 = dart.privateName(date_picker, "_SfDateRangePicker.rangeTextStyle");
  var selectionColor$4 = dart.privateName(date_picker, "_SfDateRangePicker.selectionColor");
  var startRangeSelectionColor$4 = dart.privateName(date_picker, "_SfDateRangePicker.startRangeSelectionColor");
  var rangeSelectionColor$4 = dart.privateName(date_picker, "_SfDateRangePicker.rangeSelectionColor");
  var endRangeSelectionColor$4 = dart.privateName(date_picker, "_SfDateRangePicker.endRangeSelectionColor");
  var monthViewSettings$1 = dart.privateName(date_picker, "_SfDateRangePicker.monthViewSettings");
  var cellBuilder$3 = dart.privateName(date_picker, "_SfDateRangePicker.cellBuilder");
  var yearCellStyle$1 = dart.privateName(date_picker, "_SfDateRangePicker.yearCellStyle");
  var monthCellStyle$1 = dart.privateName(date_picker, "_SfDateRangePicker.monthCellStyle");
  var initialDisplayDate$1 = dart.privateName(date_picker, "_SfDateRangePicker.initialDisplayDate");
  var initialSelectedDate$1 = dart.privateName(date_picker, "_SfDateRangePicker.initialSelectedDate");
  var minDate$3 = dart.privateName(date_picker, "_SfDateRangePicker.minDate");
  var maxDate$3 = dart.privateName(date_picker, "_SfDateRangePicker.maxDate");
  var enablePastDates$3 = dart.privateName(date_picker, "_SfDateRangePicker.enablePastDates");
  var initialSelectedDates$1 = dart.privateName(date_picker, "_SfDateRangePicker.initialSelectedDates");
  var initialSelectedRange$1 = dart.privateName(date_picker, "_SfDateRangePicker.initialSelectedRange");
  var initialSelectedRanges$1 = dart.privateName(date_picker, "_SfDateRangePicker.initialSelectedRanges");
  var controller$1 = dart.privateName(date_picker, "_SfDateRangePicker.controller");
  var showNavigationArrow$1 = dart.privateName(date_picker, "_SfDateRangePicker.showNavigationArrow");
  var navigationDirection$3 = dart.privateName(date_picker, "_SfDateRangePicker.navigationDirection");
  var selectionShape$3 = dart.privateName(date_picker, "_SfDateRangePicker.selectionShape");
  var monthFormat$2 = dart.privateName(date_picker, "_SfDateRangePicker.monthFormat");
  var onViewChanged$1 = dart.privateName(date_picker, "_SfDateRangePicker.onViewChanged");
  var onSelectionChanged$1 = dart.privateName(date_picker, "_SfDateRangePicker.onSelectionChanged");
  var navigationMode$1 = dart.privateName(date_picker, "_SfDateRangePicker.navigationMode");
  var onCancel$1 = dart.privateName(date_picker, "_SfDateRangePicker.onCancel");
  var onSubmit$1 = dart.privateName(date_picker, "_SfDateRangePicker.onSubmit");
  date_picker._SfDateRangePicker = class _SfDateRangePicker extends framework.StatefulWidget {
    get view() {
      return this[view$4];
    }
    set view(value) {
      super.view = value;
    }
    get selectionMode() {
      return this[selectionMode$3];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get isHijri() {
      return this[isHijri$1];
    }
    set isHijri(value) {
      super.isHijri = value;
    }
    get headerStyle() {
      return this[headerStyle$1];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get headerHeight() {
      return this[headerHeight$1];
    }
    set headerHeight(value) {
      super.headerHeight = value;
    }
    get confirmText() {
      return this[confirmText$1];
    }
    set confirmText(value) {
      super.confirmText = value;
    }
    get cancelText() {
      return this[cancelText$1];
    }
    set cancelText(value) {
      super.cancelText = value;
    }
    get showActionButtons() {
      return this[showActionButtons$1];
    }
    set showActionButtons(value) {
      super.showActionButtons = value;
    }
    get todayHighlightColor() {
      return this[todayHighlightColor$3];
    }
    set todayHighlightColor(value) {
      super.todayHighlightColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$4];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get toggleDaySelection() {
      return this[toggleDaySelection$1];
    }
    set toggleDaySelection(value) {
      super.toggleDaySelection = value;
    }
    get allowViewNavigation() {
      return this[allowViewNavigation$2];
    }
    set allowViewNavigation(value) {
      super.allowViewNavigation = value;
    }
    get enableMultiView() {
      return this[enableMultiView$3];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get viewSpacing() {
      return this[viewSpacing$1];
    }
    set viewSpacing(value) {
      super.viewSpacing = value;
    }
    get selectionRadius() {
      return this[selectionRadius$4];
    }
    set selectionRadius(value) {
      super.selectionRadius = value;
    }
    get selectionTextStyle() {
      return this[selectionTextStyle$4];
    }
    set selectionTextStyle(value) {
      super.selectionTextStyle = value;
    }
    get rangeTextStyle() {
      return this[rangeTextStyle$4];
    }
    set rangeTextStyle(value) {
      super.rangeTextStyle = value;
    }
    get selectionColor() {
      return this[selectionColor$4];
    }
    set selectionColor(value) {
      super.selectionColor = value;
    }
    get startRangeSelectionColor() {
      return this[startRangeSelectionColor$4];
    }
    set startRangeSelectionColor(value) {
      super.startRangeSelectionColor = value;
    }
    get rangeSelectionColor() {
      return this[rangeSelectionColor$4];
    }
    set rangeSelectionColor(value) {
      super.rangeSelectionColor = value;
    }
    get endRangeSelectionColor() {
      return this[endRangeSelectionColor$4];
    }
    set endRangeSelectionColor(value) {
      super.endRangeSelectionColor = value;
    }
    get monthViewSettings() {
      return this[monthViewSettings$1];
    }
    set monthViewSettings(value) {
      super.monthViewSettings = value;
    }
    get cellBuilder() {
      return this[cellBuilder$3];
    }
    set cellBuilder(value) {
      super.cellBuilder = value;
    }
    get yearCellStyle() {
      return this[yearCellStyle$1];
    }
    set yearCellStyle(value) {
      super.yearCellStyle = value;
    }
    get monthCellStyle() {
      return this[monthCellStyle$1];
    }
    set monthCellStyle(value) {
      super.monthCellStyle = value;
    }
    get initialDisplayDate() {
      return this[initialDisplayDate$1];
    }
    set initialDisplayDate(value) {
      super.initialDisplayDate = value;
    }
    get initialSelectedDate() {
      return this[initialSelectedDate$1];
    }
    set initialSelectedDate(value) {
      super.initialSelectedDate = value;
    }
    get minDate() {
      return this[minDate$3];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$3];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get enablePastDates() {
      return this[enablePastDates$3];
    }
    set enablePastDates(value) {
      super.enablePastDates = value;
    }
    get initialSelectedDates() {
      return this[initialSelectedDates$1];
    }
    set initialSelectedDates(value) {
      super.initialSelectedDates = value;
    }
    get initialSelectedRange() {
      return this[initialSelectedRange$1];
    }
    set initialSelectedRange(value) {
      super.initialSelectedRange = value;
    }
    get initialSelectedRanges() {
      return this[initialSelectedRanges$1];
    }
    set initialSelectedRanges(value) {
      super.initialSelectedRanges = value;
    }
    get controller() {
      return this[controller$1];
    }
    set controller(value) {
      super.controller = value;
    }
    get showNavigationArrow() {
      return this[showNavigationArrow$1];
    }
    set showNavigationArrow(value) {
      super.showNavigationArrow = value;
    }
    get navigationDirection() {
      return this[navigationDirection$3];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get selectionShape() {
      return this[selectionShape$3];
    }
    set selectionShape(value) {
      super.selectionShape = value;
    }
    get monthFormat() {
      return this[monthFormat$2];
    }
    set monthFormat(value) {
      super.monthFormat = value;
    }
    get onViewChanged() {
      return this[onViewChanged$1];
    }
    set onViewChanged(value) {
      super.onViewChanged = value;
    }
    get onSelectionChanged() {
      return this[onSelectionChanged$1];
    }
    set onSelectionChanged(value) {
      super.onSelectionChanged = value;
    }
    get navigationMode() {
      return this[navigationMode$1];
    }
    set navigationMode(value) {
      super.navigationMode = value;
    }
    get onCancel() {
      return this[onCancel$1];
    }
    set onCancel(value) {
      super.onCancel = value;
    }
    get onSubmit() {
      return this[onSubmit$1];
    }
    set onSubmit(value) {
      super.onSubmit = value;
    }
    createState() {
      return new date_picker._SfDateRangePickerState.new();
    }
  };
  (date_picker._SfDateRangePicker.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let view = opts && 'view' in opts ? opts.view : null;
    if (view == null) dart.nullFailed(I[10], 3511, 19, "view");
    let selectionMode = opts && 'selectionMode' in opts ? opts.selectionMode : null;
    if (selectionMode == null) dart.nullFailed(I[10], 3512, 19, "selectionMode");
    let isHijri = opts && 'isHijri' in opts ? opts.isHijri : false;
    if (isHijri == null) dart.nullFailed(I[10], 3513, 10, "isHijri");
    let headerHeight = opts && 'headerHeight' in opts ? opts.headerHeight : null;
    if (headerHeight == null) dart.nullFailed(I[10], 3514, 19, "headerHeight");
    let todayHighlightColor = opts && 'todayHighlightColor' in opts ? opts.todayHighlightColor : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let initialSelectedDate = opts && 'initialSelectedDate' in opts ? opts.initialSelectedDate : null;
    let initialSelectedDates = opts && 'initialSelectedDates' in opts ? opts.initialSelectedDates : null;
    let initialSelectedRange = opts && 'initialSelectedRange' in opts ? opts.initialSelectedRange : null;
    let initialSelectedRanges = opts && 'initialSelectedRanges' in opts ? opts.initialSelectedRanges : null;
    let toggleDaySelection = opts && 'toggleDaySelection' in opts ? opts.toggleDaySelection : false;
    if (toggleDaySelection == null) dart.nullFailed(I[10], 3521, 10, "toggleDaySelection");
    let enablePastDates = opts && 'enablePastDates' in opts ? opts.enablePastDates : true;
    if (enablePastDates == null) dart.nullFailed(I[10], 3522, 10, "enablePastDates");
    let showNavigationArrow = opts && 'showNavigationArrow' in opts ? opts.showNavigationArrow : false;
    if (showNavigationArrow == null) dart.nullFailed(I[10], 3523, 10, "showNavigationArrow");
    let selectionShape = opts && 'selectionShape' in opts ? opts.selectionShape : null;
    if (selectionShape == null) dart.nullFailed(I[10], 3524, 19, "selectionShape");
    let navigationDirection = opts && 'navigationDirection' in opts ? opts.navigationDirection : null;
    if (navigationDirection == null) dart.nullFailed(I[10], 3525, 19, "navigationDirection");
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let onViewChanged = opts && 'onViewChanged' in opts ? opts.onViewChanged : null;
    let onSelectionChanged = opts && 'onSelectionChanged' in opts ? opts.onSelectionChanged : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onSubmit = opts && 'onSubmit' in opts ? opts.onSubmit : null;
    let headerStyle = opts && 'headerStyle' in opts ? opts.headerStyle : null;
    if (headerStyle == null) dart.nullFailed(I[10], 3531, 19, "headerStyle");
    let yearCellStyle = opts && 'yearCellStyle' in opts ? opts.yearCellStyle : null;
    let monthViewSettings = opts && 'monthViewSettings' in opts ? opts.monthViewSettings : null;
    let initialDisplayDate = opts && 'initialDisplayDate' in opts ? opts.initialDisplayDate : null;
    let confirmText = opts && 'confirmText' in opts ? opts.confirmText : "OK";
    if (confirmText == null) dart.nullFailed(I[10], 3535, 10, "confirmText");
    let cancelText = opts && 'cancelText' in opts ? opts.cancelText : "CANCEL";
    if (cancelText == null) dart.nullFailed(I[10], 3536, 10, "cancelText");
    let showActionButtons = opts && 'showActionButtons' in opts ? opts.showActionButtons : false;
    if (showActionButtons == null) dart.nullFailed(I[10], 3537, 10, "showActionButtons");
    let minDate = opts && 'minDate' in opts ? opts.minDate : null;
    let maxDate = opts && 'maxDate' in opts ? opts.maxDate : null;
    let monthCellStyle = opts && 'monthCellStyle' in opts ? opts.monthCellStyle : null;
    let allowViewNavigation = opts && 'allowViewNavigation' in opts ? opts.allowViewNavigation : true;
    if (allowViewNavigation == null) dart.nullFailed(I[10], 3541, 10, "allowViewNavigation");
    let enableMultiView = opts && 'enableMultiView' in opts ? opts.enableMultiView : false;
    if (enableMultiView == null) dart.nullFailed(I[10], 3542, 10, "enableMultiView");
    let navigationMode = opts && 'navigationMode' in opts ? opts.navigationMode : null;
    if (navigationMode == null) dart.nullFailed(I[10], 3543, 19, "navigationMode");
    let viewSpacing = opts && 'viewSpacing' in opts ? opts.viewSpacing : null;
    if (viewSpacing == null) dart.nullFailed(I[10], 3544, 19, "viewSpacing");
    let selectionRadius = opts && 'selectionRadius' in opts ? opts.selectionRadius : null;
    if (selectionRadius == null) dart.nullFailed(I[10], 3545, 19, "selectionRadius");
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let startRangeSelectionColor = opts && 'startRangeSelectionColor' in opts ? opts.startRangeSelectionColor : null;
    let endRangeSelectionColor = opts && 'endRangeSelectionColor' in opts ? opts.endRangeSelectionColor : null;
    let rangeSelectionColor = opts && 'rangeSelectionColor' in opts ? opts.rangeSelectionColor : null;
    let selectionTextStyle = opts && 'selectionTextStyle' in opts ? opts.selectionTextStyle : null;
    let rangeTextStyle = opts && 'rangeTextStyle' in opts ? opts.rangeTextStyle : null;
    let monthFormat = opts && 'monthFormat' in opts ? opts.monthFormat : null;
    let cellBuilder = opts && 'cellBuilder' in opts ? opts.cellBuilder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[view$4] = view;
    this[selectionMode$3] = selectionMode;
    this[isHijri$1] = isHijri;
    this[headerHeight$1] = headerHeight;
    this[todayHighlightColor$3] = todayHighlightColor;
    this[backgroundColor$4] = backgroundColor;
    this[initialSelectedDate$1] = initialSelectedDate;
    this[initialSelectedDates$1] = initialSelectedDates;
    this[initialSelectedRange$1] = initialSelectedRange;
    this[initialSelectedRanges$1] = initialSelectedRanges;
    this[toggleDaySelection$1] = toggleDaySelection;
    this[enablePastDates$3] = enablePastDates;
    this[showNavigationArrow$1] = showNavigationArrow;
    this[selectionShape$3] = selectionShape;
    this[navigationDirection$3] = navigationDirection;
    this[controller$1] = controller;
    this[onViewChanged$1] = onViewChanged;
    this[onSelectionChanged$1] = onSelectionChanged;
    this[onCancel$1] = onCancel;
    this[onSubmit$1] = onSubmit;
    this[headerStyle$1] = headerStyle;
    this[yearCellStyle$1] = yearCellStyle;
    this[monthViewSettings$1] = monthViewSettings;
    this[initialDisplayDate$1] = initialDisplayDate;
    this[confirmText$1] = confirmText;
    this[cancelText$1] = cancelText;
    this[showActionButtons$1] = showActionButtons;
    this[minDate$3] = minDate;
    this[maxDate$3] = maxDate;
    this[monthCellStyle$1] = monthCellStyle;
    this[allowViewNavigation$2] = allowViewNavigation;
    this[enableMultiView$3] = enableMultiView;
    this[navigationMode$1] = navigationMode;
    this[viewSpacing$1] = viewSpacing;
    this[selectionRadius$4] = selectionRadius;
    this[selectionColor$4] = selectionColor;
    this[startRangeSelectionColor$4] = startRangeSelectionColor;
    this[endRangeSelectionColor$4] = endRangeSelectionColor;
    this[rangeSelectionColor$4] = rangeSelectionColor;
    this[selectionTextStyle$4] = selectionTextStyle;
    this[rangeTextStyle$4] = rangeTextStyle;
    this[monthFormat$2] = monthFormat;
    this[cellBuilder$3] = cellBuilder;
    date_picker._SfDateRangePicker.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker._SfDateRangePicker.prototype;
  dart.addTypeTests(date_picker._SfDateRangePicker);
  dart.addTypeCaches(date_picker._SfDateRangePicker);
  dart.setMethodSignature(date_picker._SfDateRangePicker, () => ({
    __proto__: dart.getMethods(date_picker._SfDateRangePicker.__proto__),
    createState: dart.fnType(date_picker._SfDateRangePickerState, [])
  }));
  dart.setLibraryUri(date_picker._SfDateRangePicker, I[11]);
  dart.setFieldSignature(date_picker._SfDateRangePicker, () => ({
    __proto__: dart.getFields(date_picker._SfDateRangePicker.__proto__),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    isHijri: dart.finalFieldType(core.bool),
    headerStyle: dart.finalFieldType(date_picker_manager.DateRangePickerHeaderStyle),
    headerHeight: dart.finalFieldType(core.double),
    confirmText: dart.finalFieldType(core.String),
    cancelText: dart.finalFieldType(core.String),
    showActionButtons: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    toggleDaySelection: dart.finalFieldType(core.bool),
    allowViewNavigation: dart.finalFieldType(core.bool),
    enableMultiView: dart.finalFieldType(core.bool),
    viewSpacing: dart.finalFieldType(core.double),
    selectionRadius: dart.finalFieldType(core.double),
    selectionTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    rangeTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    selectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    startRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    rangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    endRangeSelectionColor: dart.finalFieldType(dart.nullable(ui.Color)),
    monthViewSettings: dart.finalFieldType(dart.dynamic),
    cellBuilder: dart.finalFieldType(dart.dynamic),
    yearCellStyle: dart.finalFieldType(dart.dynamic),
    monthCellStyle: dart.finalFieldType(dart.dynamic),
    initialDisplayDate: dart.finalFieldType(dart.dynamic),
    initialSelectedDate: dart.finalFieldType(dart.dynamic),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    enablePastDates: dart.finalFieldType(core.bool),
    initialSelectedDates: dart.finalFieldType(dart.nullable(core.List)),
    initialSelectedRange: dart.finalFieldType(dart.dynamic),
    initialSelectedRanges: dart.finalFieldType(dart.nullable(core.List)),
    controller: dart.finalFieldType(dart.dynamic),
    showNavigationArrow: dart.finalFieldType(core.bool),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    selectionShape: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionShape),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    onViewChanged: dart.finalFieldType(dart.dynamic),
    onSelectionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [date_picker_manager.DateRangePickerSelectionChangedArgs]))),
    navigationMode: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationMode),
    onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onSubmit: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [core.Object])))
  }));
  var ___SfDateRangePickerState__currentViewVisibleDates = dart.privateName(date_picker, "_#_SfDateRangePickerState#_currentViewVisibleDates");
  var _currentDate = dart.privateName(date_picker, "_currentDate");
  var _selectedDate$2 = dart.privateName(date_picker, "_selectedDate");
  var _minWidth = dart.privateName(date_picker, "_minWidth");
  var _minHeight = dart.privateName(date_picker, "_minHeight");
  var ___SfDateRangePickerState__textScaleFactor = dart.privateName(date_picker, "_#_SfDateRangePickerState#_textScaleFactor");
  var ___SfDateRangePickerState__headerVisibleDates = dart.privateName(date_picker, "_#_SfDateRangePickerState#_headerVisibleDates");
  var ___SfDateRangePickerState__viewHeaderVisibleDates = dart.privateName(date_picker, "_#_SfDateRangePickerState#_viewHeaderVisibleDates");
  var _selectedDates$2 = dart.privateName(date_picker, "_selectedDates");
  var _selectedRange$2 = dart.privateName(date_picker, "_selectedRange");
  var _selectedRanges$2 = dart.privateName(date_picker, "_selectedRanges");
  var _scrollViewKey = dart.privateName(date_picker, "_scrollViewKey");
  var ___SfDateRangePickerState__view = dart.privateName(date_picker, "_#_SfDateRangePickerState#_view");
  var ___SfDateRangePickerState__isRtl = dart.privateName(date_picker, "_#_SfDateRangePickerState#_isRtl");
  var ___SfDateRangePickerState__controller = dart.privateName(date_picker, "_#_SfDateRangePickerState#_controller");
  var ___SfDateRangePickerState__controller_isSet = dart.privateName(date_picker, "_#_SfDateRangePickerState#_controller#isSet");
  var ___SfDateRangePickerState__locale = dart.privateName(date_picker, "_#_SfDateRangePickerState#_locale");
  var ___SfDateRangePickerState__localizations = dart.privateName(date_picker, "_#_SfDateRangePickerState#_localizations");
  var ___SfDateRangePickerState__datePickerTheme = dart.privateName(date_picker, "_#_SfDateRangePickerState#_datePickerTheme");
  var _forwardDateCollection = dart.privateName(date_picker, "_forwardDateCollection");
  var _backwardDateCollection = dart.privateName(date_picker, "_backwardDateCollection");
  var _scrollKey = dart.privateName(date_picker, "_scrollKey");
  var _pickerKey = dart.privateName(date_picker, "_pickerKey");
  var _pickerScrollController = dart.privateName(date_picker, "_pickerScrollController");
  var ___SfDateRangePickerState__minPickerWidth = dart.privateName(date_picker, "_#_SfDateRangePickerState#_minPickerWidth");
  var ___SfDateRangePickerState__minPickerHeight = dart.privateName(date_picker, "_#_SfDateRangePickerState#_minPickerHeight");
  var ___SfDateRangePickerState__previousSelectedValue = dart.privateName(date_picker, "_#_SfDateRangePickerState#_previousSelectedValue");
  var ___SfDateRangePickerState__isMobilePlatform = dart.privateName(date_picker, "_#_SfDateRangePickerState#_isMobilePlatform");
  var _currentViewVisibleDates = dart.privateName(date_picker, "_currentViewVisibleDates");
  var _textScaleFactor = dart.privateName(date_picker, "_textScaleFactor");
  var _headerVisibleDates = dart.privateName(date_picker, "_headerVisibleDates");
  var _viewHeaderVisibleDates = dart.privateName(date_picker, "_viewHeaderVisibleDates");
  var _view$1 = dart.privateName(date_picker, "_view");
  var _isRtl = dart.privateName(date_picker, "_isRtl");
  var _controller = dart.privateName(date_picker, "_controller");
  var _locale = dart.privateName(date_picker, "_locale");
  var _localizations = dart.privateName(date_picker, "_localizations");
  var _datePickerTheme = dart.privateName(date_picker, "_datePickerTheme");
  var _minPickerWidth = dart.privateName(date_picker, "_minPickerWidth");
  var _minPickerHeight = dart.privateName(date_picker, "_minPickerHeight");
  var _previousSelectedValue = dart.privateName(date_picker, "_previousSelectedValue");
  var _isMobilePlatform = dart.privateName(date_picker, "_isMobilePlatform");
  var _initPickerController = dart.privateName(date_picker, "_initPickerController");
  var _initNavigation = dart.privateName(date_picker, "_initNavigation");
  var _updateSelectionValues = dart.privateName(date_picker, "_updateSelectionValues");
  var _updateCurrentVisibleDates = dart.privateName(date_picker, "_updateCurrentVisibleDates");
  var _pickerValueChangedListener = dart.privateName(date_picker, "_pickerValueChangedListener");
  var _getSelectedDates = dart.privateName(date_picker, "_getSelectedDates");
  var _getSelectedRanges = dart.privateName(date_picker, "_getSelectedRanges");
  var _initializeScrollView = dart.privateName(date_picker, "_initializeScrollView");
  var _isScrollViewDatesValid = dart.privateName(date_picker, "_isScrollViewDatesValid");
  var _updateCurrentDate = dart.privateName(date_picker, "_updateCurrentDate");
  var _handleScrollViewSizeChanged = dart.privateName(date_picker, "_handleScrollViewSizeChanged");
  var _addScrollView = dart.privateName(date_picker, "_addScrollView");
  var _addChildren = dart.privateName(date_picker, "_addChildren");
  var _moveToNextView = dart.privateName(date_picker, "_moveToNextView");
  var _moveToPreviousView = dart.privateName(date_picker, "_moveToPreviousView");
  var _position = dart.privateName(date_picker, "_position");
  var _children$0 = dart.privateName(date_picker, "_children");
  var _updateVisibleDates = dart.privateName(date_picker, "_updateVisibleDates");
  var _checkDateWithInVisibleDates = dart.privateName(date_picker, "_checkDateWithInVisibleDates");
  var _handleScrollChanged = dart.privateName(date_picker, "_handleScrollChanged");
  var _notifyCurrentVisibleDatesChanged = dart.privateName(date_picker, "_notifyCurrentVisibleDatesChanged");
  var _addScrollViewDateCollection = dart.privateName(date_picker, "_addScrollViewDateCollection");
  var ScrollPhysics_parent = dart.privateName(scroll_physics, "ScrollPhysics.parent");
  var _getScrollViewItem = dart.privateName(date_picker, "_getScrollViewItem");
  var _getActionsButton = dart.privateName(date_picker, "_getActionsButton");
  var _getViewHeaderView = dart.privateName(date_picker, "_getViewHeaderView");
  var _updateCalendarTapCallbackForHeader = dart.privateName(date_picker, "_updateCalendarTapCallbackForHeader");
  var _getPickerStateValues = dart.privateName(date_picker, "_getPickerStateValues");
  var _updatePickerStateValues = dart.privateName(date_picker, "_updatePickerStateValues");
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var VerticalDivider_color = dart.privateName(divider, "VerticalDivider.color");
  var VerticalDivider_endIndent = dart.privateName(divider, "VerticalDivider.endIndent");
  var VerticalDivider_indent = dart.privateName(divider, "VerticalDivider.indent");
  var VerticalDivider_thickness = dart.privateName(divider, "VerticalDivider.thickness");
  var VerticalDivider_width = dart.privateName(divider, "VerticalDivider.width");
  var BoxConstraints_maxHeight = dart.privateName(box$, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box$, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box$, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box$, "BoxConstraints.minWidth");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _handleCancel = dart.privateName(date_picker, "_handleCancel");
  var _handleOk = dart.privateName(date_picker, "_handleOk");
  var _moveToPreviousViewWithAnimation = dart.privateName(date_picker, "_moveToPreviousViewWithAnimation");
  var _moveToNextViewWithAnimation = dart.privateName(date_picker, "_moveToNextViewWithAnimation");
  date_picker._SfDateRangePickerState = class _SfDateRangePickerState extends framework.State$(date_picker._SfDateRangePicker) {
    get [_currentViewVisibleDates]() {
      let t59;
      t59 = this[___SfDateRangePickerState__currentViewVisibleDates];
      return t59 == null ? dart.throw(new _internal.LateError.fieldNI("_currentViewVisibleDates")) : t59;
    }
    set [_currentViewVisibleDates](t59) {
      if (t59 == null) dart.nullFailed(I[10], 3647, 22, "null");
      this[___SfDateRangePickerState__currentViewVisibleDates] = t59;
    }
    get [_textScaleFactor]() {
      let t60;
      t60 = this[___SfDateRangePickerState__textScaleFactor];
      return t60 == null ? dart.throw(new _internal.LateError.fieldNI("_textScaleFactor")) : t60;
    }
    set [_textScaleFactor](t60) {
      if (t60 == null) dart.nullFailed(I[10], 3650, 15, "null");
      this[___SfDateRangePickerState__textScaleFactor] = t60;
    }
    get [_headerVisibleDates]() {
      let t61;
      t61 = this[___SfDateRangePickerState__headerVisibleDates];
      return t61 == null ? dart.throw(new _internal.LateError.fieldNI("_headerVisibleDates")) : t61;
    }
    set [_headerVisibleDates](t61) {
      if (t61 == null) dart.nullFailed(I[10], 3651, 37, "null");
      this[___SfDateRangePickerState__headerVisibleDates] = t61;
    }
    get [_viewHeaderVisibleDates]() {
      let t62;
      t62 = this[___SfDateRangePickerState__viewHeaderVisibleDates];
      return t62 == null ? dart.throw(new _internal.LateError.fieldNI("_viewHeaderVisibleDates")) : t62;
    }
    set [_viewHeaderVisibleDates](t62) {
      if (t62 == null) dart.nullFailed(I[10], 3652, 37, "null");
      this[___SfDateRangePickerState__viewHeaderVisibleDates] = t62;
    }
    get [_view$1]() {
      let t63;
      t63 = this[___SfDateRangePickerState__view];
      return t63 == null ? dart.throw(new _internal.LateError.fieldNI("_view")) : t63;
    }
    set [_view$1](t63) {
      if (t63 == null) dart.nullFailed(I[10], 3658, 28, "null");
      this[___SfDateRangePickerState__view] = t63;
    }
    get [_isRtl]() {
      let t64;
      t64 = this[___SfDateRangePickerState__isRtl];
      return t64 == null ? dart.throw(new _internal.LateError.fieldNI("_isRtl")) : t64;
    }
    set [_isRtl](t64) {
      if (t64 == null) dart.nullFailed(I[10], 3659, 13, "null");
      this[___SfDateRangePickerState__isRtl] = t64;
    }
    get [_controller]() {
      return dart.test(this[___SfDateRangePickerState__controller_isSet]) ? this[___SfDateRangePickerState__controller] : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [_controller](t65) {
      this[___SfDateRangePickerState__controller_isSet] = true;
      this[___SfDateRangePickerState__controller] = t65;
    }
    get [_locale]() {
      let t66;
      t66 = this[___SfDateRangePickerState__locale];
      return t66 == null ? dart.throw(new _internal.LateError.fieldNI("_locale")) : t66;
    }
    set [_locale](t66) {
      if (t66 == null) dart.nullFailed(I[10], 3661, 15, "null");
      this[___SfDateRangePickerState__locale] = t66;
    }
    get [_localizations]() {
      let t67;
      t67 = this[___SfDateRangePickerState__localizations];
      return t67 == null ? dart.throw(new _internal.LateError.fieldNI("_localizations")) : t67;
    }
    set [_localizations](t67) {
      if (t67 == null) dart.nullFailed(I[10], 3662, 24, "null");
      this[___SfDateRangePickerState__localizations] = t67;
    }
    set [_datePickerTheme](t68) {
      if (t68 == null) dart.nullFailed(I[10], 3663, 35, "null");
      this[___SfDateRangePickerState__datePickerTheme] = t68;
    }
    get [_datePickerTheme]() {
      let t69;
      t69 = this[___SfDateRangePickerState__datePickerTheme];
      return t69 == null ? dart.throw(new _internal.LateError.fieldNI("_datePickerTheme")) : t69;
    }
    get [_minPickerWidth]() {
      let t69;
      t69 = this[___SfDateRangePickerState__minPickerWidth];
      return t69 == null ? dart.throw(new _internal.LateError.fieldNI("_minPickerWidth")) : t69;
    }
    set [_minPickerWidth](t69) {
      if (t69 == null) dart.nullFailed(I[10], 3687, 15, "null");
      this[___SfDateRangePickerState__minPickerWidth] = t69;
    }
    get [_minPickerHeight]() {
      let t70;
      t70 = this[___SfDateRangePickerState__minPickerHeight];
      return t70 == null ? dart.throw(new _internal.LateError.fieldNI("_minPickerHeight")) : t70;
    }
    set [_minPickerHeight](t70) {
      if (t70 == null) dart.nullFailed(I[10], 3691, 15, "null");
      this[___SfDateRangePickerState__minPickerHeight] = t70;
    }
    get [_previousSelectedValue]() {
      let t71;
      t71 = this[___SfDateRangePickerState__previousSelectedValue];
      return t71 == null ? dart.throw(new _internal.LateError.fieldNI("_previousSelectedValue")) : t71;
    }
    set [_previousSelectedValue](t71) {
      if (t71 == null) dart.nullFailed(I[10], 3695, 24, "null");
      this[___SfDateRangePickerState__previousSelectedValue] = t71;
    }
    get [_isMobilePlatform]() {
      let t72;
      t72 = this[___SfDateRangePickerState__isMobilePlatform];
      return t72 == null ? dart.throw(new _internal.LateError.fieldNI("_isMobilePlatform")) : t72;
    }
    set [_isMobilePlatform](t72) {
      if (t72 == null) dart.nullFailed(I[10], 3697, 13, "null");
      this[___SfDateRangePickerState__isMobilePlatform] = t72;
    }
    initState() {
      let t73;
      this[_isRtl] = false;
      this[_initPickerController]();
      this[_initNavigation]();
      this[_updateSelectionValues]();
      this[_view$1] = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      this[_updateCurrentVisibleDates]();
      this[_headerVisibleDates] = new (T.ValueNotifierOfList()).new(this[_currentViewVisibleDates]);
      this[_viewHeaderVisibleDates] = new (T.ValueNotifierOfList()).new(this[_currentViewVisibleDates]);
      dart.dsend(this[_controller], 'addPropertyChangedListener', [dart.bind(this, _pickerValueChangedListener)]);
      this[_previousSelectedValue] = (t73 = new picker_helper.PickerStateArgs.new(), (() => {
        t73.selectedDate = dart.dload(this[_controller], 'selectedDate');
        t73.selectedDates = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
        t73.selectedRange = dart.dload(this[_controller], 'selectedRange');
        t73.selectedRanges = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
        return t73;
      })());
      super.initState();
    }
    didChangeDependencies() {
      let t73, t73$, t73$0, t73$1, t73$2;
      this[_textScaleFactor] = media_query.MediaQuery.of(this.context).textScaleFactor;
      let direction = basic.Directionality.of(this.context);
      this[_minPickerWidth] = media_query.MediaQuery.of(this.context).size.width;
      this[_minPickerHeight] = 300.0;
      this[_locale] = localizations$.Localizations.localeOf(this.context);
      this[_localizations] = global_localizations.SfLocalizations.of(this.context);
      let pickerTheme = daterangepicker_theme.SfDateRangePickerTheme.of(this.context);
      let themeData = theme.Theme.of(this.context);
      this[_datePickerTheme] = pickerTheme.copyWith({todayTextStyle: pickerTheme.todayTextStyle.color == null ? pickerTheme.todayTextStyle.copyWith({color: themeData.accentColor}) : pickerTheme.todayTextStyle, todayCellTextStyle: pickerTheme.todayCellTextStyle.color == null ? pickerTheme.todayCellTextStyle.copyWith({color: themeData.accentColor}) : pickerTheme.todayCellTextStyle, selectionColor: (t73 = pickerTheme.selectionColor, t73 == null ? themeData.accentColor : t73), startRangeSelectionColor: (t73$ = pickerTheme.startRangeSelectionColor, t73$ == null ? themeData.accentColor : t73$), rangeSelectionColor: (t73$0 = pickerTheme.rangeSelectionColor, t73$0 == null ? themeData.accentColor.withOpacity(0.1) : t73$0), endRangeSelectionColor: (t73$1 = pickerTheme.endRangeSelectionColor, t73$1 == null ? themeData.accentColor : t73$1), todayHighlightColor: (t73$2 = pickerTheme.todayHighlightColor, t73$2 == null ? themeData.accentColor : t73$2)});
      this[_isRtl] = direction == ui.TextDirection.rtl;
      this[_isMobilePlatform] = picker_helper.DateRangePickerHelper.isMobileLayout(theme.Theme.of(this.context).platform);
      super.didChangeDependencies();
    }
    didUpdateWidget(oldWidget) {
      let t73, t73$, t73$0, t73$1, t73$2, t73$3, t73$4, t73$5, t73$6, t73$7, t73$8, t73$9, t73$10, t73$11, t73$12, t73$13, t73$14;
      date_picker._SfDateRangePicker.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[10], 3764, 43, "oldWidget");
      if (!dart.equals(oldWidget.controller, this.widget.controller)) {
        t73 = oldWidget.controller;
        t73 == null ? null : dart.dsend(t73, 'removePropertyChangedListener', [dart.bind(this, _pickerValueChangedListener)]);
        dart.dsend(this[_controller], 'removePropertyChangedListener', [dart.bind(this, _pickerValueChangedListener)]);
        if (this.widget.controller != null) {
          dart.dput(this[_controller], 'selectedDate', dart.dload(dart.nullCheck(this.widget.controller), 'selectedDate'));
          dart.dput(this[_controller], 'selectedDates', this[_getSelectedDates](picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(dart.nullCheck(this.widget.controller), 'selectedDates')))));
          dart.dput(this[_controller], 'selectedRange', dart.dload(dart.nullCheck(this.widget.controller), 'selectedRange'));
          dart.dput(this[_controller], 'selectedRanges', this[_getSelectedRanges](picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(dart.nullCheck(this.widget.controller), 'selectedRanges')))));
          dart.dput(this[_controller], 'view', dart.dload(dart.nullCheck(this.widget.controller), 'view'));
          dart.dput(this[_controller], 'displayDate', (t73$ = dart.dload(dart.nullCheck(this.widget.controller), 'displayDate'), t73$ == null ? this[_currentDate] : t73$));
          this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, dart.dload(this[_controller], 'displayDate'));
        } else {
          this[_initPickerController]();
        }
        t73$0 = this[_controller];
        dart.dload(t73$0, 'view') == null ? dart.dput(t73$0, 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(this[_view$1]) : picker_helper.DateRangePickerHelper.getPickerView(this[_view$1])) : null;
        dart.dsend(this[_controller], 'addPropertyChangedListener', [dart.bind(this, _pickerValueChangedListener)]);
        this[_initNavigation]();
        this[_updateSelectionValues]();
        this[_view$1] = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      }
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      if (view == date_picker_manager.DateRangePickerView.month && !dart.equals(dart.dload(oldWidget.monthViewSettings, 'firstDayOfWeek'), dart.dload(this.widget.monthViewSettings, 'firstDayOfWeek'))) {
        if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
          this[_forwardDateCollection][$clear]();
          this[_backwardDateCollection][$clear]();
        } else {
          this[_updateCurrentVisibleDates]();
          if (this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
            this[_viewHeaderVisibleDates].value = this[_currentViewVisibleDates];
          }
        }
      }
      if (this.widget.navigationMode != oldWidget.navigationMode) {
        this[_initializeScrollView]();
      }
      if (!dart.test(this.widget.isHijri) && view == date_picker_manager.DateRangePickerView.month && this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.equals(dart.dload(oldWidget.monthViewSettings, 'numberOfWeeksInView'), dart.dload(this.widget.monthViewSettings, 'numberOfWeeksInView'))) {
        this[_initializeScrollView]();
      }
      if (view == date_picker_manager.DateRangePickerView.month && this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && !dart.equals(dart.dload(oldWidget.monthViewSettings, 'viewHeaderHeight'), dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight'))) {
        this[_initializeScrollView]();
      }
      if (oldWidget.showActionButtons != this.widget.showActionButtons) {
        if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
          this[_initializeScrollView]();
        }
        if (dart.test(this.widget.showActionButtons)) {
          this[_previousSelectedValue] = (t73$1 = new picker_helper.PickerStateArgs.new(), (() => {
            t73$1.selectedDate = dart.dload(this[_controller], 'selectedDate');
            t73$1.selectedDates = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
            t73$1.selectedRange = dart.dload(this[_controller], 'selectedRange');
            t73$1.selectedRanges = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
            return t73$1;
          })());
        }
      }
      if ((oldWidget.navigationDirection != this.widget.navigationDirection || oldWidget.enableMultiView != this.widget.enableMultiView) && this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
        this[_initializeScrollView]();
      }
      if (oldWidget.selectionMode != this.widget.selectionMode) {
        this[_updateSelectionValues]();
      }
      if (this.widget.isHijri != oldWidget.isHijri) {
        this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, this[_currentDate]);
        this[_updateCurrentVisibleDates]();
      }
      if (!dart.equals(oldWidget.minDate, this.widget.minDate) || !dart.equals(oldWidget.maxDate, this.widget.maxDate)) {
        this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, this[_currentDate]);
        if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.test(this[_isScrollViewDatesValid]())) {
          this[_initializeScrollView]();
        }
      }
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month && oldWidget.navigationDirection != this.widget.navigationDirection) {
        this[_viewHeaderVisibleDates].value = this[_currentViewVisibleDates];
      }
      if (!dart.test(this.widget.isHijri) && picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri) != picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(oldWidget.monthViewSettings, oldWidget.isHijri)) {
        this[_currentDate] = this[_updateCurrentDate](oldWidget);
        dart.dput(this[_controller], 'displayDate', this[_currentDate]);
      }
      if (!dart.equals(oldWidget.controller, this.widget.controller) || this.widget.controller == null) {
        super.didUpdateWidget(oldWidget);
        return;
      }
      if (!dart.equals((t73$2 = oldWidget.controller, t73$2 == null ? null : dart.dload(t73$2, 'selectedDate')), (t73$3 = this.widget.controller, t73$3 == null ? null : dart.dload(t73$3, 'selectedDate')))) {
        this[_selectedDate$2] = dart.dload(this[_controller], 'selectedDate');
      }
      if (!dart.equals((t73$4 = oldWidget.controller, t73$4 == null ? null : dart.dload(t73$4, 'selectedDates')), (t73$5 = this.widget.controller, t73$5 == null ? null : dart.dload(t73$5, 'selectedDates')))) {
        this[_selectedDates$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
      }
      if (!dart.equals((t73$6 = oldWidget.controller, t73$6 == null ? null : dart.dload(t73$6, 'selectedRange')), (t73$7 = this.widget.controller, t73$7 == null ? null : dart.dload(t73$7, 'selectedRange')))) {
        this[_selectedRange$2] = dart.dload(this[_controller], 'selectedRange');
      }
      if (!dart.equals((t73$8 = oldWidget.controller, t73$8 == null ? null : dart.dload(t73$8, 'selectedRanges')), (t73$9 = this.widget.controller, t73$9 == null ? null : dart.dload(t73$9, 'selectedRanges')))) {
        this[_selectedRanges$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
      }
      if (!dart.equals((t73$10 = oldWidget.controller, t73$10 == null ? null : dart.dload(t73$10, 'view')), (t73$11 = this.widget.controller, t73$11 == null ? null : dart.dload(t73$11, 'view')))) {
        this[_view$1] = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
        this[_currentDate] = this[_updateCurrentDate](oldWidget);
        dart.dput(this[_controller], 'displayDate', this[_currentDate]);
      }
      if (!dart.equals((t73$12 = oldWidget.controller, t73$12 == null ? null : dart.dload(t73$12, 'displayDate')), (t73$13 = this.widget.controller, t73$13 == null ? null : dart.dload(t73$13, 'displayDate'))) && (t73$14 = this.widget.controller, t73$14 == null ? null : dart.dload(t73$14, 'displayDate')) != null) {
        this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, dart.dload(this[_controller], 'displayDate'));
        dart.dput(this[_controller], 'displayDate', this[_currentDate]);
      }
      super.didUpdateWidget(oldWidget);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 3936, 29, "context");
      let top = 0.0;
      let height = null;
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          let t73;
          if (context == null) dart.nullFailed(I[10], 3939, 32, "context");
          if (constraints == null) dart.nullFailed(I[10], 3939, 56, "constraints");
          let previousWidth = this[_minWidth];
          let previousHeight = this[_minHeight];
          this[_minWidth] = constraints.maxWidth === 1 / 0 ? this[_minPickerWidth] : constraints.maxWidth;
          this[_minHeight] = constraints.maxHeight === 1 / 0 ? this[_minPickerHeight] : constraints.maxHeight;
          let actionButtonsHeight = dart.test(this.widget.showActionButtons) ? dart.nullCheck(this[_minHeight]) * 0.1 < 50 ? 50.0 : dart.nullCheck(this[_minHeight]) * 0.1 : 0.0;
          this[_handleScrollViewSizeChanged](dart.nullCheck(this[_minHeight]), dart.nullCheck(this[_minWidth]), previousHeight, previousWidth, actionButtonsHeight);
          height = dart.nullCheck(this[_minHeight]) - dart.notNull(this.widget.headerHeight);
          top = this.widget.headerHeight;
          if (this[_view$1] == date_picker_manager.DateRangePickerView.month && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
            height = dart.notNull(height) - dart.notNull(core.num.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')));
            top = dart.notNull(top) + dart.notNull(core.num.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')));
          }
          return new container.Container.new({width: this[_minWidth], height: this[_minHeight], color: (t73 = this.widget.backgroundColor, t73 == null ? this[_datePickerTheme].backgroundColor : t73), child: this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll ? this[_addScrollView](dart.nullCheck(this[_minWidth]), dart.nullCheck(this[_minHeight]), actionButtonsHeight) : this[_addChildren](top, height, dart.nullCheck(this[_minWidth]), actionButtonsHeight), $creationLocationd_0dea112b090073317d4: C[478] || CT.C478});
        }, T.BuildContextAndBoxConstraintsToContainer()), $creationLocationd_0dea112b090073317d4: C[484] || CT.C484});
    }
    dispose() {
      dart.dsend(this[_controller], 'removePropertyChangedListener', [dart.bind(this, _pickerValueChangedListener)]);
      super.dispose();
    }
    [_initNavigation]() {
      dart.dput(this[_controller], 'forward', dart.bind(this, _moveToNextView));
      dart.dput(this[_controller], 'backward', dart.bind(this, _moveToPreviousView));
    }
    [_initPickerController]() {
      let t73;
      this[_controller] = (t73 = this.widget.controller, t73 == null ? dart.test(this.widget.isHijri) ? new hijri_date_picker_manager.HijriDatePickerController.new() : new date_picker_manager.DateRangePickerController.new() : t73);
      dart.dput(this[_controller], 'selectedDate', this.widget.initialSelectedDate);
      dart.dput(this[_controller], 'selectedDates', this[_getSelectedDates](picker_helper.DateRangePickerHelper.cloneList(this.widget.initialSelectedDates)));
      dart.dput(this[_controller], 'selectedRange', this.widget.initialSelectedRange);
      dart.dput(this[_controller], 'selectedRanges', picker_helper.DateRangePickerHelper.cloneList(this.widget.initialSelectedRanges));
      dart.dput(this[_controller], 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(this.widget.view) : picker_helper.DateRangePickerHelper.getPickerView(this.widget.view));
      this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, this.widget.initialDisplayDate);
      dart.dput(this[_controller], 'displayDate', this[_currentDate]);
    }
    [_updateSelectionValues]() {
      this[_selectedDate$2] = dart.dload(this[_controller], 'selectedDate');
      this[_selectedDates$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
      this[_selectedRange$2] = dart.dload(this[_controller], 'selectedRange');
      this[_selectedRanges$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
    }
    [_pickerValueChangedListener](value) {
      if (value == null) dart.nullFailed(I[10], 4015, 43, "value");
      if (value === "selectedDate") {
        if (!dart.test(this.mounted) || dart.test(core$.isSameDate(this[_selectedDate$2], dart.dload(this[_controller], 'selectedDate')))) {
          return;
        }
        date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedDate')});
        this.setState(dart.fn(() => {
          this[_selectedDate$2] = dart.dload(this[_controller], 'selectedDate');
        }, T.VoidTovoid()));
      } else if (value === "selectedDates") {
        if (!dart.test(this.mounted) || dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$2], T.ListN().as(dart.dload(this[_controller], 'selectedDates'))))) {
          return;
        }
        date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedDates')});
        this.setState(dart.fn(() => {
          this[_selectedDates$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
        }, T.VoidTovoid()));
      } else if (value === "selectedRange") {
        if (!dart.test(this.mounted) || dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$2], dart.dload(this[_controller], 'selectedRange')))) {
          return;
        }
        date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedRange')});
        this.setState(dart.fn(() => {
          this[_selectedRange$2] = dart.dload(this[_controller], 'selectedRange');
        }, T.VoidTovoid()));
      } else if (value === "selectedRanges") {
        if (!dart.test(this.mounted) || dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$2], T.ListN().as(dart.dload(this[_controller], 'selectedRanges'))))) {
          return;
        }
        date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedRanges')});
        this.setState(dart.fn(() => {
          this[_selectedRanges$2] = picker_helper.DateRangePickerHelper.cloneList(T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
        }, T.VoidTovoid()));
      } else if (value === "view") {
        if (!dart.test(this.mounted) || this[_view$1] == picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'))) {
          return;
        }
        this.setState(dart.fn(() => {
          this[_view$1] = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
          if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
            this[_initializeScrollView]();
          } else {
            dart.nullCheck(this[_scrollViewKey].currentState)[_position] = 0.0;
            dart.nullCheck(this[_scrollViewKey].currentState)[_children$0][$clear]();
            dart.nullCheck(this[_scrollViewKey].currentState)[_updateVisibleDates]();
          }
        }, T.VoidTovoid()));
      } else if (value === "displayDate") {
        if (!dart.test(core$.isSameOrAfterDate(this.widget.minDate, dart.dload(this[_controller], 'displayDate')))) {
          dart.dput(this[_controller], 'displayDate', this.widget.minDate);
          return;
        }
        if (!dart.test(core$.isSameOrBeforeDate(this.widget.maxDate, dart.dload(this[_controller], 'displayDate')))) {
          dart.dput(this[_controller], 'displayDate', this.widget.maxDate);
          return;
        }
        if (dart.test(core$.isSameDate(this[_currentDate], dart.dload(this[_controller], 'displayDate'))) || dart.test(this[_checkDateWithInVisibleDates](dart.dload(this[_controller], 'displayDate')))) {
          this[_currentDate] = dart.dload(this[_controller], 'displayDate');
          return;
        }
        if (!dart.test(this.mounted)) {
          return;
        }
        this.setState(dart.fn(() => {
          this[_currentDate] = dart.dload(this[_controller], 'displayDate');
          if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
            this[_initializeScrollView]();
          } else {
            this[_updateCurrentVisibleDates]();
          }
        }, T.VoidTovoid()));
      }
    }
    [_checkDateWithInVisibleDates](date) {
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            if (!dart.test(this.widget.isHijri) && picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri) !== 6) {
              return core$.isDateWithInDateRange(this[_currentViewVisibleDates][$_get](0), this[_currentViewVisibleDates][$_get](dart.notNull(this[_currentViewVisibleDates][$length]) - 1), date);
            } else {
              let currentMonth = this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(date_picker._isMultiViewEnabled(this.widget)) ? 4 : 2))[$truncate]());
              return dart.equals(dart.dload(date, 'month'), dart.dload(currentMonth, 'month')) && dart.equals(dart.dload(date, 'year'), dart.dload(currentMonth, 'year'));
            }
          }
        }
        case C[368] || CT.C368:
        {
          {
            let currentYear = core.int.as(dart.dload(this[_currentViewVisibleDates][$_get](0), 'year'));
            let year = core.int.as(dart.dload(date, 'year'));
            return currentYear == year;
          }
        }
        case C[369] || CT.C369:
        {
          {
            let minYear = core.int.as(dart.dload(this[_currentViewVisibleDates][$_get](0), 'year'));
            let maxYear = dart.notNull(core.int.as(dart.dload(this[_currentViewVisibleDates][$_get](10), 'year'))) - 1;
            let year = core.int.as(dart.dload(date, 'year'));
            return dart.notNull(minYear) <= dart.notNull(year) && maxYear >= dart.notNull(year);
          }
        }
        case C[370] || CT.C370:
        {
          {
            let minYear = core.int.as(dart.dload(this[_currentViewVisibleDates][$_get](0), 'year'));
            let maxYear = dart.notNull(core.int.as(dart.dload(this[_currentViewVisibleDates][$_get](10), 'year'))) - 1;
            let year = core.int.as(dart.dload(date, 'year'));
            return dart.notNull(minYear) <= dart.notNull(year) && maxYear >= dart.notNull(year);
          }
        }
      }
    }
    [_updateCurrentVisibleDates]() {
      switch (this[_view$1]) {
        case C[367] || CT.C367:
        {
          {
            this[_currentViewVisibleDates] = core$.getVisibleDates(this[_currentDate], null, core.int.as(dart.dload(this.widget.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(this[_view$1], picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri), this.widget.isHijri));
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            this[_currentViewVisibleDates] = picker_helper.DateRangePickerHelper.getVisibleYearDates(this[_currentDate], this[_view$1], this.widget.isHijri);
          }
        }
      }
    }
    [_updateCurrentDate](oldWidget) {
      let t73;
      if (oldWidget == null) dart.nullFailed(I[10], 4182, 49, "oldWidget");
      if (dart.equals(oldWidget.controller, this.widget.controller) && this.widget.controller != null && dart.equals((t73 = oldWidget.controller, t73 == null ? null : dart.dload(t73, 'view')), date_picker_manager.DateRangePickerView.month) && picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view')) != date_picker_manager.DateRangePickerView.month) {
        return this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(date_picker._isMultiViewEnabled(this.widget)) ? 4 : 2))[$truncate]());
      }
      return this[_currentViewVisibleDates][$_get](0);
    }
    [_initializeScrollView]() {
      this[_forwardDateCollection][$clear]();
      this[_backwardDateCollection][$clear]();
      this[_scrollKey] = new framework.UniqueKey.new();
      this[_pickerKey] = new framework.UniqueKey.new();
    }
    [_isScrollViewDatesValid]() {
      if (dart.test(this[_forwardDateCollection][$isEmpty])) {
        return true;
      }
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      let numberOfWeekInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri);
      let startDates = dart.test(this[_backwardDateCollection][$isNotEmpty]) ? this[_backwardDateCollection][$_get](dart.notNull(this[_backwardDateCollection][$length]) - 1) : this[_forwardDateCollection][$_get](0);
      let endDates = this[_forwardDateCollection][$_get](dart.notNull(this[_forwardDateCollection][$length]) - 1);
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            if (!dart.test(this.widget.isHijri) && numberOfWeekInView !== 6) {
              let visibleStartDate = picker_helper.DateRangePickerHelper.getDateTimeValue(startDates[$_get](dart.notNull(startDates[$length]) - 1));
              let visibleEndDate = picker_helper.DateRangePickerHelper.getDateTimeValue(endDates[$_get](0));
              return dart.test(core$.isDateWithInDateRange(this.widget.minDate, this.widget.maxDate, visibleStartDate)) && dart.test(core$.isDateWithInDateRange(this.widget.minDate, this.widget.maxDate, visibleEndDate));
            } else {
              let visibleStartDate = picker_helper.DateRangePickerHelper.getDateTimeValue(startDates[$_get]((dart.notNull(startDates[$length]) / 2)[$truncate]()));
              let visibleEndDate = picker_helper.DateRangePickerHelper.getDateTimeValue(endDates[$_get]((dart.notNull(endDates[$length]) / 2)[$truncate]()));
              return (dart.notNull(visibleStartDate.year) > dart.notNull(core.num.as(dart.dload(this.widget.minDate, 'year'))) || core.identical(visibleStartDate.year, dart.dload(this.widget.minDate, 'year')) && dart.notNull(visibleStartDate.month) >= dart.notNull(core.num.as(dart.dload(this.widget.minDate, 'month')))) && (dart.notNull(visibleStartDate.year) < dart.notNull(core.num.as(dart.dload(this.widget.maxDate, 'year'))) || core.identical(visibleStartDate.year, dart.dload(this.widget.maxDate, 'year')) && dart.notNull(visibleStartDate.month) <= dart.notNull(core.num.as(dart.dload(this.widget.maxDate, 'month')))) && (dart.notNull(visibleEndDate.year) > dart.notNull(core.num.as(dart.dload(this.widget.minDate, 'year'))) || core.identical(visibleEndDate.year, dart.dload(this.widget.minDate, 'year')) && dart.notNull(visibleEndDate.month) >= dart.notNull(core.num.as(dart.dload(this.widget.minDate, 'month')))) && (dart.notNull(visibleEndDate.year) < dart.notNull(core.num.as(dart.dload(this.widget.maxDate, 'year'))) || core.identical(visibleEndDate.year, dart.dload(this.widget.maxDate, 'year')) && dart.notNull(visibleEndDate.month) <= dart.notNull(core.num.as(dart.dload(this.widget.maxDate, 'month'))));
            }
          }
        }
        case C[368] || CT.C368:
        {
          {
            let visibleStartYear = core.int.as(dart.dload(startDates[$_get](0), 'year'));
            let visibleEndYear = core.int.as(dart.dload(endDates[$_get](0), 'year'));
            return dart.equals(dart.dsend(dart.dload(this.widget.minDate, 'year'), '<=', [visibleStartYear]), true) && dart.equals(dart.dsend(dart.dload(this.widget.maxDate, 'year'), '>=', [visibleStartYear]), true) && dart.equals(dart.dsend(dart.dload(this.widget.minDate, 'year'), '<=', [visibleEndYear]), true) && dart.equals(dart.dsend(dart.dload(this.widget.maxDate, 'year'), '>=', [visibleEndYear]), true);
          }
        }
        case C[369] || CT.C369:
        {
          {
            let visibleStartYear = (dart.notNull(core.int.as(dart.dload(startDates[$_get](0), 'year'))) / 10)[$truncate]() * 10;
            let visibleEndYear = (dart.notNull(core.int.as(dart.dload(endDates[$_get](0), 'year'))) / 10)[$truncate]() * 10;
            let minDateYear = (dart.notNull(core.int.as(dart.dload(this.widget.minDate, 'year'))) / 10)[$truncate]() * 10;
            let maxDateYear = (dart.notNull(core.int.as(dart.dload(this.widget.maxDate, 'year'))) / 10)[$truncate]() * 10;
            return minDateYear <= visibleStartYear && maxDateYear >= visibleStartYear && minDateYear <= visibleEndYear && maxDateYear >= visibleEndYear;
          }
        }
        case C[370] || CT.C370:
        {
          {
            let visibleStartYear = (dart.notNull(core.int.as(dart.dload(startDates[$_get](0), 'year'))) / 100)[$truncate]() * 100;
            let visibleEndYear = (dart.notNull(core.int.as(dart.dload(endDates[$_get](0), 'year'))) / 100)[$truncate]() * 100;
            let minDateYear = (dart.notNull(core.int.as(dart.dload(this.widget.minDate, 'year'))) / 100)[$truncate]() * 100;
            let maxDateYear = (dart.notNull(core.int.as(dart.dload(this.widget.maxDate, 'year'))) / 100)[$truncate]() * 100;
            return minDateYear <= visibleStartYear && maxDateYear >= visibleStartYear && minDateYear <= visibleEndYear && maxDateYear >= visibleEndYear;
          }
        }
      }
    }
    [_handleScrollViewSizeChanged](newHeight, newWidth, oldHeight, oldWidth, actionButtonHeight) {
      let t73, t73$;
      if (newHeight == null) dart.nullFailed(I[10], 4291, 44, "newHeight");
      if (newWidth == null) dart.nullFailed(I[10], 4291, 62, "newWidth");
      if (actionButtonHeight == null) dart.nullFailed(I[10], 4292, 51, "actionButtonHeight");
      if (this.widget.navigationMode != date_picker_manager.DateRangePickerNavigationMode.scroll || this[_pickerScrollController] == null || !dart.test(dart.nullCheck(this[_pickerScrollController]).hasClients)) {
        return;
      }
      if (oldWidth != null && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && oldWidth != newWidth) {
        let index = dart.notNull(dart.nullCheck(this[_pickerScrollController]).position.pixels) / dart.notNull(oldWidth);
        dart.nullCheck(this[_pickerScrollController]).removeListener(dart.bind(this, _handleScrollChanged));
        dart.nullCheck(this[_pickerScrollController]).dispose();
        this[_scrollKey] = new framework.UniqueKey.new();
        this[_pickerKey] = new framework.UniqueKey.new();
        this[_pickerScrollController] = (t73 = new scroll_controller.ScrollController.new({initialScrollOffset: index * dart.notNull(newWidth)}), (() => {
          t73.addListener(dart.bind(this, _handleScrollChanged));
          return t73;
        })());
      } else if (oldHeight != null && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && oldHeight != newHeight) {
        let viewHeaderHeight = this[_view$1] == date_picker_manager.DateRangePickerView.month ? core.double.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')) : 0.0;
        let viewSize = dart.notNull(oldHeight) - dart.notNull(viewHeaderHeight) - dart.notNull(actionButtonHeight);
        let index = dart.notNull(dart.nullCheck(this[_pickerScrollController]).position.pixels) / viewSize;
        dart.nullCheck(this[_pickerScrollController]).removeListener(dart.bind(this, _handleScrollChanged));
        dart.nullCheck(this[_pickerScrollController]).dispose();
        this[_scrollKey] = new framework.UniqueKey.new();
        this[_pickerKey] = new framework.UniqueKey.new();
        this[_pickerScrollController] = (t73$ = new scroll_controller.ScrollController.new({initialScrollOffset: index * (dart.notNull(newHeight) - dart.notNull(viewHeaderHeight) - dart.notNull(actionButtonHeight))}), (() => {
          t73$.addListener(dart.bind(this, _handleScrollChanged));
          return t73$;
        })());
      }
    }
    [_handleScrollChanged]() {
      let scrolledPosition = dart.nullCheck(this[_pickerScrollController]).position.pixels;
      let actionButtonsHeight = dart.test(this.widget.showActionButtons) ? dart.nullCheck(this[_minHeight]) * 0.1 < 50 ? 50.0 : dart.nullCheck(this[_minHeight]) * 0.1 : 0.0;
      let widgetSize = this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? dart.nullCheck(this[_minWidth]) : dart.nullCheck(this[_minHeight]) - dart.notNull(core.num.as(this[_view$1] == date_picker_manager.DateRangePickerView.month ? dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight') : 0)) - actionButtonsHeight;
      if (dart.test(this.widget.enableMultiView)) {
        widgetSize = widgetSize / 2;
      }
      let isViewChanged = false;
      let visibleDates = null;
      if (dart.notNull(scrolledPosition) >= 0) {
        let index = (dart.notNull(scrolledPosition) / widgetSize)[$truncate]();
        if (index >= dart.notNull(this[_forwardDateCollection][$length])) {
          return;
        }
        visibleDates = this[_forwardDateCollection][$_get](index);
        if (dart.test(core$.isSameDate(this[_currentViewVisibleDates][$_get](0), visibleDates[$_get](0)))) {
          return;
        }
        isViewChanged = true;
      } else {
        let index = -(dart.notNull(scrolledPosition) / widgetSize)[$truncate]();
        if (index >= dart.notNull(this[_backwardDateCollection][$length])) {
          return;
        }
        visibleDates = this[_backwardDateCollection][$_get](index);
        if (dart.test(core$.isSameDate(this[_currentViewVisibleDates][$_get](0), visibleDates[$_get](0)))) {
          return;
        }
        isViewChanged = true;
      }
      if (!isViewChanged) {
        return;
      }
      let currentDate = visibleDates[$_get](0);
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri);
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month && (numberOfWeeksInView === 6 || dart.test(this.widget.isHijri))) {
        let date = visibleDates[$_get]((dart.notNull(visibleDates[$length]) / 2)[$truncate]());
        currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), 1, this.widget.isHijri);
      }
      this[_currentDate] = core$.getValidDate(this.widget.minDate, this.widget.maxDate, currentDate);
      dart.dput(this[_controller], 'displayDate', this[_currentDate]);
      this[_currentViewVisibleDates] = visibleDates;
      this[_notifyCurrentVisibleDatesChanged]();
    }
    [_addScrollViewDateCollection](dateCollection, isNextView, startDate, currentView, numberOfWeeksInView, visibleDatesCount) {
      if (dateCollection == null) dart.nullFailed(I[10], 4405, 21, "dateCollection");
      if (isNextView == null) dart.nullFailed(I[10], 4406, 12, "isNextView");
      if (currentView == null) dart.nullFailed(I[10], 4408, 27, "currentView");
      if (numberOfWeeksInView == null) dart.nullFailed(I[10], 4409, 11, "numberOfWeeksInView");
      if (visibleDatesCount == null) dart.nullFailed(I[10], 4410, 11, "visibleDatesCount");
      let count = 0;
      let visibleDate = startDate;
      while (count < 10) {
        switch (currentView) {
          case C[367] || CT.C367:
          {
            {
              let visibleDates = core$.getVisibleDates(visibleDate, null, core.int.as(dart.dload(this.widget.monthViewSettings, 'firstDayOfWeek')), visibleDatesCount);
              if (dart.test(isNextView)) {
                if (!dart.test(this.widget.isHijri) && numberOfWeeksInView !== 6) {
                  let date = visibleDates[$_get](0);
                  if (!dart.test(core$.isSameOrBeforeDate(this.widget.maxDate, date))) {
                    count = 10;
                    break;
                  }
                } else {
                  let date = visibleDates[$_get]((dart.notNull(visibleDates[$length]) / 2)[$truncate]());
                  if (dart.equals(dart.dsend(dart.dload(date, 'month'), '>', [dart.dload(this.widget.maxDate, 'month')]), true) && dart.equals(dart.dload(date, 'year'), dart.dload(this.widget.maxDate, 'year')) || dart.equals(dart.dsend(dart.dload(date, 'year'), '>', [dart.dload(this.widget.maxDate, 'year')]), true)) {
                    count = 10;
                    break;
                  }
                }
              } else {
                if (numberOfWeeksInView !== 6 && !dart.test(this.widget.isHijri)) {
                  let date = visibleDates[$_get](dart.notNull(visibleDates[$length]) - 1);
                  if (!dart.test(core$.isSameOrAfterDate(this.widget.minDate, date))) {
                    count = 10;
                    break;
                  }
                } else {
                  let date = visibleDates[$_get]((dart.notNull(visibleDates[$length]) / 2)[$truncate]());
                  if (dart.equals(dart.dsend(dart.dload(date, 'month'), '<', [dart.dload(this.widget.minDate, 'month')]), true) && dart.equals(dart.dload(date, 'year'), dart.dload(this.widget.minDate, 'year')) || dart.equals(dart.dsend(dart.dload(date, 'year'), '<', [dart.dload(this.widget.minDate, 'year')]), true)) {
                    count = 10;
                    break;
                  }
                }
              }
              dateCollection[$add](visibleDates);
              if (dart.test(isNextView)) {
                visibleDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(currentView, numberOfWeeksInView, visibleDate, false, this.widget.isHijri);
              } else {
                visibleDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(currentView, numberOfWeeksInView, visibleDate, false, this.widget.isHijri);
              }
              count = count + 1;
            }
            break;
          }
          case C[369] || CT.C369:
          case C[368] || CT.C368:
          case C[370] || CT.C370:
          {
            {
              if (dart.test(isNextView)) {
                let currentYear = core.int.as(dart.dload(visibleDate, 'year'));
                let maxYear = core.int.as(dart.dload(this.widget.maxDate, 'year'));
                let offset = picker_helper.DateRangePickerHelper.getOffset(currentView);
                if ((dart.notNull(currentYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset) > (dart.notNull(maxYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset)) {
                  count = 10;
                  break;
                }
              } else {
                let currentYear = core.int.as(dart.dload(visibleDate, 'year'));
                let minYear = core.int.as(dart.dload(this.widget.minDate, 'year'));
                let offset = picker_helper.DateRangePickerHelper.getOffset(currentView);
                if ((dart.notNull(currentYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset) < (dart.notNull(minYear) / dart.notNull(offset))[$truncate]() * dart.notNull(offset)) {
                  count = 10;
                  break;
                }
              }
              let visibleDates = picker_helper.DateRangePickerHelper.getVisibleYearDates(visibleDate, currentView, this.widget.isHijri);
              dateCollection[$add](visibleDates);
              if (dart.test(isNextView)) {
                visibleDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(currentView, numberOfWeeksInView, visibleDate, false, this.widget.isHijri);
              } else {
                visibleDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(currentView, numberOfWeeksInView, visibleDate, false, this.widget.isHijri);
              }
              count = count + 1;
            }
            break;
          }
        }
      }
    }
    [_addScrollView](width, height, actionButtonsHeight) {
      let t73;
      if (width == null) dart.nullFailed(I[10], 4532, 14, "width");
      if (height == null) dart.nullFailed(I[10], 4532, 28, "height");
      if (actionButtonsHeight == null) dart.nullFailed(I[10], 4532, 43, "actionButtonsHeight");
      this[_pickerScrollController] == null ? this[_pickerScrollController] = (t73 = new scroll_controller.ScrollController.new(), (() => {
        t73.addListener(dart.bind(this, _handleScrollChanged));
        return t73;
      })()) : null;
      let currentView = picker_helper.DateRangePickerHelper.getPickerView(this[_view$1]);
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri);
      let visibleDatesCount = picker_helper.DateRangePickerHelper.getViewDatesCount(currentView, numberOfWeeksInView, this.widget.isHijri);
      let isInitialLoading = this[_forwardDateCollection][$isEmpty];
      if (dart.test(isInitialLoading)) {
        this[_addScrollViewDateCollection](this[_forwardDateCollection], true, this[_currentDate], currentView, numberOfWeeksInView, visibleDatesCount);
      }
      if (dart.test(this[_backwardDateCollection][$isEmpty])) {
        let lastViewDates = this[_forwardDateCollection][$_get](0);
        let visibleDate = currentView == date_picker_manager.DateRangePickerView.month && numberOfWeeksInView !== 6 ? lastViewDates != null && dart.test(lastViewDates[$isNotEmpty]) ? lastViewDates[$_get](0) : this[_currentDate] : lastViewDates != null && dart.test(lastViewDates[$isNotEmpty]) ? lastViewDates[$_get]((dart.notNull(lastViewDates[$length]) / 2)[$truncate]()) : this[_currentDate];
        visibleDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(currentView, numberOfWeeksInView, visibleDate, false, this.widget.isHijri);
        this[_addScrollViewDateCollection](this[_backwardDateCollection], false, visibleDate, currentView, numberOfWeeksInView, visibleDatesCount);
      }
      let forwardCollectionLength = this[_forwardDateCollection][$length];
      let minForwardCollectionLength = dart.test(this.widget.enableMultiView) ? 2 : 1;
      while (dart.test(this[_backwardDateCollection][$isNotEmpty]) && dart.notNull(forwardCollectionLength) < minForwardCollectionLength) {
        this[_forwardDateCollection][$insert](0, this[_backwardDateCollection][$_get](0));
        this[_backwardDateCollection][$removeAt](0);
        forwardCollectionLength = dart.notNull(forwardCollectionLength) + 1;
      }
      if (dart.test(isInitialLoading)) {
        this[_currentViewVisibleDates] = this[_forwardDateCollection][$_get](0);
        this[_notifyCurrentVisibleDatesChanged]();
      }
      let isHorizontal = this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal;
      let topPosition = this[_view$1] == date_picker_manager.DateRangePickerView.month && !isHorizontal ? core.double.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')) : 0.0;
      let scrollViewHeight = dart.notNull(height) - dart.notNull(topPosition) - dart.notNull(actionButtonsHeight);
      let scrollViewItemHeight = scrollViewHeight;
      let scrollViewItemWidth = width;
      if (isHorizontal) {
        scrollViewItemWidth = dart.test(this.widget.enableMultiView) ? dart.notNull(scrollViewItemWidth) / 2 : scrollViewItemWidth;
      } else {
        scrollViewItemHeight = dart.test(this.widget.enableMultiView) ? scrollViewItemHeight / 2 : scrollViewItemHeight;
      }
      let scrollView = new scroll_view.CustomScrollView.new({scrollDirection: isHorizontal ? basic_types.Axis.horizontal : basic_types.Axis.vertical, key: this[_scrollKey], physics: C[487] || CT.C487, controller: this[_pickerScrollController], center: this[_pickerKey], slivers: T.JSArrayOfWidget().of([new sliver.SliverFixedExtentList.new({itemExtent: isHorizontal ? scrollViewItemWidth : scrollViewItemHeight, delegate: new sliver.SliverChildBuilderDelegate.new(dart.fn((context, index) => {
              if (context == null) dart.nullFailed(I[10], 4615, 56, "context");
              if (index == null) dart.nullFailed(I[10], 4615, 69, "index");
              if (dart.notNull(this[_backwardDateCollection][$length]) <= dart.notNull(index)) {
                return null;
              }
              return this[_getScrollViewItem](-(dart.notNull(index) + 1), scrollViewItemWidth, scrollViewItemHeight, this[_backwardDateCollection][$_get](index), isHorizontal);
            }, T.BuildContextAndintToWidgetN())), $creationLocationd_0dea112b090073317d4: C[490] || CT.C490}), new sliver.SliverFixedExtentList.new({itemExtent: isHorizontal ? scrollViewItemWidth : scrollViewItemHeight, delegate: new sliver.SliverChildBuilderDelegate.new(dart.fn((context, index) => {
              if (context == null) dart.nullFailed(I[10], 4633, 56, "context");
              if (index == null) dart.nullFailed(I[10], 4633, 69, "index");
              if (dart.notNull(this[_forwardDateCollection][$length]) <= dart.notNull(index)) {
                return null;
              }
              return this[_getScrollViewItem](index, scrollViewItemWidth, scrollViewItemHeight, this[_forwardDateCollection][$_get](index), isHorizontal);
            }, T.BuildContextAndintToWidgetN())), key: this[_pickerKey], $creationLocationd_0dea112b090073317d4: C[494] || CT.C494})]), $creationLocationd_0dea112b090073317d4: C[499] || CT.C499});
      if (isHorizontal) {
        return new basic.Stack.new({children: T.JSArrayOfWidget().of([scrollView, this[_getActionsButton](dart.notNull(topPosition) + scrollViewHeight, actionButtonsHeight)]), $creationLocationd_0dea112b090073317d4: C[507] || CT.C507});
      } else {
        this[_viewHeaderVisibleDates].value = this[_currentViewVisibleDates];
        return new basic.Stack.new({children: T.JSArrayOfWidget().of([this[_getViewHeaderView](0.0), new basic.Positioned.new({left: 0.0, top: topPosition, right: 0.0, height: scrollViewHeight, child: scrollView, $creationLocationd_0dea112b090073317d4: C[510] || CT.C510}), this[_getActionsButton](dart.notNull(topPosition) + scrollViewHeight, actionButtonsHeight)]), $creationLocationd_0dea112b090073317d4: C[517] || CT.C517});
      }
    }
    [_getScrollViewItem](index, width, height, dates, isHorizontal) {
      let t73, t73$, t73$0;
      if (index == null) dart.nullFailed(I[10], 4674, 11, "index");
      if (width == null) dart.nullFailed(I[10], 4675, 14, "width");
      if (height == null) dart.nullFailed(I[10], 4676, 14, "height");
      if (dates == null) dart.nullFailed(I[10], 4678, 12, "dates");
      if (isHorizontal == null) dart.nullFailed(I[10], 4679, 12, "isHorizontal");
      let currentView = picker_helper.DateRangePickerHelper.getPickerView(this[_view$1]);
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri);
      let visibleDatesCount = picker_helper.DateRangePickerHelper.getViewDatesCount(currentView, numberOfWeeksInView, this.widget.isHijri);
      if (dart.notNull(index) >= 0) {
        if (dart.test(this[_forwardDateCollection][$isNotEmpty]) && dart.notNull(index) > dart.notNull(this[_forwardDateCollection][$length]) - 2) {
          let lastViewDates = this[_forwardDateCollection][$_get](dart.notNull(this[_forwardDateCollection][$length]) - 1);
          let date = currentView == date_picker_manager.DateRangePickerView.month && picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri) !== 6 ? lastViewDates[$_get](0) : lastViewDates[$_get]((dart.notNull(lastViewDates[$length]) / 2)[$truncate]());
          date = picker_helper.DateRangePickerHelper.getNextViewStartDate(currentView, numberOfWeeksInView, date, false, this.widget.isHijri);
          this[_addScrollViewDateCollection](this[_forwardDateCollection], true, date, currentView, numberOfWeeksInView, visibleDatesCount);
        }
      } else {
        if (dart.test(this[_backwardDateCollection][$isNotEmpty]) && -dart.notNull(index) > dart.notNull(this[_backwardDateCollection][$length]) - 2) {
          let lastViewDates = this[_backwardDateCollection][$_get](dart.notNull(this[_backwardDateCollection][$length]) - 1);
          let date = currentView == date_picker_manager.DateRangePickerView.month && picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri) !== 6 ? lastViewDates[$_get](0) : lastViewDates[$_get]((dart.notNull(lastViewDates[$length]) / 2)[$truncate]());
          date = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(currentView, numberOfWeeksInView, date, false, this.widget.isHijri);
          this[_addScrollViewDateCollection](this[_backwardDateCollection], false, date, currentView, numberOfWeeksInView, visibleDatesCount);
        }
      }
      let pickerHeight = dart.notNull(height) - dart.notNull(this.widget.headerHeight);
      let pickerWidth = dart.notNull(width) - (dart.test(isHorizontal) ? 1 : 0);
      let headerWidth = pickerWidth;
      if (dart.test(isHorizontal)) {
        let headerText = date_picker._getHeaderText(dates, this[_view$1], 0, this.widget.isHijri, numberOfWeeksInView, this.widget.monthFormat, false, this.widget.headerStyle, this.widget.navigationDirection, this[_locale], this[_localizations]);
        headerWidth = date_picker._getTextWidgetWidth(headerText, this.widget.headerHeight, pickerWidth, this.context, {style: (t73 = this.widget.headerStyle.textStyle, t73 == null ? this[_datePickerTheme].headerTextStyle : t73), widthPadding: 20.0}).width;
      }
      if (dart.notNull(headerWidth) > pickerWidth) {
        headerWidth = pickerWidth;
      }
      let backgroundColor = (t73$ = this.widget.headerStyle.backgroundColor, t73$ == null ? this[_datePickerTheme].headerBackgroundColor : t73$);
      if (!dart.test(isHorizontal) && dart.equals(backgroundColor, colors$.Colors.transparent)) {
        backgroundColor = this[_datePickerTheme].brightness == ui.Brightness.dark ? dart.nullCheck(colors$.Colors.grey._get(850)) : colors$.Colors.white;
      }
      let header = new basic.Positioned.new({top: 0.0, left: 0.0, width: headerWidth, height: this.widget.headerHeight, child: new gesture_detector.GestureDetector.new({child: new container.Container.new({color: backgroundColor, child: new date_picker._PickerHeaderView.new(new (T.ValueNotifierOfList()).new(dates), this.widget.headerStyle, this.widget.selectionMode, this[_view$1], picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri), this.widget.showNavigationArrow, this.widget.navigationDirection, core.bool.as(dart.dload(this.widget.monthViewSettings, 'enableSwipeSelection')), this.widget.navigationMode, this.widget.minDate, this.widget.maxDate, this.widget.monthFormat, this[_datePickerTheme], this[_locale], headerWidth, this.widget.headerHeight, this.widget.allowViewNavigation, T.VoidToNvoid().as(dart.dload(this[_controller], 'backward')), T.VoidToNvoid().as(dart.dload(this[_controller], 'forward')), date_picker._isMultiViewEnabled(this.widget), this.widget.viewSpacing, (t73$0 = this.widget.selectionColor, t73$0 == null ? dart.nullCheck(this[_datePickerTheme].selectionColor) : t73$0), this[_isRtl], this[_textScaleFactor], this.widget.isHijri, this[_localizations], {$creationLocationd_0dea112b090073317d4: C[520] || CT.C520}), height: this.widget.headerHeight, $creationLocationd_0dea112b090073317d4: C[548] || CT.C548}), onTapUp: dart.fn(details => {
            if (details == null) dart.nullFailed(I[10], 4796, 32, "details");
            if (this[_view$1] == date_picker_manager.DateRangePickerView.century || !dart.test(this.widget.allowViewNavigation)) {
              return;
            }
            let currentDate = dates[$_get](0);
            let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri);
            if (this[_view$1] == date_picker_manager.DateRangePickerView.month && (numberOfWeeksInView === 6 || dart.test(this.widget.isHijri))) {
              let date = dates[$_get]((dart.notNull(dates[$length]) / 2)[$truncate]());
              currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), 1, this.widget.isHijri);
            }
            currentDate = core$.getValidDate(this.widget.minDate, this.widget.maxDate, currentDate);
            if (this[_view$1] == date_picker_manager.DateRangePickerView.month && !dart.equals(dart.dload(this[_currentDate], 'year'), dart.dload(currentDate, 'year')) || this[_view$1] == date_picker_manager.DateRangePickerView.year && !dart.equals(dart.dsend(dart.dload(this[_currentDate], 'year'), '~/', [10]), dart.dsend(dart.dload(currentDate, 'year'), '~/', [10])) || this[_view$1] == date_picker_manager.DateRangePickerView.decade && !dart.equals(dart.dsend(dart.dload(this[_currentDate], 'year'), '~/', [100]), dart.dsend(dart.dload(currentDate, 'year'), '~/', [100]))) {
              this[_currentDate] = currentDate;
              dart.dput(this[_controller], 'displayDate', this[_currentDate]);
            }
            this[_updateCalendarTapCallbackForHeader]();
          }, T.TapUpDetailsTovoid()), $creationLocationd_0dea112b090073317d4: C[553] || CT.C553}), $creationLocationd_0dea112b090073317d4: C[557] || CT.C557});
      let pickerView = new basic.Positioned.new({top: this.widget.headerHeight, left: 0.0, width: pickerWidth, height: pickerHeight, child: new date_picker._PickerView.new(this.widget, this[_controller], dates, date_picker._isMultiViewEnabled(this.widget), pickerWidth, pickerHeight, this[_datePickerTheme], null, this[_textScaleFactor], {getPickerStateDetails: dart.bind(this, _getPickerStateValues), updatePickerStateDetails: dart.bind(this, _updatePickerStateValues), isRtl: this[_isRtl], $creationLocationd_0dea112b090073317d4: C[564] || CT.C564}), $creationLocationd_0dea112b090073317d4: C[578] || CT.C578});
      let children = T.JSArrayOfWidget().of([pickerView]);
      if (dart.test(isHorizontal)) {
        children[$add](new basic.Positioned.new({top: 0.0, left: pickerWidth, width: 1.0, height: height, child: C[585] || CT.C585, $creationLocationd_0dea112b090073317d4: C[589] || CT.C589}));
      }
      children[$add](header);
      return new container.Container.new({width: width, height: height, child: new date_picker._StickyHeader.new({isHorizontal: isHorizontal, isRTL: this[_isRtl], children: children, $creationLocationd_0dea112b090073317d4: C[596] || CT.C596}), $creationLocationd_0dea112b090073317d4: C[601] || CT.C601});
    }
    [_addChildren](top, height, width, actionButtonsHeight) {
      let t73, t73$;
      if (top == null) dart.nullFailed(I[10], 4883, 14, "top");
      if (height == null) dart.nullFailed(I[10], 4883, 26, "height");
      if (width == null) dart.nullFailed(I[10], 4883, 41, "width");
      if (actionButtonsHeight == null) dart.nullFailed(I[10], 4883, 55, "actionButtonsHeight");
      this[_headerVisibleDates].value = this[_currentViewVisibleDates];
      height = dart.notNull(height) - dart.notNull(actionButtonsHeight);
      return new basic.Stack.new({children: T.JSArrayOfWidget().of([new basic.Positioned.new({top: 0.0, right: 0.0, left: 0.0, height: this.widget.headerHeight, child: new gesture_detector.GestureDetector.new({child: new container.Container.new({color: (t73 = this.widget.headerStyle.backgroundColor, t73 == null ? this[_datePickerTheme].headerBackgroundColor : t73), child: new date_picker._PickerHeaderView.new(this[_headerVisibleDates], this.widget.headerStyle, this.widget.selectionMode, this[_view$1], picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri), this.widget.showNavigationArrow, this.widget.navigationDirection, core.bool.as(dart.dload(this.widget.monthViewSettings, 'enableSwipeSelection')), this.widget.navigationMode, this.widget.minDate, this.widget.maxDate, this.widget.monthFormat, this[_datePickerTheme], this[_locale], width, this.widget.headerHeight, this.widget.allowViewNavigation, T.VoidToNvoid().as(dart.dload(this[_controller], 'backward')), T.VoidToNvoid().as(dart.dload(this[_controller], 'forward')), date_picker._isMultiViewEnabled(this.widget), this.widget.viewSpacing, (t73$ = this.widget.selectionColor, t73$ == null ? dart.nullCheck(this[_datePickerTheme].selectionColor) : t73$), this[_isRtl], this[_textScaleFactor], this.widget.isHijri, this[_localizations], {$creationLocationd_0dea112b090073317d4: C[606] || CT.C606}), height: this.widget.headerHeight, $creationLocationd_0dea112b090073317d4: C[634] || CT.C634}), onTapUp: dart.fn(details => {
                if (details == null) dart.nullFailed(I[10], 4926, 34, "details");
                this[_updateCalendarTapCallbackForHeader]();
              }, T.TapUpDetailsTovoid()), $creationLocationd_0dea112b090073317d4: C[639] || CT.C639}), $creationLocationd_0dea112b090073317d4: C[643] || CT.C643}), this[_getViewHeaderView](this.widget.headerHeight), new basic.Positioned.new({top: top, left: 0.0, right: 0.0, height: height, child: new date_picker._PickerScrollView.new(this.widget, this[_controller], width, height, this[_isRtl], this[_datePickerTheme], this[_locale], this[_textScaleFactor], {getPickerStateValues: dart.fn(details => {
                if (details == null) dart.nullFailed(I[10], 4946, 50, "details");
                this[_getPickerStateValues](details);
              }, T.PickerStateArgsTovoid()), updatePickerStateValues: dart.fn(details => {
                if (details == null) dart.nullFailed(I[10], 4949, 53, "details");
                this[_updatePickerStateValues](details);
              }, T.PickerStateArgsTovoid()), key: this[_scrollViewKey], $creationLocationd_0dea112b090073317d4: C[650] || CT.C650}), $creationLocationd_0dea112b090073317d4: C[663] || CT.C663}), this[_getActionsButton](dart.notNull(top) + dart.notNull(height), actionButtonsHeight)]), $creationLocationd_0dea112b090073317d4: C[670] || CT.C670});
    }
    [_getActionsButton](top, actionButtonsHeight) {
      let t73, t73$;
      if (top == null) dart.nullFailed(I[10], 4959, 35, "top");
      if (actionButtonsHeight == null) dart.nullFailed(I[10], 4959, 47, "actionButtonsHeight");
      if (!dart.test(this.widget.showActionButtons)) {
        return new container.Container.new({width: 0.0, height: 0.0, $creationLocationd_0dea112b090073317d4: C[673] || CT.C673});
      }
      let textColor = (t73 = this.widget.todayHighlightColor, t73 == null ? dart.nullCheck(this[_datePickerTheme].todayHighlightColor) : t73);
      if (dart.equals(textColor, colors$.Colors.transparent)) {
        let style = (t73$ = T.TextStyleN().as(dart.dload(this.widget.monthCellStyle, 'todayTextStyle')), t73$ == null ? this[_datePickerTheme].todayTextStyle : t73$);
        textColor = style.color != null ? dart.nullCheck(style.color) : colors$.Colors.blue;
      }
      return new basic.Positioned.new({top: top, left: 0.0, right: 0.0, height: actionButtonsHeight, child: new container.Container.new({alignment: alignment.AlignmentDirectional.centerEnd, constraints: C[677] || CT.C677, padding: C[678] || CT.C678, child: new overflow_bar.OverflowBar.new({spacing: 8.0, children: T.JSArrayOfWidget().of([new text_button.TextButton.new({child: new text$.Text.new(this.widget.cancelText, {style: new text_style.TextStyle.new({color: textColor}), $creationLocationd_0dea112b090073317d4: C[679] || CT.C679}), onPressed: dart.bind(this, _handleCancel), $creationLocationd_0dea112b090073317d4: C[683] || CT.C683}), new text_button.TextButton.new({child: new text$.Text.new(this.widget.confirmText, {style: new text_style.TextStyle.new({color: textColor}), $creationLocationd_0dea112b090073317d4: C[687] || CT.C687}), onPressed: dart.bind(this, _handleOk), $creationLocationd_0dea112b090073317d4: C[691] || CT.C691})]), $creationLocationd_0dea112b090073317d4: C[695] || CT.C695}), $creationLocationd_0dea112b090073317d4: C[699] || CT.C699}), $creationLocationd_0dea112b090073317d4: C[705] || CT.C705});
    }
    [_handleCancel]() {
      let t73;
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            this[_selectedDate$2] = this[_previousSelectedValue].selectedDate;
            if (!dart.test(core$.isSameDate(dart.dload(this[_controller], 'selectedDate'), this[_selectedDate$2]))) {
              this.setState(dart.fn(() => {
                dart.dput(this[_controller], 'selectedDate', this[_selectedDate$2]);
              }, T.VoidTovoid()));
            }
          }
          break;
        }
        case C[67] || CT.C67:
        {
          {
            this[_selectedDates$2] = this[_previousSelectedValue].selectedDates != null ? this[_getSelectedDates](this[_previousSelectedValue].selectedDates) : null;
            if (!dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$2], T.ListN().as(dart.dload(this[_controller], 'selectedDates'))))) {
              this.setState(dart.fn(() => {
                dart.dput(this[_controller], 'selectedDates', this[_previousSelectedValue].selectedDates != null ? this[_getSelectedDates](this[_previousSelectedValue].selectedDates) : null);
              }, T.VoidTovoid()));
            }
          }
          break;
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            this[_selectedRange$2] = this[_previousSelectedValue].selectedRange;
            if (!dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$2], dart.dload(this[_controller], 'selectedRange')))) {
              this.setState(dart.fn(() => {
                dart.dput(this[_controller], 'selectedRange', this[_selectedRange$2]);
              }, T.VoidTovoid()));
            }
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            this[_selectedRanges$2] = this[_previousSelectedValue].selectedRanges != null ? this[_getSelectedRanges](this[_previousSelectedValue].selectedRanges) : null;
            if (!dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$2], T.ListN().as(dart.dload(this[_controller], 'selectedRanges'))))) {
              this.setState(dart.fn(() => {
                dart.dput(this[_controller], 'selectedRanges', this[_previousSelectedValue].selectedRanges != null ? this[_getSelectedRanges](this[_previousSelectedValue].selectedRanges) : null);
              }, T.VoidTovoid()));
            }
          }
        }
      }
      t73 = this.widget.onCancel;
      t73 == null ? null : t73();
    }
    [_handleOk]() {
      let t73;
      let value = null;
      switch (this.widget.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            value = this[_selectedDate$2];
            this[_previousSelectedValue].selectedDate = this[_selectedDate$2];
          }
          break;
        }
        case C[67] || CT.C67:
        {
          {
            value = this[_getSelectedDates](this[_selectedDates$2]);
            this[_previousSelectedValue].selectedDates = this[_getSelectedDates](this[_selectedDates$2]);
          }
          break;
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            value = this[_selectedRange$2];
            this[_previousSelectedValue].selectedRange = this[_selectedRange$2];
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            value = this[_getSelectedRanges](this[_selectedRanges$2]);
            this[_previousSelectedValue].selectedRanges = this[_getSelectedRanges](this[_selectedRanges$2]);
          }
        }
      }
      t73 = this.widget.onSubmit;
      t73 == null ? null : t73(core.Object.as(value));
    }
    [_getViewHeaderView](topPosition) {
      let t73;
      if (topPosition == null) dart.nullFailed(I[10], 5100, 36, "topPosition");
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        let todayTextColor = dart.dload(this.widget.monthCellStyle, 'todayTextStyle') != null && dart.dload(dart.nullCheck(dart.dload(this.widget.monthCellStyle, 'todayTextStyle')), 'color') != null ? ui.Color.as(dart.nullCheck(dart.dload(dart.nullCheck(dart.dload(this.widget.monthCellStyle, 'todayTextStyle')), 'color'))) : this.widget.todayHighlightColor != null && !dart.nullCheck(this.widget.todayHighlightColor)._equals(colors$.Colors.transparent) ? dart.nullCheck(this.widget.todayHighlightColor) : dart.nullCheck(this[_datePickerTheme].todayHighlightColor);
        return new basic.Positioned.new({left: 0.0, top: topPosition, right: 0.0, height: T.doubleN().as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')), child: new container.Container.new({color: T.ColorN().as((t73 = dart.dload(dart.dload(this.widget.monthViewSettings, 'viewHeaderStyle'), 'backgroundColor'), t73 == null ? this[_datePickerTheme].viewHeaderBackgroundColor : t73)), child: new basic.RepaintBoundary.new({child: new basic.CustomPaint.new({painter: new date_picker._PickerViewHeaderPainter.new(this[_currentViewVisibleDates], this.widget.navigationMode, date_picker_manager.DateRangePickerViewHeaderStyle.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderStyle')), core.double.as(dart.dload(this.widget.monthViewSettings, 'viewHeaderHeight')), this.widget.monthViewSettings, this[_datePickerTheme], this[_locale], this[_isRtl], this.widget.monthCellStyle, date_picker._isMultiViewEnabled(this.widget), this.widget.viewSpacing, todayTextColor, this[_textScaleFactor], this.widget.isHijri, this.widget.navigationDirection, this[_viewHeaderVisibleDates], core.bool.as(dart.dload(this.widget.monthViewSettings, 'showWeekNumber')), this[_isMobilePlatform]), $creationLocationd_0dea112b090073317d4: C[712] || CT.C712}), $creationLocationd_0dea112b090073317d4: C[715] || CT.C715}), $creationLocationd_0dea112b090073317d4: C[718] || CT.C718}), $creationLocationd_0dea112b090073317d4: C[722] || CT.C722});
      }
      return new basic.Positioned.new({left: 0.0, top: 0.0, right: 0.0, height: 0.0, child: new container.Container.new({$creationLocationd_0dea112b090073317d4: C[729] || CT.C729}), $creationLocationd_0dea112b090073317d4: C[731] || CT.C731});
    }
    [_moveToNextView]() {
      if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
        return;
      }
      if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToNextView(this[_view$1], picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri), this.widget.maxDate, this[_currentViewVisibleDates], date_picker._isMultiViewEnabled(this.widget), this.widget.isHijri))) {
        return;
      }
      dart.test(this[_isRtl]) ? dart.nullCheck(this[_scrollViewKey].currentState)[_moveToPreviousViewWithAnimation]() : dart.nullCheck(this[_scrollViewKey].currentState)[_moveToNextViewWithAnimation]();
    }
    [_moveToPreviousView]() {
      if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll) {
        return;
      }
      if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousView(this[_view$1], picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri), this.widget.minDate, this[_currentViewVisibleDates], date_picker._isMultiViewEnabled(this.widget), this.widget.isHijri))) {
        return;
      }
      dart.test(this[_isRtl]) ? dart.nullCheck(this[_scrollViewKey].currentState)[_moveToNextViewWithAnimation]() : dart.nullCheck(this[_scrollViewKey].currentState)[_moveToPreviousViewWithAnimation]();
    }
    [_getPickerStateValues](details) {
      if (details == null) dart.nullFailed(I[10], 5190, 46, "details");
      details.currentDate = this[_currentDate];
      details.selectedDate = this[_selectedDate$2];
      details.selectedDates = this[_selectedDates$2];
      details.selectedRange = this[_selectedRange$2];
      details.selectedRanges = this[_selectedRanges$2];
      details.currentViewVisibleDates = this[_currentViewVisibleDates];
      details.view = picker_helper.DateRangePickerHelper.getPickerView(this[_view$1]);
    }
    [_updatePickerStateValues](details) {
      if (details == null) dart.nullFailed(I[10], 5200, 49, "details");
      if (details.currentDate != null) {
        if (!dart.test(core$.isSameOrAfterDate(this.widget.minDate, details.currentDate))) {
          details.currentDate = this.widget.minDate;
        }
        if (!dart.test(core$.isSameOrBeforeDate(this.widget.maxDate, details.currentDate))) {
          details.currentDate = this.widget.maxDate;
        }
        this[_currentDate] = details.currentDate;
        dart.dput(this[_controller], 'displayDate', this[_currentDate]);
      }
      if (!dart.equals(this[_currentViewVisibleDates], details.currentViewVisibleDates)) {
        this[_currentViewVisibleDates] = details.currentViewVisibleDates;
        this[_headerVisibleDates].value = this[_currentViewVisibleDates];
        this[_notifyCurrentVisibleDatesChanged]();
      }
      if (this[_view$1] != details.view) {
        dart.dput(this[_controller], 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(details.view) : picker_helper.DateRangePickerHelper.getPickerView(details.view));
        if (this[_view$1] == date_picker_manager.DateRangePickerView.month && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
          this[_viewHeaderVisibleDates].value = this[_currentViewVisibleDates];
        }
      }
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        let today = picker_helper.DateRangePickerHelper.getToday(this.widget.isHijri);
        let previousMonthDate = core$.getPreviousMonthDate(today);
        let nextMonthDate = core$.getNextMonthDate(today);
        if (dart.equals(dart.dload(this[_currentDate], 'month'), dart.dload(today, 'month')) && dart.equals(dart.dload(this[_currentDate], 'year'), dart.dload(today, 'year')) || dart.equals(dart.dload(this[_currentDate], 'month'), dart.dload(previousMonthDate, 'month')) && dart.equals(dart.dload(this[_currentDate], 'year'), dart.dload(previousMonthDate, 'year')) || dart.equals(dart.dload(this[_currentDate], 'month'), dart.dload(nextMonthDate, 'month')) && dart.equals(dart.dload(this[_currentDate], 'year'), dart.dload(nextMonthDate, 'year')) || this[_viewHeaderVisibleDates].value[$length] != this[_currentViewVisibleDates][$length]) {
          this[_viewHeaderVisibleDates].value = this[_currentViewVisibleDates];
        }
      }
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month || !dart.test(this.widget.allowViewNavigation)) {
        switch (this.widget.selectionMode) {
          case C[33] || CT.C33:
          {
            {
              this[_selectedDate$2] = details.selectedDate;
              let isSameSelectedDate = core$.isSameDate(dart.dload(this[_controller], 'selectedDate'), this[_selectedDate$2]);
              if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.test(isSameSelectedDate)) {
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
              }
              dart.dput(this[_controller], 'selectedDate', this[_selectedDate$2]);
              if (!dart.test(isSameSelectedDate)) {
                date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedDate')});
              }
            }
            break;
          }
          case C[67] || CT.C67:
          {
            {
              this[_selectedDates$2] = details.selectedDates;
              let isSameSelectedDate = picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_selectedDates$2], T.ListN().as(dart.dload(this[_controller], 'selectedDates')));
              if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.test(isSameSelectedDate)) {
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
              }
              dart.dput(this[_controller], 'selectedDates', this[_getSelectedDates](this[_selectedDates$2]));
              if (!dart.test(isSameSelectedDate)) date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedDates')});
            }
            break;
          }
          case C[101] || CT.C101:
          case C[135] || CT.C135:
          {
            {
              this[_selectedRange$2] = details.selectedRange;
              let isSameSelectedDate = picker_helper.DateRangePickerHelper.isRangeEquals(this[_selectedRange$2], dart.dload(this[_controller], 'selectedRange'));
              if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.test(isSameSelectedDate)) {
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
              }
              dart.dput(this[_controller], 'selectedRange', this[_selectedRange$2]);
              if (!dart.test(isSameSelectedDate)) date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedRange')});
            }
            break;
          }
          case C[169] || CT.C169:
          {
            {
              this[_selectedRanges$2] = details.selectedRanges;
              let isSameSelectedDate = picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_selectedRanges$2], T.ListN().as(dart.dload(this[_controller], 'selectedRanges')));
              if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && !dart.test(isSameSelectedDate)) {
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
              }
              dart.dput(this[_controller], 'selectedRanges', this[_getSelectedRanges](this[_selectedRanges$2]));
              if (!dart.test(isSameSelectedDate)) date_picker._raiseSelectionChangedCallback(this.widget, {value: dart.dload(this[_controller], 'selectedRanges')});
            }
          }
        }
      }
    }
    [_notifyCurrentVisibleDatesChanged]() {
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view'));
      let visibleDateRange = null;
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            let enableMultiView = date_picker._isMultiViewEnabled(this.widget);
            if (dart.test(this.widget.isHijri) || !dart.test(picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.monthViewSettings, this.widget.isHijri)) && picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.monthViewSettings, this.widget.isHijri) === 6) {
              let visibleDate = this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(enableMultiView) ? 4 : 2))[$truncate]());
              if (dart.test(this.widget.isHijri)) {
                visibleDateRange = new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(picker_helper.DateRangePickerHelper.getMonthStartDate(visibleDate, this.widget.isHijri)), T.HijriDateTimeN().as(dart.test(enableMultiView) ? picker_helper.DateRangePickerHelper.getMonthEndDate(picker_helper.DateRangePickerHelper.getNextViewStartDate(picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view')), 6, visibleDate, this[_isRtl], this.widget.isHijri)) : picker_helper.DateRangePickerHelper.getMonthEndDate(visibleDate)));
              } else {
                visibleDateRange = new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(picker_helper.DateRangePickerHelper.getMonthStartDate(visibleDate, this.widget.isHijri)), T.DateTimeN().as(dart.test(enableMultiView) ? picker_helper.DateRangePickerHelper.getMonthEndDate(picker_helper.DateRangePickerHelper.getNextViewStartDate(picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this[_controller], 'view')), 6, visibleDate, this[_isRtl], this.widget.isHijri)) : picker_helper.DateRangePickerHelper.getMonthEndDate(visibleDate)));
              }
              date_picker._raisePickerViewChangedCallback(this.widget, {visibleDateRange: visibleDateRange, view: dart.dload(this[_controller], 'view')});
            } else {
              if (dart.test(this.widget.isHijri)) {
                visibleDateRange = new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(this[_currentViewVisibleDates][$_get](0)), T.HijriDateTimeN().as(this[_currentViewVisibleDates][$_get](dart.notNull(this[_currentViewVisibleDates][$length]) - 1)));
              } else {
                visibleDateRange = new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(this[_currentViewVisibleDates][$_get](0)), T.DateTimeN().as(this[_currentViewVisibleDates][$_get](dart.notNull(this[_currentViewVisibleDates][$length]) - 1)));
              }
              date_picker._raisePickerViewChangedCallback(this.widget, {visibleDateRange: visibleDateRange, view: dart.dload(this[_controller], 'view')});
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            if (dart.test(this.widget.isHijri)) {
              visibleDateRange = new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(this[_currentViewVisibleDates][$_get](0)), T.HijriDateTimeN().as(this[_currentViewVisibleDates][$_get](dart.notNull(this[_currentViewVisibleDates][$length]) - 1)));
            } else {
              visibleDateRange = new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(this[_currentViewVisibleDates][$_get](0)), T.DateTimeN().as(this[_currentViewVisibleDates][$_get](dart.notNull(this[_currentViewVisibleDates][$length]) - 1)));
            }
            date_picker._raisePickerViewChangedCallback(this.widget, {visibleDateRange: visibleDateRange, view: dart.dload(this[_controller], 'view')});
          }
        }
      }
    }
    [_getSelectedRanges](ranges) {
      if (ranges == null) {
        return ranges;
      }
      let selectedRanges = null;
      if (dart.test(this.widget.isHijri)) {
        selectedRanges = T.JSArrayOfHijriDateRange().of([]);
      } else {
        selectedRanges = T.JSArrayOfPickerDateRange().of([]);
      }
      for (let i = 0; i < dart.notNull(ranges[$length]); i = i + 1) {
        selectedRanges[$add](ranges[$_get](i));
      }
      return selectedRanges;
    }
    [_getSelectedDates](dates) {
      if (dates == null) {
        return dates;
      }
      let selectedDates = null;
      if (dart.test(this.widget.isHijri)) {
        selectedDates = T.JSArrayOfHijriDateTime().of([]);
      } else {
        selectedDates = T.JSArrayOfDateTime().of([]);
      }
      for (let i = 0; i < dart.notNull(dates[$length]); i = i + 1) {
        selectedDates[$add](dates[$_get](i));
      }
      return selectedDates;
    }
    [_updateCalendarTapCallbackForHeader]() {
      if (this[_view$1] == date_picker_manager.DateRangePickerView.century || !dart.test(this.widget.allowViewNavigation)) {
        return;
      }
      if (this[_view$1] == date_picker_manager.DateRangePickerView.month) {
        dart.dput(this[_controller], 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(date_picker_manager.DateRangePickerView.year) : picker_helper.DateRangePickerHelper.getPickerView(date_picker_manager.DateRangePickerView.year));
      } else {
        if (this[_view$1] == date_picker_manager.DateRangePickerView.year) {
          dart.dput(this[_controller], 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(date_picker_manager.DateRangePickerView.decade) : picker_helper.DateRangePickerHelper.getPickerView(date_picker_manager.DateRangePickerView.decade));
        } else if (this[_view$1] == date_picker_manager.DateRangePickerView.decade) {
          dart.dput(this[_controller], 'view', dart.test(this.widget.isHijri) ? picker_helper.DateRangePickerHelper.getHijriPickerView(date_picker_manager.DateRangePickerView.century) : picker_helper.DateRangePickerHelper.getPickerView(date_picker_manager.DateRangePickerView.century));
        }
      }
    }
  };
  (date_picker._SfDateRangePickerState.new = function() {
    this[___SfDateRangePickerState__currentViewVisibleDates] = null;
    this[_currentDate] = null;
    this[_selectedDate$2] = null;
    this[_minWidth] = null;
    this[_minHeight] = null;
    this[___SfDateRangePickerState__textScaleFactor] = null;
    this[___SfDateRangePickerState__headerVisibleDates] = null;
    this[___SfDateRangePickerState__viewHeaderVisibleDates] = null;
    this[_selectedDates$2] = null;
    this[_selectedRange$2] = null;
    this[_selectedRanges$2] = null;
    this[_scrollViewKey] = T.GlobalKeyOf_PickerScrollViewState().new();
    this[___SfDateRangePickerState__view] = null;
    this[___SfDateRangePickerState__isRtl] = null;
    this[___SfDateRangePickerState__controller] = null;
    this[___SfDateRangePickerState__controller_isSet] = false;
    this[___SfDateRangePickerState__locale] = null;
    this[___SfDateRangePickerState__localizations] = null;
    this[___SfDateRangePickerState__datePickerTheme] = null;
    this[_forwardDateCollection] = T.JSArrayOfList().of([]);
    this[_backwardDateCollection] = T.JSArrayOfList().of([]);
    this[_scrollKey] = new framework.UniqueKey.new();
    this[_pickerKey] = new framework.UniqueKey.new();
    this[_pickerScrollController] = null;
    this[___SfDateRangePickerState__minPickerWidth] = null;
    this[___SfDateRangePickerState__minPickerHeight] = null;
    this[___SfDateRangePickerState__previousSelectedValue] = null;
    this[___SfDateRangePickerState__isMobilePlatform] = null;
    date_picker._SfDateRangePickerState.__proto__.new.call(this);
    ;
  }).prototype = date_picker._SfDateRangePickerState.prototype;
  dart.addTypeTests(date_picker._SfDateRangePickerState);
  dart.addTypeCaches(date_picker._SfDateRangePickerState);
  dart.setMethodSignature(date_picker._SfDateRangePickerState, () => ({
    __proto__: dart.getMethods(date_picker._SfDateRangePickerState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_initNavigation]: dart.fnType(dart.void, []),
    [_initPickerController]: dart.fnType(dart.void, []),
    [_updateSelectionValues]: dart.fnType(dart.void, []),
    [_pickerValueChangedListener]: dart.fnType(dart.void, [core.String]),
    [_checkDateWithInVisibleDates]: dart.fnType(core.bool, [dart.dynamic]),
    [_updateCurrentVisibleDates]: dart.fnType(dart.void, []),
    [_updateCurrentDate]: dart.fnType(dart.dynamic, [date_picker._SfDateRangePicker]),
    [_initializeScrollView]: dart.fnType(dart.void, []),
    [_isScrollViewDatesValid]: dart.fnType(core.bool, []),
    [_handleScrollViewSizeChanged]: dart.fnType(dart.void, [core.double, core.double, dart.nullable(core.double), dart.nullable(core.double), core.double]),
    [_handleScrollChanged]: dart.fnType(dart.void, []),
    [_addScrollViewDateCollection]: dart.fnType(dart.void, [core.List, core.bool, dart.dynamic, date_picker_manager.DateRangePickerView, core.int, core.int]),
    [_addScrollView]: dart.fnType(framework.Widget, [core.double, core.double, core.double]),
    [_getScrollViewItem]: dart.fnType(framework.Widget, [core.int, core.double, core.double, core.List, core.bool]),
    [_addChildren]: dart.fnType(framework.Widget, [core.double, core.double, core.double, core.double]),
    [_getActionsButton]: dart.fnType(framework.Widget, [core.double, core.double]),
    [_handleCancel]: dart.fnType(dart.void, []),
    [_handleOk]: dart.fnType(dart.void, []),
    [_getViewHeaderView]: dart.fnType(framework.Widget, [core.double]),
    [_moveToNextView]: dart.fnType(dart.void, []),
    [_moveToPreviousView]: dart.fnType(dart.void, []),
    [_getPickerStateValues]: dart.fnType(dart.void, [picker_helper.PickerStateArgs]),
    [_updatePickerStateValues]: dart.fnType(dart.void, [picker_helper.PickerStateArgs]),
    [_notifyCurrentVisibleDatesChanged]: dart.fnType(dart.void, []),
    [_getSelectedRanges]: dart.fnType(dart.nullable(core.List), [dart.nullable(core.List)]),
    [_getSelectedDates]: dart.fnType(dart.nullable(core.List), [dart.nullable(core.List)]),
    [_updateCalendarTapCallbackForHeader]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(date_picker._SfDateRangePickerState, () => ({
    __proto__: dart.getGetters(date_picker._SfDateRangePickerState.__proto__),
    [_currentViewVisibleDates]: core.List,
    [_textScaleFactor]: core.double,
    [_headerVisibleDates]: change_notifier.ValueNotifier$(core.List),
    [_viewHeaderVisibleDates]: change_notifier.ValueNotifier$(core.List),
    [_view$1]: date_picker_manager.DateRangePickerView,
    [_isRtl]: core.bool,
    [_controller]: dart.dynamic,
    [_locale]: ui.Locale,
    [_localizations]: global_localizations.SfLocalizations,
    [_datePickerTheme]: daterangepicker_theme.SfDateRangePickerThemeData,
    [_minPickerWidth]: core.double,
    [_minPickerHeight]: core.double,
    [_previousSelectedValue]: picker_helper.PickerStateArgs,
    [_isMobilePlatform]: core.bool
  }));
  dart.setSetterSignature(date_picker._SfDateRangePickerState, () => ({
    __proto__: dart.getSetters(date_picker._SfDateRangePickerState.__proto__),
    [_currentViewVisibleDates]: core.List,
    [_textScaleFactor]: core.double,
    [_headerVisibleDates]: change_notifier.ValueNotifier$(core.List),
    [_viewHeaderVisibleDates]: change_notifier.ValueNotifier$(core.List),
    [_view$1]: date_picker_manager.DateRangePickerView,
    [_isRtl]: core.bool,
    [_controller]: dart.dynamic,
    [_locale]: ui.Locale,
    [_localizations]: global_localizations.SfLocalizations,
    [_datePickerTheme]: daterangepicker_theme.SfDateRangePickerThemeData,
    [_minPickerWidth]: core.double,
    [_minPickerHeight]: core.double,
    [_previousSelectedValue]: picker_helper.PickerStateArgs,
    [_isMobilePlatform]: core.bool
  }));
  dart.setLibraryUri(date_picker._SfDateRangePickerState, I[11]);
  dart.setFieldSignature(date_picker._SfDateRangePickerState, () => ({
    __proto__: dart.getFields(date_picker._SfDateRangePickerState.__proto__),
    [___SfDateRangePickerState__currentViewVisibleDates]: dart.fieldType(dart.nullable(core.List)),
    [_currentDate]: dart.fieldType(dart.dynamic),
    [_selectedDate$2]: dart.fieldType(dart.dynamic),
    [_minWidth]: dart.fieldType(dart.nullable(core.double)),
    [_minHeight]: dart.fieldType(dart.nullable(core.double)),
    [___SfDateRangePickerState__textScaleFactor]: dart.fieldType(dart.nullable(core.double)),
    [___SfDateRangePickerState__headerVisibleDates]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(core.List))),
    [___SfDateRangePickerState__viewHeaderVisibleDates]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(core.List))),
    [_selectedDates$2]: dart.fieldType(dart.nullable(core.List)),
    [_selectedRange$2]: dart.fieldType(dart.dynamic),
    [_selectedRanges$2]: dart.fieldType(dart.nullable(core.List)),
    [_scrollViewKey]: dart.finalFieldType(framework.GlobalKey$(date_picker._PickerScrollViewState)),
    [___SfDateRangePickerState__view]: dart.fieldType(dart.nullable(date_picker_manager.DateRangePickerView)),
    [___SfDateRangePickerState__isRtl]: dart.fieldType(dart.nullable(core.bool)),
    [___SfDateRangePickerState__controller]: dart.fieldType(dart.dynamic),
    [___SfDateRangePickerState__controller_isSet]: dart.fieldType(core.bool),
    [___SfDateRangePickerState__locale]: dart.fieldType(dart.nullable(ui.Locale)),
    [___SfDateRangePickerState__localizations]: dart.fieldType(dart.nullable(global_localizations.SfLocalizations)),
    [___SfDateRangePickerState__datePickerTheme]: dart.fieldType(dart.nullable(daterangepicker_theme.SfDateRangePickerThemeData)),
    [_forwardDateCollection]: dart.finalFieldType(core.List$(core.List)),
    [_backwardDateCollection]: dart.finalFieldType(core.List$(core.List)),
    [_scrollKey]: dart.fieldType(key.Key),
    [_pickerKey]: dart.fieldType(key.Key),
    [_pickerScrollController]: dart.fieldType(dart.nullable(scroll_controller.ScrollController)),
    [___SfDateRangePickerState__minPickerWidth]: dart.fieldType(dart.nullable(core.double)),
    [___SfDateRangePickerState__minPickerHeight]: dart.fieldType(dart.nullable(core.double)),
    [___SfDateRangePickerState__previousSelectedValue]: dart.fieldType(dart.nullable(picker_helper.PickerStateArgs)),
    [___SfDateRangePickerState__isMobilePlatform]: dart.fieldType(dart.nullable(core.bool))
  }));
  var AlignmentDirectional_y = dart.privateName(alignment, "AlignmentDirectional.y");
  var AlignmentDirectional_start = dart.privateName(alignment, "AlignmentDirectional.start");
  date_picker._StickyHeader = class _StickyHeader extends basic.Stack {
    createRenderObject(context) {
      let t73;
      if (context == null) dart.nullFailed(I[10], 5503, 47, "context");
      return new date_picker._StickyHeaderRenderObject.new({scrollableState: dart.nullCheck(scrollable.Scrollable.of(context)), alignment: this.alignment, textDirection: (t73 = this.textDirection, t73 == null ? basic.Directionality.of(context) : t73), fit: this.fit, isHorizontal: this.isHorizontal, isRTL: this.isRTL});
    }
    updateRenderObject(context, renderObject) {
      let t73;
      if (context == null) dart.nullFailed(I[10], 5515, 40, "context");
      stack.RenderStack.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[10], 5515, 61, "renderObject");
      super.updateRenderObject(context, renderObject);
      if (date_picker._StickyHeaderRenderObject.is(renderObject)) {
        t73 = renderObject;
        (() => {
          t73.scrollableState = dart.nullCheck(scrollable.Scrollable.of(context));
          t73.isRTL = this.isRTL;
          t73.isHorizontal = this.isHorizontal;
          return t73;
        })();
      }
    }
  };
  (date_picker._StickyHeader.new = function(opts) {
    let children = opts && 'children' in opts ? opts.children : null;
    if (children == null) dart.nullFailed(I[10], 5488, 27, "children");
    let alignment = opts && 'alignment' in opts ? opts.alignment : C[738] || CT.C738;
    if (alignment == null) dart.nullFailed(I[10], 5489, 26, "alignment");
    let isHorizontal = opts && 'isHorizontal' in opts ? opts.isHorizontal : false;
    if (isHorizontal == null) dart.nullFailed(I[10], 5490, 10, "isHorizontal");
    let isRTL = opts && 'isRTL' in opts ? opts.isRTL : false;
    if (isRTL == null) dart.nullFailed(I[10], 5491, 10, "isRTL");
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this.isHorizontal = isHorizontal;
    this.isRTL = isRTL;
    date_picker._StickyHeader.__proto__.new.call(this, {key: key, children: children, alignment: alignment, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker._StickyHeader.prototype;
  dart.addTypeTests(date_picker._StickyHeader);
  dart.addTypeCaches(date_picker._StickyHeader);
  dart.setLibraryUri(date_picker._StickyHeader, I[11]);
  dart.setFieldSignature(date_picker._StickyHeader, () => ({
    __proto__: dart.getFields(date_picker._StickyHeader.__proto__),
    isHorizontal: dart.finalFieldType(core.bool),
    isRTL: dart.finalFieldType(core.bool)
  }));
  var _isHorizontal = dart.privateName(date_picker, "_isHorizontal");
  var _isRTL = dart.privateName(date_picker, "_isRTL");
  var _scrollableState = dart.privateName(date_picker, "_scrollableState");
  var _stackViewPort = dart.privateName(date_picker, "_stackViewPort");
  var _scrollableSize = dart.privateName(date_picker, "_scrollableSize");
  var _getCurrentOffset = dart.privateName(date_picker, "_getCurrentOffset");
  var _getHeaderOffset = dart.privateName(date_picker, "_getHeaderOffset");
  date_picker._StickyHeaderRenderObject = class _StickyHeaderRenderObject extends stack.RenderStack {
    get isHorizontal() {
      return this[_isHorizontal];
    }
    set isHorizontal(value) {
      if (value == null) dart.nullFailed(I[10], 5551, 25, "value");
      if (this[_isHorizontal] == value) {
        return;
      }
      this[_isHorizontal] = value;
      this.markNeedsPaint();
    }
    get isRTL() {
      return this[_isRTL];
    }
    set isRTL(value) {
      if (value == null) dart.nullFailed(I[10], 5564, 18, "value");
      if (this[_isRTL] == value) {
        return;
      }
      this[_isRTL] = value;
      this.markNeedsPaint();
    }
    get [_stackViewPort]() {
      return dart.nullCheck(viewport.RenderAbstractViewport.of(this));
    }
    get scrollableState() {
      return this[_scrollableState];
    }
    set scrollableState(newScrollable) {
      if (newScrollable == null) dart.nullFailed(I[10], 5578, 39, "newScrollable");
      let oldScrollable = this[_scrollableState];
      this[_scrollableState] = newScrollable;
      this.markNeedsPaint();
      if (dart.test(this.attached)) {
        oldScrollable.position.removeListener(dart.bind(this, 'markNeedsPaint'));
        newScrollable.position.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(I[10], 5591, 29, "owner");
      super.attach(owner);
      this.scrollableState.position.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      this.scrollableState.position.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    paint(context, paintOffset) {
      if (context == null) dart.nullFailed(I[10], 5604, 30, "context");
      if (paintOffset == null) dart.nullFailed(I[10], 5604, 46, "paintOffset");
      this.updateHeaderOffset();
      this.paintStack(context, paintOffset);
    }
    updateHeaderOffset() {
      let t73, t73$, t73$0, t73$1;
      let contentSize = dart.test(this[_isHorizontal]) ? dart.nullCheck(this.firstChild).size.width : dart.nullCheck(this.firstChild).size.height;
      let headerView = dart.nullCheck(this.lastChild);
      let headerSize = dart.test(this[_isHorizontal]) ? headerView.size.width : headerView.size.height;
      let viewPosition = this[_stackViewPort].getOffsetToReveal(this, 0.0).offset;
      let currentViewOffset = dart.notNull(viewPosition) - dart.notNull(this[_scrollableState].position.pixels) - dart.notNull(this[_scrollableSize]);
      let offset = this[_getCurrentOffset](currentViewOffset, contentSize);
      let parentData = dart.nullCheck(headerView.parentData);
      let headerParentData = stack.StackParentData.is(parentData) ? parentData : null;
      let headerYOffset = dart.test(this[_isRTL]) && dart.test(this[_isHorizontal]) ? dart.notNull(contentSize) - dart.notNull(headerSize) - dart.notNull(this[_getHeaderOffset](contentSize, offset, headerSize)) : this[_getHeaderOffset](contentSize, offset, headerSize);
      if (!dart.test(this[_isHorizontal]) && headerYOffset != (t73 = headerParentData, t73 == null ? null : t73.offset.dy)) {
        t73$ = headerParentData;
        t73$ == null ? null : t73$.offset = new ui.Offset.new(headerParentData.offset.dx, headerYOffset);
      } else if (dart.test(this[_isHorizontal]) && headerYOffset != (t73$0 = headerParentData, t73$0 == null ? null : t73$0.offset.dx)) {
        t73$1 = headerParentData;
        t73$1 == null ? null : t73$1.offset = new ui.Offset.new(headerYOffset, headerParentData.offset.dy);
      }
    }
    get [_scrollableSize]() {
      let viewPort = this[_stackViewPort];
      let viewPortSize = 0.0;
      if (box$.RenderBox.is(viewPort)) {
        viewPortSize = dart.test(this[_isHorizontal]) ? viewPort.size.width : viewPort.size.height;
      }
      let anchor = 0.0;
      if (viewport.RenderViewport.is(viewPort)) {
        anchor = viewPort.anchor;
      }
      return -dart.notNull(viewPortSize) * dart.notNull(anchor);
    }
    [_getCurrentOffset](currentOffset, contentSize) {
      if (currentOffset == null) dart.nullFailed(I[10], 5678, 35, "currentOffset");
      if (contentSize == null) dart.nullFailed(I[10], 5678, 57, "contentSize");
      let currentHeaderPosition = -dart.notNull(currentOffset) > dart.notNull(contentSize) ? contentSize : -dart.notNull(currentOffset);
      return dart.notNull(currentHeaderPosition) > 0 ? currentHeaderPosition : 0.0;
    }
    [_getHeaderOffset](contentSize, offset, headerSize) {
      if (contentSize == null) dart.nullFailed(I[10], 5687, 12, "contentSize");
      if (offset == null) dart.nullFailed(I[10], 5688, 12, "offset");
      if (headerSize == null) dart.nullFailed(I[10], 5689, 12, "headerSize");
      if (!dart.test(this[_isHorizontal])) {
        headerSize = 0.0;
      }
      return dart.notNull(headerSize) + dart.notNull(offset) < dart.notNull(contentSize) ? offset : dart.notNull(contentSize) - dart.notNull(headerSize);
    }
  };
  (date_picker._StickyHeaderRenderObject.new = function(opts) {
    let scrollableState = opts && 'scrollableState' in opts ? opts.scrollableState : null;
    if (scrollableState == null) dart.nullFailed(I[10], 5529, 30, "scrollableState");
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    if (alignment == null) dart.nullFailed(I[10], 5530, 32, "alignment");
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    if (textDirection == null) dart.nullFailed(I[10], 5531, 28, "textDirection");
    let fit = opts && 'fit' in opts ? opts.fit : null;
    if (fit == null) dart.nullFailed(I[10], 5532, 23, "fit");
    let isHorizontal = opts && 'isHorizontal' in opts ? opts.isHorizontal : null;
    if (isHorizontal == null) dart.nullFailed(I[10], 5533, 19, "isHorizontal");
    let isRTL = opts && 'isRTL' in opts ? opts.isRTL : null;
    if (isRTL == null) dart.nullFailed(I[10], 5534, 19, "isRTL");
    this[_isHorizontal] = false;
    this[_isRTL] = false;
    this[_scrollableState] = scrollableState;
    this[_isHorizontal] = isHorizontal;
    this[_isRTL] = isRTL;
    date_picker._StickyHeaderRenderObject.__proto__.new.call(this, {alignment: alignment, textDirection: textDirection, fit: fit});
    ;
  }).prototype = date_picker._StickyHeaderRenderObject.prototype;
  dart.addTypeTests(date_picker._StickyHeaderRenderObject);
  dart.addTypeCaches(date_picker._StickyHeaderRenderObject);
  dart.setMethodSignature(date_picker._StickyHeaderRenderObject, () => ({
    __proto__: dart.getMethods(date_picker._StickyHeaderRenderObject.__proto__),
    updateHeaderOffset: dart.fnType(dart.void, []),
    [_getCurrentOffset]: dart.fnType(core.double, [core.double, core.double]),
    [_getHeaderOffset]: dart.fnType(core.double, [core.double, core.double, core.double])
  }));
  dart.setGetterSignature(date_picker._StickyHeaderRenderObject, () => ({
    __proto__: dart.getGetters(date_picker._StickyHeaderRenderObject.__proto__),
    isHorizontal: core.bool,
    isRTL: core.bool,
    [_stackViewPort]: viewport.RenderAbstractViewport,
    scrollableState: scrollable.ScrollableState,
    [_scrollableSize]: core.double
  }));
  dart.setSetterSignature(date_picker._StickyHeaderRenderObject, () => ({
    __proto__: dart.getSetters(date_picker._StickyHeaderRenderObject.__proto__),
    isHorizontal: core.bool,
    isRTL: core.bool,
    scrollableState: scrollable.ScrollableState
  }));
  dart.setLibraryUri(date_picker._StickyHeaderRenderObject, I[11]);
  dart.setFieldSignature(date_picker._StickyHeaderRenderObject, () => ({
    __proto__: dart.getFields(date_picker._StickyHeaderRenderObject.__proto__),
    [_scrollableState]: dart.fieldType(scrollable.ScrollableState),
    [_isHorizontal]: dart.fieldType(core.bool),
    [_isRTL]: dart.fieldType(core.bool)
  }));
  var textScaleFactor$1 = dart.privateName(date_picker, "_PickerHeaderView.textScaleFactor");
  var selectionMode$4 = dart.privateName(date_picker, "_PickerHeaderView.selectionMode");
  var headerStyle$2 = dart.privateName(date_picker, "_PickerHeaderView.headerStyle");
  var view$5 = dart.privateName(date_picker, "_PickerHeaderView.view");
  var numberOfWeeksInView$0 = dart.privateName(date_picker, "_PickerHeaderView.numberOfWeeksInView");
  var showNavigationArrow$2 = dart.privateName(date_picker, "_PickerHeaderView.showNavigationArrow");
  var navigationDirection$4 = dart.privateName(date_picker, "_PickerHeaderView.navigationDirection");
  var minDate$4 = dart.privateName(date_picker, "_PickerHeaderView.minDate");
  var maxDate$4 = dart.privateName(date_picker, "_PickerHeaderView.maxDate");
  var monthFormat$3 = dart.privateName(date_picker, "_PickerHeaderView.monthFormat");
  var enableSwipeSelection$1 = dart.privateName(date_picker, "_PickerHeaderView.enableSwipeSelection");
  var navigationMode$2 = dart.privateName(date_picker, "_PickerHeaderView.navigationMode");
  var allowViewNavigation$3 = dart.privateName(date_picker, "_PickerHeaderView.allowViewNavigation");
  var datePickerTheme$1 = dart.privateName(date_picker, "_PickerHeaderView.datePickerTheme");
  var locale$0 = dart.privateName(date_picker, "_PickerHeaderView.locale");
  var visibleDates$3 = dart.privateName(date_picker, "_PickerHeaderView.visibleDates");
  var previousNavigationCallback$ = dart.privateName(date_picker, "_PickerHeaderView.previousNavigationCallback");
  var nextNavigationCallback$ = dart.privateName(date_picker, "_PickerHeaderView.nextNavigationCallback");
  var width$1 = dart.privateName(date_picker, "_PickerHeaderView.width");
  var height$1 = dart.privateName(date_picker, "_PickerHeaderView.height");
  var isRtl$1 = dart.privateName(date_picker, "_PickerHeaderView.isRtl");
  var hoverColor$ = dart.privateName(date_picker, "_PickerHeaderView.hoverColor");
  var enableMultiView$4 = dart.privateName(date_picker, "_PickerHeaderView.enableMultiView");
  var multiViewSpacing$1 = dart.privateName(date_picker, "_PickerHeaderView.multiViewSpacing");
  var localizations$2 = dart.privateName(date_picker, "_PickerHeaderView.localizations");
  var isHijri$2 = dart.privateName(date_picker, "_PickerHeaderView.isHijri");
  date_picker._PickerHeaderView = class _PickerHeaderView extends framework.StatefulWidget {
    get textScaleFactor() {
      return this[textScaleFactor$1];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    get selectionMode() {
      return this[selectionMode$4];
    }
    set selectionMode(value) {
      super.selectionMode = value;
    }
    get headerStyle() {
      return this[headerStyle$2];
    }
    set headerStyle(value) {
      super.headerStyle = value;
    }
    get view() {
      return this[view$5];
    }
    set view(value) {
      super.view = value;
    }
    get numberOfWeeksInView() {
      return this[numberOfWeeksInView$0];
    }
    set numberOfWeeksInView(value) {
      super.numberOfWeeksInView = value;
    }
    get showNavigationArrow() {
      return this[showNavigationArrow$2];
    }
    set showNavigationArrow(value) {
      super.showNavigationArrow = value;
    }
    get navigationDirection() {
      return this[navigationDirection$4];
    }
    set navigationDirection(value) {
      super.navigationDirection = value;
    }
    get minDate() {
      return this[minDate$4];
    }
    set minDate(value) {
      super.minDate = value;
    }
    get maxDate() {
      return this[maxDate$4];
    }
    set maxDate(value) {
      super.maxDate = value;
    }
    get monthFormat() {
      return this[monthFormat$3];
    }
    set monthFormat(value) {
      super.monthFormat = value;
    }
    get enableSwipeSelection() {
      return this[enableSwipeSelection$1];
    }
    set enableSwipeSelection(value) {
      super.enableSwipeSelection = value;
    }
    get navigationMode() {
      return this[navigationMode$2];
    }
    set navigationMode(value) {
      super.navigationMode = value;
    }
    get allowViewNavigation() {
      return this[allowViewNavigation$3];
    }
    set allowViewNavigation(value) {
      super.allowViewNavigation = value;
    }
    get datePickerTheme() {
      return this[datePickerTheme$1];
    }
    set datePickerTheme(value) {
      super.datePickerTheme = value;
    }
    get locale() {
      return this[locale$0];
    }
    set locale(value) {
      super.locale = value;
    }
    get visibleDates() {
      return this[visibleDates$3];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
    get previousNavigationCallback() {
      return this[previousNavigationCallback$];
    }
    set previousNavigationCallback(value) {
      super.previousNavigationCallback = value;
    }
    get nextNavigationCallback() {
      return this[nextNavigationCallback$];
    }
    set nextNavigationCallback(value) {
      super.nextNavigationCallback = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    get isRtl() {
      return this[isRtl$1];
    }
    set isRtl(value) {
      super.isRtl = value;
    }
    get hoverColor() {
      return this[hoverColor$];
    }
    set hoverColor(value) {
      super.hoverColor = value;
    }
    get enableMultiView() {
      return this[enableMultiView$4];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get multiViewSpacing() {
      return this[multiViewSpacing$1];
    }
    set multiViewSpacing(value) {
      super.multiViewSpacing = value;
    }
    get localizations() {
      return this[localizations$2];
    }
    set localizations(value) {
      super.localizations = value;
    }
    get isHijri() {
      return this[isHijri$2];
    }
    set isHijri(value) {
      super.isHijri = value;
    }
    createState() {
      return new date_picker._PickerHeaderViewState.new();
    }
  };
  (date_picker._PickerHeaderView.new = function(visibleDates, headerStyle, selectionMode, view, numberOfWeeksInView, showNavigationArrow, navigationDirection, enableSwipeSelection, navigationMode, minDate, maxDate, monthFormat, datePickerTheme, locale, width, height, allowViewNavigation, previousNavigationCallback, nextNavigationCallback, enableMultiView, multiViewSpacing, hoverColor, isRtl, textScaleFactor, isHijri, localizations, opts) {
    if (visibleDates == null) dart.nullFailed(I[10], 5709, 12, "visibleDates");
    if (headerStyle == null) dart.nullFailed(I[10], 5710, 12, "headerStyle");
    if (selectionMode == null) dart.nullFailed(I[10], 5711, 12, "selectionMode");
    if (view == null) dart.nullFailed(I[10], 5712, 12, "view");
    if (numberOfWeeksInView == null) dart.nullFailed(I[10], 5713, 12, "numberOfWeeksInView");
    if (showNavigationArrow == null) dart.nullFailed(I[10], 5714, 12, "showNavigationArrow");
    if (navigationDirection == null) dart.nullFailed(I[10], 5715, 12, "navigationDirection");
    if (enableSwipeSelection == null) dart.nullFailed(I[10], 5716, 12, "enableSwipeSelection");
    if (navigationMode == null) dart.nullFailed(I[10], 5717, 12, "navigationMode");
    if (datePickerTheme == null) dart.nullFailed(I[10], 5721, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[10], 5722, 12, "locale");
    if (width == null) dart.nullFailed(I[10], 5723, 12, "width");
    if (height == null) dart.nullFailed(I[10], 5724, 12, "height");
    if (allowViewNavigation == null) dart.nullFailed(I[10], 5725, 12, "allowViewNavigation");
    if (enableMultiView == null) dart.nullFailed(I[10], 5728, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[10], 5729, 12, "multiViewSpacing");
    if (hoverColor == null) dart.nullFailed(I[10], 5730, 12, "hoverColor");
    if (isRtl == null) dart.nullFailed(I[10], 5731, 12, "isRtl");
    if (textScaleFactor == null) dart.nullFailed(I[10], 5732, 12, "textScaleFactor");
    if (isHijri == null) dart.nullFailed(I[10], 5733, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[10], 5734, 12, "localizations");
    let key = opts && 'key' in opts ? opts.key : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[visibleDates$3] = visibleDates;
    this[headerStyle$2] = headerStyle;
    this[selectionMode$4] = selectionMode;
    this[view$5] = view;
    this[numberOfWeeksInView$0] = numberOfWeeksInView;
    this[showNavigationArrow$2] = showNavigationArrow;
    this[navigationDirection$4] = navigationDirection;
    this[enableSwipeSelection$1] = enableSwipeSelection;
    this[navigationMode$2] = navigationMode;
    this[minDate$4] = minDate;
    this[maxDate$4] = maxDate;
    this[monthFormat$3] = monthFormat;
    this[datePickerTheme$1] = datePickerTheme;
    this[locale$0] = locale;
    this[width$1] = width;
    this[height$1] = height;
    this[allowViewNavigation$3] = allowViewNavigation;
    this[previousNavigationCallback$] = previousNavigationCallback;
    this[nextNavigationCallback$] = nextNavigationCallback;
    this[enableMultiView$4] = enableMultiView;
    this[multiViewSpacing$1] = multiViewSpacing;
    this[hoverColor$] = hoverColor;
    this[isRtl$1] = isRtl;
    this[textScaleFactor$1] = textScaleFactor;
    this[isHijri$2] = isHijri;
    this[localizations$2] = localizations;
    date_picker._PickerHeaderView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker._PickerHeaderView.prototype;
  dart.addTypeTests(date_picker._PickerHeaderView);
  dart.addTypeCaches(date_picker._PickerHeaderView);
  dart.setMethodSignature(date_picker._PickerHeaderView, () => ({
    __proto__: dart.getMethods(date_picker._PickerHeaderView.__proto__),
    createState: dart.fnType(date_picker._PickerHeaderViewState, [])
  }));
  dart.setLibraryUri(date_picker._PickerHeaderView, I[11]);
  dart.setFieldSignature(date_picker._PickerHeaderView, () => ({
    __proto__: dart.getFields(date_picker._PickerHeaderView.__proto__),
    textScaleFactor: dart.finalFieldType(core.double),
    selectionMode: dart.finalFieldType(date_picker_manager.DateRangePickerSelectionMode),
    headerStyle: dart.finalFieldType(date_picker_manager.DateRangePickerHeaderStyle),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    numberOfWeeksInView: dart.finalFieldType(core.int),
    showNavigationArrow: dart.finalFieldType(core.bool),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    minDate: dart.finalFieldType(dart.dynamic),
    maxDate: dart.finalFieldType(dart.dynamic),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    enableSwipeSelection: dart.finalFieldType(core.bool),
    navigationMode: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationMode),
    allowViewNavigation: dart.finalFieldType(core.bool),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    locale: dart.finalFieldType(ui.Locale),
    visibleDates: dart.finalFieldType(change_notifier.ValueNotifier$(core.List)),
    previousNavigationCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    nextNavigationCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    isRtl: dart.finalFieldType(core.bool),
    hoverColor: dart.finalFieldType(ui.Color),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    isHijri: dart.finalFieldType(core.bool)
  }));
  var _hovering = dart.privateName(date_picker, "_hovering");
  var _addListener = dart.privateName(date_picker, "_addListener");
  var _listener = dart.privateName(date_picker, "_listener");
  var _getHeaderText = dart.privateName(date_picker, "_getHeaderText");
  var _getLeftArrow = dart.privateName(date_picker, "_getLeftArrow");
  var _getRightArrow = dart.privateName(date_picker, "_getRightArrow");
  date_picker._PickerHeaderViewState = class _PickerHeaderViewState extends framework.State$(date_picker._PickerHeaderView) {
    initState() {
      this[_hovering] = false;
      this[_addListener]();
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      date_picker._PickerHeaderView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[10], 5830, 42, "oldWidget");
      this.widget.visibleDates.removeListener(dart.bind(this, _listener));
      this[_addListener]();
      super.didUpdateWidget(oldWidget);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 5837, 29, "context");
      let isMobilePlatform = picker_helper.DateRangePickerHelper.isMobileLayout(theme.Theme.of(context).platform);
      let arrowWidth = 0.0;
      let headerWidth = this.widget.width;
      let showNavigationArrow = dart.test(this.widget.showNavigationArrow) || (this.widget.view == date_picker_manager.DateRangePickerView.month || !dart.test(this.widget.allowViewNavigation)) && dart.test(date_picker._isSwipeInteractionEnabled(this.widget.enableSwipeSelection, this.widget.navigationMode)) && (this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.range || this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiRange || this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.extendableRange);
      showNavigationArrow = showNavigationArrow && this.widget.navigationMode != date_picker_manager.DateRangePickerNavigationMode.scroll;
      if (showNavigationArrow) {
        arrowWidth = dart.notNull(this.widget.width) / 6;
        arrowWidth = arrowWidth > 50 ? 50.0 : arrowWidth;
        headerWidth = dart.notNull(this.widget.width) - arrowWidth * 2;
      }
      let arrowColor = this.widget.headerStyle.textStyle != null ? dart.nullCheck(dart.nullCheck(this.widget.headerStyle.textStyle).color) : dart.nullCheck(this.widget.datePickerTheme.headerTextStyle.color);
      arrowColor = arrowColor.withOpacity(dart.notNull(arrowColor.opacity) * 0.6);
      let prevArrowColor = arrowColor;
      let nextArrowColor = arrowColor;
      let dates = this.widget.visibleDates.value;
      if (showNavigationArrow && !dart.test(picker_helper.DateRangePickerHelper.canMoveToNextView(this.widget.view, this.widget.numberOfWeeksInView, this.widget.maxDate, dates, this.widget.enableMultiView, this.widget.isHijri))) {
        nextArrowColor = nextArrowColor.withOpacity(dart.notNull(arrowColor.opacity) * 0.5);
      }
      if (showNavigationArrow && !dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousView(this.widget.view, this.widget.numberOfWeeksInView, this.widget.minDate, dates, this.widget.enableMultiView, this.widget.isHijri))) {
        prevArrowColor = prevArrowColor.withOpacity(dart.notNull(arrowColor.opacity) * 0.5);
      }
      let headerText = this[_getHeaderText](headerWidth, isMobilePlatform);
      if (this.widget.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll && this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
        return headerText;
      }
      let arrowSize = dart.notNull(this.widget.height) * 0.5;
      arrowSize = arrowSize > 25 ? 25.0 : arrowSize;
      arrowSize = arrowSize * dart.notNull(this.widget.textScaleFactor);
      let leftArrow = this[_getLeftArrow](arrowWidth, arrowColor, prevArrowColor, arrowSize);
      let rightArrow = this[_getRightArrow](arrowWidth, arrowColor, nextArrowColor, arrowSize);
      if (this.widget.headerStyle.textAlign == ui.TextAlign.left || this.widget.headerStyle.textAlign == ui.TextAlign.start) {
        return new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, crossAxisAlignment: flex.CrossAxisAlignment.center, children: T.JSArrayOfWidget().of([headerText, leftArrow, rightArrow]), $creationLocationd_0dea112b090073317d4: C[739] || CT.C739});
      } else if (this.widget.headerStyle.textAlign == ui.TextAlign.right || this.widget.headerStyle.textAlign == ui.TextAlign.end) {
        return new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, crossAxisAlignment: flex.CrossAxisAlignment.center, children: T.JSArrayOfWidget().of([leftArrow, rightArrow, headerText]), $creationLocationd_0dea112b090073317d4: C[744] || CT.C744});
      } else {
        return new basic.Row.new({mainAxisAlignment: flex.MainAxisAlignment.center, crossAxisAlignment: flex.CrossAxisAlignment.center, children: T.JSArrayOfWidget().of([leftArrow, headerText, rightArrow]), $creationLocationd_0dea112b090073317d4: C[749] || CT.C749});
      }
    }
    dispose() {
      this.widget.visibleDates.removeListener(dart.bind(this, _listener));
      super.dispose();
    }
    [_listener]() {
      if (!dart.test(this.mounted)) {
        return;
      }
      if (dart.test(this.widget.showNavigationArrow) || (this.widget.view == date_picker_manager.DateRangePickerView.month || !dart.test(this.widget.allowViewNavigation)) && dart.test(date_picker._isSwipeInteractionEnabled(this.widget.enableSwipeSelection, this.widget.navigationMode)) && (this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.range || this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiRange || this.widget.selectionMode == date_picker_manager.DateRangePickerSelectionMode.extendableRange)) {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
    }
    [_addListener]() {
      let t73;
      t73 = binding.SchedulerBinding.instance;
      t73 == null ? null : t73.addPostFrameCallback(dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[10], 5965, 54, "_");
        this.widget.visibleDates.addListener(dart.bind(this, _listener));
      }, T.DurationTovoid()));
    }
    [_getHeaderText](headerWidth, isMobilePlatform) {
      if (headerWidth == null) dart.nullFailed(I[10], 5970, 32, "headerWidth");
      if (isMobilePlatform == null) dart.nullFailed(I[10], 5970, 50, "isMobilePlatform");
      return new basic.MouseRegion.new({onEnter: dart.fn(event => {
          if (event == null) dart.nullFailed(I[10], 5972, 37, "event");
          if (this.widget.view == date_picker_manager.DateRangePickerView.century || dart.test(this.widget.isHijri) && this.widget.view == date_picker_manager.DateRangePickerView.decade || dart.test(isMobilePlatform)) {
            return;
          }
          this.setState(dart.fn(() => {
            this[_hovering] = true;
          }, T.VoidTovoid()));
        }, T.PointerEnterEventTovoid()), onHover: dart.fn(event => {
          if (event == null) dart.nullFailed(I[10], 5983, 37, "event");
          if (this.widget.view == date_picker_manager.DateRangePickerView.century || dart.test(this.widget.isHijri) && this.widget.view == date_picker_manager.DateRangePickerView.decade || dart.test(isMobilePlatform)) {
            return;
          }
          this.setState(dart.fn(() => {
            this[_hovering] = true;
          }, T.VoidTovoid()));
        }, T.PointerHoverEventTovoid()), onExit: dart.fn(event => {
          if (event == null) dart.nullFailed(I[10], 5994, 35, "event");
          this.setState(dart.fn(() => {
            this[_hovering] = false;
          }, T.VoidTovoid()));
        }, T.PointerExitEventTovoid()), child: new basic.RepaintBoundary.new({child: new basic.CustomPaint.new({painter: new date_picker._PickerHeaderPainter.new(this.widget.visibleDates, this.widget.headerStyle, this.widget.view, this.widget.numberOfWeeksInView, this.widget.monthFormat, this.widget.datePickerTheme, this.widget.isRtl, this.widget.locale, this.widget.enableMultiView, this.widget.multiViewSpacing, this.widget.hoverColor, this[_hovering], this.widget.textScaleFactor, this.widget.isHijri, this.widget.localizations, this.widget.navigationDirection), size: new ui.Size.new(headerWidth, this.widget.height), $creationLocationd_0dea112b090073317d4: C[754] || CT.C754}), $creationLocationd_0dea112b090073317d4: C[758] || CT.C758}), $creationLocationd_0dea112b090073317d4: C[761] || CT.C761});
    }
    [_getLeftArrow](arrowWidth, arrowColor, prevArrowColor, arrowSize) {
      let t73, t73$;
      if (arrowWidth == null) dart.nullFailed(I[10], 6023, 34, "arrowWidth");
      if (arrowColor == null) dart.nullFailed(I[10], 6023, 52, "arrowColor");
      if (prevArrowColor == null) dart.nullFailed(I[10], 6024, 13, "prevArrowColor");
      if (arrowSize == null) dart.nullFailed(I[10], 6024, 36, "arrowSize");
      return new container.Container.new({alignment: alignment.Alignment.center, color: (t73 = this.widget.headerStyle.backgroundColor, t73 == null ? this.widget.datePickerTheme.headerBackgroundColor : t73), width: arrowWidth, padding: C[767] || CT.C767, child: new material_button.MaterialButton.new({splashColor: !dart.equals(prevArrowColor, arrowColor) ? colors$.Colors.transparent : null, hoverColor: !dart.equals(prevArrowColor, arrowColor) ? colors$.Colors.transparent : null, highlightColor: !dart.equals(prevArrowColor, arrowColor) ? colors$.Colors.transparent : null, color: (t73$ = this.widget.headerStyle.backgroundColor, t73$ == null ? this.widget.datePickerTheme.headerBackgroundColor : t73$), onPressed: this.widget.previousNavigationCallback, padding: C[767] || CT.C767, elevation: 0.0, focusElevation: 0.0, highlightElevation: 0.0, disabledElevation: 0.0, hoverElevation: 0.0, child: new basic.Semantics.new({label: "Backward", child: new icon.Icon.new(this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? icons.Icons.chevron_left : icons.Icons.keyboard_arrow_up, {color: prevArrowColor, size: arrowSize, $creationLocationd_0dea112b090073317d4: C[768] || CT.C768}), $creationLocationd_0dea112b090073317d4: C[773] || CT.C773}), $creationLocationd_0dea112b090073317d4: C[777] || CT.C777}), $creationLocationd_0dea112b090073317d4: C[791] || CT.C791});
    }
    [_getRightArrow](arrowWidth, arrowColor, nextArrowColor, arrowSize) {
      let t73, t73$;
      if (arrowWidth == null) dart.nullFailed(I[10], 6061, 35, "arrowWidth");
      if (arrowColor == null) dart.nullFailed(I[10], 6061, 53, "arrowColor");
      if (nextArrowColor == null) dart.nullFailed(I[10], 6062, 13, "nextArrowColor");
      if (arrowSize == null) dart.nullFailed(I[10], 6062, 36, "arrowSize");
      return new container.Container.new({alignment: alignment.Alignment.center, color: (t73 = this.widget.headerStyle.backgroundColor, t73 == null ? this.widget.datePickerTheme.headerBackgroundColor : t73), width: arrowWidth, padding: C[767] || CT.C767, child: new material_button.MaterialButton.new({splashColor: !dart.equals(nextArrowColor, arrowColor) ? colors$.Colors.transparent : null, hoverColor: !dart.equals(nextArrowColor, arrowColor) ? colors$.Colors.transparent : null, highlightColor: !dart.equals(nextArrowColor, arrowColor) ? colors$.Colors.transparent : null, color: (t73$ = this.widget.headerStyle.backgroundColor, t73$ == null ? this.widget.datePickerTheme.headerBackgroundColor : t73$), onPressed: this.widget.nextNavigationCallback, padding: C[767] || CT.C767, elevation: 0.0, focusElevation: 0.0, highlightElevation: 0.0, disabledElevation: 0.0, hoverElevation: 0.0, child: new basic.Semantics.new({label: "Forward", child: new icon.Icon.new(this.widget.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? icons.Icons.chevron_right : icons.Icons.keyboard_arrow_down, {color: nextArrowColor, size: arrowSize, $creationLocationd_0dea112b090073317d4: C[798] || CT.C798}), $creationLocationd_0dea112b090073317d4: C[803] || CT.C803}), $creationLocationd_0dea112b090073317d4: C[807] || CT.C807}), $creationLocationd_0dea112b090073317d4: C[821] || CT.C821});
    }
  };
  (date_picker._PickerHeaderViewState.new = function() {
    this[_hovering] = false;
    date_picker._PickerHeaderViewState.__proto__.new.call(this);
    ;
  }).prototype = date_picker._PickerHeaderViewState.prototype;
  dart.addTypeTests(date_picker._PickerHeaderViewState);
  dart.addTypeCaches(date_picker._PickerHeaderViewState);
  dart.setMethodSignature(date_picker._PickerHeaderViewState, () => ({
    __proto__: dart.getMethods(date_picker._PickerHeaderViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_listener]: dart.fnType(dart.void, []),
    [_addListener]: dart.fnType(dart.void, []),
    [_getHeaderText]: dart.fnType(framework.Widget, [core.double, core.bool]),
    [_getLeftArrow]: dart.fnType(container.Container, [core.double, ui.Color, ui.Color, core.double]),
    [_getRightArrow]: dart.fnType(container.Container, [core.double, ui.Color, ui.Color, core.double])
  }));
  dart.setLibraryUri(date_picker._PickerHeaderViewState, I[11]);
  dart.setFieldSignature(date_picker._PickerHeaderViewState, () => ({
    __proto__: dart.getFields(date_picker._PickerHeaderViewState.__proto__),
    [_hovering]: dart.fieldType(core.bool)
  }));
  var _headerText = dart.privateName(date_picker, "_headerText");
  var _textPainter$0 = dart.privateName(date_picker, "_textPainter");
  date_picker._PickerHeaderPainter = class _PickerHeaderPainter extends custom_paint.CustomPainter {
    paint(canvas, size) {
      let t73;
      if (canvas == null) dart.nullFailed(I[10], 6140, 21, "canvas");
      if (size == null) dart.nullFailed(I[10], 6140, 34, "size");
      canvas.clipRect(new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height));
      let xPosition = 0.0;
      this[_textPainter$0].textDirection = ui.TextDirection.ltr;
      this[_textPainter$0].textWidthBasis = text_painter.TextWidthBasis.longestLine;
      this[_textPainter$0].textScaleFactor = this.textScaleFactor;
      this[_textPainter$0].maxLines = 1;
      this[_headerText] = "";
      let width = dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && this.headerStyle.textAlign == ui.TextAlign.center ? (dart.notNull(size.width) - dart.notNull(this.multiViewSpacing)) / 2 : size.width;
      let count = dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && this.headerStyle.textAlign == ui.TextAlign.center ? 2 : 1;
      for (let j = 0; j < count; j = j + 1) {
        let currentViewIndex = dart.test(this.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(count, j) : j;
        xPosition = dart.notNull(currentViewIndex) * dart.notNull(width) + 10;
        let text = date_picker._getHeaderText(this.visibleDates.value, this.view, j, this.isHijri, this.numberOfWeeksInView, this.monthFormat, this.enableMultiView, this.headerStyle, this.navigationDirection, this.locale, this.localizations);
        this[_headerText] = dart.notNull(this[_headerText]) + dart.notNull(j === 1 ? " " + dart.notNull(text) : text);
        let style = (t73 = this.headerStyle.textStyle, t73 == null ? this.datePickerTheme.headerTextStyle : t73);
        if (dart.test(this.hovering)) {
          style = style.copyWith({color: this.hoverColor});
        }
        let span = new text_span.TextSpan.new({text: text, style: style});
        this[_textPainter$0].text = span;
        if (this.headerStyle.textAlign == ui.TextAlign.justify) {
          this[_textPainter$0].textAlign = this.headerStyle.textAlign;
        }
        let textWidth = (dart.notNull(currentViewIndex) + 1) * dart.notNull(width) - xPosition;
        textWidth = textWidth > 0 ? textWidth : 0.0;
        this[_textPainter$0].layout({minWidth: textWidth, maxWidth: textWidth});
        if (this.headerStyle.textAlign == ui.TextAlign.center) {
          xPosition = dart.notNull(currentViewIndex) * dart.notNull(width) + dart.notNull(currentViewIndex) * dart.notNull(this.multiViewSpacing) + dart.notNull(width) / 2 - dart.notNull(this[_textPainter$0].width) / 2;
        } else if (!dart.test(this.isRtl) && (this.headerStyle.textAlign == ui.TextAlign.right || this.headerStyle.textAlign == ui.TextAlign.end) || dart.test(this.isRtl) && (this.headerStyle.textAlign == ui.TextAlign.left || this.headerStyle.textAlign == ui.TextAlign.start)) {
          xPosition = (dart.notNull(currentViewIndex) + 1) * dart.notNull(width) - dart.notNull(this[_textPainter$0].width) - xPosition;
        }
        this[_textPainter$0].paint(canvas, new ui.Offset.new(xPosition, dart.notNull(size.height) / 2 - dart.notNull(this[_textPainter$0].height) / 2));
      }
    }
    shouldRepaint(oldDelegate) {
      date_picker._PickerHeaderPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[10], 6216, 43, "oldDelegate");
      return !dart.equals(oldDelegate.headerStyle, this.headerStyle) || oldDelegate.isRtl != this.isRtl || oldDelegate.numberOfWeeksInView != this.numberOfWeeksInView || !dart.equals(oldDelegate.locale, this.locale) || !dart.equals(oldDelegate.datePickerTheme, this.datePickerTheme) || oldDelegate.monthFormat != this.monthFormat || oldDelegate.textScaleFactor != this.textScaleFactor || oldDelegate.hovering != this.hovering || !dart.equals(oldDelegate.hoverColor, this.hoverColor);
    }
    get semanticsBuilder() {
      return dart.fn(size => {
        if (size == null) dart.nullFailed(I[10], 6234, 18, "size");
        let rect = ui.Offset.zero['&'](size);
        return T.JSArrayOfCustomPainterSemantics().of([new custom_paint.CustomPainterSemantics.new({rect: rect, properties: new semantics$.SemanticsProperties.new({label: this[_headerText][$replaceAll]("-", "to"), textDirection: ui.TextDirection.ltr})})]);
      }, T.SizeToListOfCustomPainterSemantics());
    }
    shouldRebuildSemantics(oldDelegate) {
      custom_paint.CustomPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[10], 6249, 45, "oldDelegate");
      return true;
    }
  };
  (date_picker._PickerHeaderPainter.new = function(visibleDates, headerStyle, view, numberOfWeeksInView, monthFormat, datePickerTheme, isRtl, locale, enableMultiView, multiViewSpacing, hoverColor, hovering, textScaleFactor, isHijri, localizations, navigationDirection) {
    if (visibleDates == null) dart.nullFailed(I[10], 6102, 12, "visibleDates");
    if (headerStyle == null) dart.nullFailed(I[10], 6103, 12, "headerStyle");
    if (view == null) dart.nullFailed(I[10], 6104, 12, "view");
    if (numberOfWeeksInView == null) dart.nullFailed(I[10], 6105, 12, "numberOfWeeksInView");
    if (datePickerTheme == null) dart.nullFailed(I[10], 6107, 12, "datePickerTheme");
    if (isRtl == null) dart.nullFailed(I[10], 6108, 12, "isRtl");
    if (locale == null) dart.nullFailed(I[10], 6109, 12, "locale");
    if (enableMultiView == null) dart.nullFailed(I[10], 6110, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[10], 6111, 12, "multiViewSpacing");
    if (hoverColor == null) dart.nullFailed(I[10], 6112, 12, "hoverColor");
    if (hovering == null) dart.nullFailed(I[10], 6113, 12, "hovering");
    if (textScaleFactor == null) dart.nullFailed(I[10], 6114, 12, "textScaleFactor");
    if (isHijri == null) dart.nullFailed(I[10], 6115, 12, "isHijri");
    if (localizations == null) dart.nullFailed(I[10], 6116, 12, "localizations");
    if (navigationDirection == null) dart.nullFailed(I[10], 6117, 12, "navigationDirection");
    this[_headerText] = "";
    this[_textPainter$0] = new text_painter.TextPainter.new();
    this.visibleDates = visibleDates;
    this.headerStyle = headerStyle;
    this.view = view;
    this.numberOfWeeksInView = numberOfWeeksInView;
    this.monthFormat = monthFormat;
    this.datePickerTheme = datePickerTheme;
    this.isRtl = isRtl;
    this.locale = locale;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.hoverColor = hoverColor;
    this.hovering = hovering;
    this.textScaleFactor = textScaleFactor;
    this.isHijri = isHijri;
    this.localizations = localizations;
    this.navigationDirection = navigationDirection;
    date_picker._PickerHeaderPainter.__proto__.new.call(this, {repaint: visibleDates});
    ;
  }).prototype = date_picker._PickerHeaderPainter.prototype;
  dart.addTypeTests(date_picker._PickerHeaderPainter);
  dart.addTypeCaches(date_picker._PickerHeaderPainter);
  dart.setMethodSignature(date_picker._PickerHeaderPainter, () => ({
    __proto__: dart.getMethods(date_picker._PickerHeaderPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(date_picker._PickerHeaderPainter, () => ({
    __proto__: dart.getGetters(date_picker._PickerHeaderPainter.__proto__),
    semanticsBuilder: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])
  }));
  dart.setLibraryUri(date_picker._PickerHeaderPainter, I[11]);
  dart.setFieldSignature(date_picker._PickerHeaderPainter, () => ({
    __proto__: dart.getFields(date_picker._PickerHeaderPainter.__proto__),
    headerStyle: dart.finalFieldType(date_picker_manager.DateRangePickerHeaderStyle),
    view: dart.finalFieldType(date_picker_manager.DateRangePickerView),
    numberOfWeeksInView: dart.finalFieldType(core.int),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    isRtl: dart.finalFieldType(core.bool),
    monthFormat: dart.finalFieldType(dart.nullable(core.String)),
    hovering: dart.finalFieldType(core.bool),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    hoverColor: dart.finalFieldType(ui.Color),
    locale: dart.finalFieldType(ui.Locale),
    textScaleFactor: dart.finalFieldType(core.double),
    isHijri: dart.finalFieldType(core.bool),
    localizations: dart.finalFieldType(global_localizations.SfLocalizations),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    visibleDates: dart.fieldType(change_notifier.ValueNotifier$(core.List)),
    [_headerText]: dart.fieldType(core.String),
    [_textPainter$0]: dart.finalFieldType(text_painter.TextPainter)
  }));
  var _updateViewHeaderFormat = dart.privateName(date_picker, "_updateViewHeaderFormat");
  var _getSemanticsBuilder$0 = dart.privateName(date_picker, "_getSemanticsBuilder");
  date_picker._PickerViewHeaderPainter = class _PickerViewHeaderPainter extends custom_paint.CustomPainter {
    paint(canvas, size) {
      let t73, t73$;
      if (canvas == null) dart.nullFailed(I[10], 6336, 21, "canvas");
      if (size == null) dart.nullFailed(I[10], 6336, 34, "size");
      canvas.clipRect(new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height));
      let weekNumberPanelWidth = picker_helper.DateRangePickerHelper.getWeekNumberPanelWidth(this.showWeekNumber, size.width, this.isMobilePlatform);
      let width = dart.test(this.showWeekNumber) ? (dart.notNull(size.width) - dart.notNull(weekNumberPanelWidth)) / 7 : dart.notNull(size.width) / 7;
      if (dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
        width = dart.test(this.showWeekNumber) ? (dart.notNull(size.width) - dart.notNull(this.multiViewSpacing) - dart.notNull(weekNumberPanelWidth) * 2) / (7 * 2) : (dart.notNull(size.width) - dart.notNull(this.multiViewSpacing)) / (7 * 2);
      }
      let viewHeaderDayStyle = (t73 = this.viewHeaderStyle.textStyle, t73 == null ? this.datePickerTheme.viewHeaderTextStyle : t73);
      let today = picker_helper.DateRangePickerHelper.getToday(this.isHijri);
      let dayTextStyle = viewHeaderDayStyle;
      let xPosition = dart.test(this.isRtl) ? 0.0 : weekNumberPanelWidth;
      let yPosition = 0.0;
      let count = dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? 2 : 1;
      let datesCount = dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? (dart.notNull(this.visibleDates[$length]) / 2)[$truncate]() : this.visibleDates[$length];
      let isVerticalScroll = this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && this.navigationMode == date_picker_manager.DateRangePickerNavigationMode.scroll;
      this.visibleDates = this.viewHeaderVisibleDates != null ? dart.nullCheck(this.viewHeaderVisibleDates).value : this.visibleDates;
      for (let j = 0; j < count; j = j + 1) {
        let currentViewIndex = dart.test(this.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(count, j) : j;
        let currentDate = null;
        let month = core.int.as(dart.dload(this.visibleDates[$_get](dart.notNull(currentViewIndex) * dart.notNull(datesCount) + (dart.notNull(datesCount) / 2)[$truncate]()), 'month'));
        let year = core.int.as(dart.dload(this.visibleDates[$_get](dart.notNull(currentViewIndex) * dart.notNull(datesCount) + (dart.notNull(datesCount) / 2)[$truncate]()), 'year'));
        let currentMonth = core.int.as(dart.dload(today, 'month'));
        let currentYear = core.int.as(dart.dload(today, 'year'));
        let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.monthViewSettings, this.isHijri);
        let isTodayMonth = core$.isDateWithInDateRange(this.visibleDates[$_get](dart.notNull(currentViewIndex) * dart.notNull(datesCount)), this.visibleDates[$_get]((dart.notNull(currentViewIndex) + 1) * dart.notNull(datesCount) - 1), today);
        let hasToday = isVerticalScroll || dart.notNull(numberOfWeeksInView) > 0 && dart.notNull(numberOfWeeksInView) < 6 || month == currentMonth && year == currentYear;
        for (let i = 0; i < 7; i = i + 1) {
          let index = dart.test(this.isRtl) ? picker_helper.DateRangePickerHelper.getRtlIndex(7, i) : i;
          index = dart.notNull(index) + dart.notNull(currentViewIndex) * dart.notNull(datesCount);
          currentDate = this.visibleDates[$_get](index);
          let dayText = dart.toString(new date_format.DateFormat.new(T.StringN().as(dart.dload(this.monthViewSettings, 'dayFormat')), dart.toString(this.locale)).format(core.DateTime.as(dart.test(this.isHijri) ? dart.dsend(currentDate, 'toDateTime', []) : currentDate)))[$toUpperCase]();
          dayText = this[_updateViewHeaderFormat](dayText);
          if (hasToday && dart.equals(dart.dload(currentDate, 'weekday'), dart.dload(today, 'weekday')) && (dart.test(isTodayMonth) || isVerticalScroll)) {
            let textColor = dart.dload(this.monthCellStyle, 'todayTextStyle') != null && dart.dload(dart.dload(this.monthCellStyle, 'todayTextStyle'), 'color') != null ? ui.Color.as(dart.nullCheck(dart.dload(dart.dload(this.monthCellStyle, 'todayTextStyle'), 'color'))) : (t73$ = this.todayHighlightColor, t73$ == null ? dart.nullCheck(this.datePickerTheme.todayHighlightColor) : t73$);
            dayTextStyle = viewHeaderDayStyle.copyWith({color: textColor});
          } else {
            dayTextStyle = viewHeaderDayStyle;
          }
          let dayTextSpan = new text_span.TextSpan.new({text: dayText, style: dayTextStyle});
          this[_textPainter$0].textScaleFactor = this.textScaleFactor;
          this[_textPainter$0].text = dayTextSpan;
          this[_textPainter$0].layout({minWidth: width, maxWidth: width});
          yPosition = (dart.notNull(this.viewHeaderHeight) - dart.notNull(this[_textPainter$0].height)) / 2;
          this[_textPainter$0].paint(canvas, new ui.Offset.new(dart.notNull(xPosition) + (width / 2 - dart.notNull(this[_textPainter$0].width) / 2), yPosition));
          xPosition = dart.notNull(xPosition) + width;
        }
        xPosition = dart.notNull(xPosition) + (dart.notNull(this.multiViewSpacing) + dart.notNull(weekNumberPanelWidth));
      }
    }
    [_updateViewHeaderFormat](dayText) {
      if (dayText == null) dart.nullFailed(I[10], 6445, 41, "dayText");
      if (dart.equals(dart.dload(this.monthViewSettings, 'dayFormat'), "EE") && this.locale.languageCode === "en") {
        dayText = dayText[$_get](0);
      }
      return dayText;
    }
    shouldRepaint(oldDelegate) {
      date_picker._PickerViewHeaderPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[10], 6461, 47, "oldDelegate");
      return !dart.equals(oldDelegate.visibleDates, this.visibleDates) || !dart.equals(oldDelegate.viewHeaderStyle, this.viewHeaderStyle) || oldDelegate.viewHeaderHeight != this.viewHeaderHeight || !dart.equals(oldDelegate.todayHighlightColor, this.todayHighlightColor) || !dart.equals(oldDelegate.monthViewSettings, this.monthViewSettings) || !dart.equals(oldDelegate.datePickerTheme, this.datePickerTheme) || oldDelegate.isRtl != this.isRtl || !dart.equals(oldDelegate.locale, this.locale) || oldDelegate.textScaleFactor != this.textScaleFactor || oldDelegate.isHijri != this.isHijri || oldDelegate.showWeekNumber != this.showWeekNumber;
    }
    [_getSemanticsBuilder$0](size) {
      if (size == null) dart.nullFailed(I[10], 6475, 58, "size");
      let semanticsBuilder = T.JSArrayOfCustomPainterSemantics().of([]);
      let left = null;
      let cellWidth = null;
      cellWidth = dart.notNull(size.width) / 7;
      let count = 1;
      let datesCount = this.visibleDates[$length];
      if (dart.test(this.enableMultiView) && this.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
        cellWidth = (dart.notNull(size.width) - dart.notNull(this.multiViewSpacing)) / 14;
        count = 2;
        datesCount = (dart.notNull(this.visibleDates[$length]) / 2)[$truncate]();
      }
      left = dart.test(this.isRtl) ? dart.notNull(size.width) - dart.notNull(cellWidth) : 0.0;
      for (let j = 0; j < count; j = j + 1) {
        for (let i = 0; i < 7; i = i + 1) {
          semanticsBuilder[$add](new custom_paint.CustomPainterSemantics.new({rect: new ui.Rect.fromLTWH(left, 0, cellWidth, size.height), properties: new semantics$.SemanticsProperties.new({label: dart.toString(new date_format.DateFormat.new("EEEEE").format(core.DateTime.as(dart.test(this.isHijri) ? dart.dsend(this.visibleDates[$_get](j * dart.notNull(datesCount) + i), 'toDateTime', []) : this.visibleDates[$_get](j * dart.notNull(datesCount) + i))))[$toUpperCase](), textDirection: ui.TextDirection.ltr})}));
          if (dart.test(this.isRtl)) {
            left = dart.notNull(left) - dart.notNull(cellWidth);
          } else {
            left = dart.notNull(left) + dart.notNull(cellWidth);
          }
        }
        if (dart.test(this.isRtl)) {
          left = dart.notNull(left) - dart.notNull(this.multiViewSpacing);
        } else {
          left = dart.notNull(left) + dart.notNull(this.multiViewSpacing);
        }
      }
      return semanticsBuilder;
    }
    get semanticsBuilder() {
      return dart.fn(size => {
        if (size == null) dart.nullFailed(I[10], 6528, 18, "size");
        return this[_getSemanticsBuilder$0](size);
      }, T.SizeToListOfCustomPainterSemantics());
    }
    shouldRebuildSemantics(oldDelegate) {
      date_picker._PickerViewHeaderPainter.as(oldDelegate);
      if (oldDelegate == null) dart.nullFailed(I[10], 6534, 56, "oldDelegate");
      return !dart.equals(oldDelegate.visibleDates, this.visibleDates);
    }
  };
  (date_picker._PickerViewHeaderPainter.new = function(visibleDates, navigationMode, viewHeaderStyle, viewHeaderHeight, monthViewSettings, datePickerTheme, locale, isRtl, monthCellStyle, enableMultiView, multiViewSpacing, todayHighlightColor, textScaleFactor, isHijri, navigationDirection, viewHeaderVisibleDates, showWeekNumber, isMobilePlatform) {
    if (visibleDates == null) dart.nullFailed(I[10], 6258, 12, "visibleDates");
    if (navigationMode == null) dart.nullFailed(I[10], 6259, 12, "navigationMode");
    if (viewHeaderStyle == null) dart.nullFailed(I[10], 6260, 12, "viewHeaderStyle");
    if (viewHeaderHeight == null) dart.nullFailed(I[10], 6261, 12, "viewHeaderHeight");
    if (datePickerTheme == null) dart.nullFailed(I[10], 6263, 12, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[10], 6264, 12, "locale");
    if (isRtl == null) dart.nullFailed(I[10], 6265, 12, "isRtl");
    if (enableMultiView == null) dart.nullFailed(I[10], 6267, 12, "enableMultiView");
    if (multiViewSpacing == null) dart.nullFailed(I[10], 6268, 12, "multiViewSpacing");
    if (textScaleFactor == null) dart.nullFailed(I[10], 6270, 12, "textScaleFactor");
    if (isHijri == null) dart.nullFailed(I[10], 6271, 12, "isHijri");
    if (navigationDirection == null) dart.nullFailed(I[10], 6272, 12, "navigationDirection");
    if (showWeekNumber == null) dart.nullFailed(I[10], 6274, 12, "showWeekNumber");
    if (isMobilePlatform == null) dart.nullFailed(I[10], 6275, 12, "isMobilePlatform");
    this[_textPainter$0] = new text_painter.TextPainter.new({textDirection: ui.TextDirection.ltr, textAlign: ui.TextAlign.left, textWidthBasis: text_painter.TextWidthBasis.longestLine});
    this.visibleDates = visibleDates;
    this.navigationMode = navigationMode;
    this.viewHeaderStyle = viewHeaderStyle;
    this.viewHeaderHeight = viewHeaderHeight;
    this.monthViewSettings = monthViewSettings;
    this.datePickerTheme = datePickerTheme;
    this.locale = locale;
    this.isRtl = isRtl;
    this.monthCellStyle = monthCellStyle;
    this.enableMultiView = enableMultiView;
    this.multiViewSpacing = multiViewSpacing;
    this.todayHighlightColor = todayHighlightColor;
    this.textScaleFactor = textScaleFactor;
    this.isHijri = isHijri;
    this.navigationDirection = navigationDirection;
    this.viewHeaderVisibleDates = viewHeaderVisibleDates;
    this.showWeekNumber = showWeekNumber;
    this.isMobilePlatform = isMobilePlatform;
    date_picker._PickerViewHeaderPainter.__proto__.new.call(this, {repaint: viewHeaderVisibleDates});
    ;
  }).prototype = date_picker._PickerViewHeaderPainter.prototype;
  dart.addTypeTests(date_picker._PickerViewHeaderPainter);
  dart.addTypeCaches(date_picker._PickerViewHeaderPainter);
  dart.setMethodSignature(date_picker._PickerViewHeaderPainter, () => ({
    __proto__: dart.getMethods(date_picker._PickerViewHeaderPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size]),
    [_updateViewHeaderFormat]: dart.fnType(core.String, [core.String]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_getSemanticsBuilder$0]: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])
  }));
  dart.setGetterSignature(date_picker._PickerViewHeaderPainter, () => ({
    __proto__: dart.getGetters(date_picker._PickerViewHeaderPainter.__proto__),
    semanticsBuilder: dart.fnType(core.List$(custom_paint.CustomPainterSemantics), [ui.Size])
  }));
  dart.setLibraryUri(date_picker._PickerViewHeaderPainter, I[11]);
  dart.setFieldSignature(date_picker._PickerViewHeaderPainter, () => ({
    __proto__: dart.getFields(date_picker._PickerViewHeaderPainter.__proto__),
    viewHeaderStyle: dart.finalFieldType(date_picker_manager.DateRangePickerViewHeaderStyle),
    monthViewSettings: dart.finalFieldType(dart.dynamic),
    navigationMode: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationMode),
    visibleDates: dart.fieldType(core.List),
    viewHeaderHeight: dart.finalFieldType(core.double),
    monthCellStyle: dart.finalFieldType(dart.dynamic),
    locale: dart.finalFieldType(ui.Locale),
    isRtl: dart.finalFieldType(core.bool),
    todayHighlightColor: dart.finalFieldType(dart.nullable(ui.Color)),
    enableMultiView: dart.finalFieldType(core.bool),
    multiViewSpacing: dart.finalFieldType(core.double),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    isHijri: dart.finalFieldType(core.bool),
    textScaleFactor: dart.finalFieldType(core.double),
    navigationDirection: dart.finalFieldType(date_picker_manager.DateRangePickerNavigationDirection),
    [_textPainter$0]: dart.finalFieldType(text_painter.TextPainter),
    viewHeaderVisibleDates: dart.finalFieldType(dart.nullable(change_notifier.ValueNotifier$(core.List))),
    showWeekNumber: dart.finalFieldType(core.bool),
    isMobilePlatform: dart.finalFieldType(core.bool)
  }));
  var picker$ = dart.privateName(date_picker, "_PickerScrollView.picker");
  var width$2 = dart.privateName(date_picker, "_PickerScrollView.width");
  var height$2 = dart.privateName(date_picker, "_PickerScrollView.height");
  var isRtl$2 = dart.privateName(date_picker, "_PickerScrollView.isRtl");
  var getPickerStateValues$ = dart.privateName(date_picker, "_PickerScrollView.getPickerStateValues");
  var updatePickerStateValues$ = dart.privateName(date_picker, "_PickerScrollView.updatePickerStateValues");
  var controller$2 = dart.privateName(date_picker, "_PickerScrollView.controller");
  var datePickerTheme$2 = dart.privateName(date_picker, "_PickerScrollView.datePickerTheme");
  var locale$1 = dart.privateName(date_picker, "_PickerScrollView.locale");
  var textScaleFactor$2 = dart.privateName(date_picker, "_PickerScrollView.textScaleFactor");
  date_picker._PickerScrollView = class _PickerScrollView extends framework.StatefulWidget {
    get picker() {
      return this[picker$];
    }
    set picker(value) {
      super.picker = value;
    }
    get width() {
      return this[width$2];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$2];
    }
    set height(value) {
      super.height = value;
    }
    get isRtl() {
      return this[isRtl$2];
    }
    set isRtl(value) {
      super.isRtl = value;
    }
    get getPickerStateValues() {
      return this[getPickerStateValues$];
    }
    set getPickerStateValues(value) {
      super.getPickerStateValues = value;
    }
    get updatePickerStateValues() {
      return this[updatePickerStateValues$];
    }
    set updatePickerStateValues(value) {
      super.updatePickerStateValues = value;
    }
    get controller() {
      return this[controller$2];
    }
    set controller(value) {
      super.controller = value;
    }
    get datePickerTheme() {
      return this[datePickerTheme$2];
    }
    set datePickerTheme(value) {
      super.datePickerTheme = value;
    }
    get locale() {
      return this[locale$1];
    }
    set locale(value) {
      super.locale = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$2];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    createState() {
      return new date_picker._PickerScrollViewState.new();
    }
  };
  (date_picker._PickerScrollView.new = function(picker, controller, width, height, isRtl, datePickerTheme, locale, textScaleFactor, opts) {
    if (picker == null) dart.nullFailed(I[10], 6544, 32, "picker");
    if (width == null) dart.nullFailed(I[10], 6544, 62, "width");
    if (height == null) dart.nullFailed(I[10], 6544, 74, "height");
    if (isRtl == null) dart.nullFailed(I[10], 6545, 12, "isRtl");
    if (datePickerTheme == null) dart.nullFailed(I[10], 6545, 24, "datePickerTheme");
    if (locale == null) dart.nullFailed(I[10], 6545, 46, "locale");
    if (textScaleFactor == null) dart.nullFailed(I[10], 6545, 59, "textScaleFactor");
    let key = opts && 'key' in opts ? opts.key : null;
    let getPickerStateValues = opts && 'getPickerStateValues' in opts ? opts.getPickerStateValues : null;
    if (getPickerStateValues == null) dart.nullFailed(I[10], 6547, 21, "getPickerStateValues");
    let updatePickerStateValues = opts && 'updatePickerStateValues' in opts ? opts.updatePickerStateValues : null;
    if (updatePickerStateValues == null) dart.nullFailed(I[10], 6548, 21, "updatePickerStateValues");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[picker$] = picker;
    this[controller$2] = controller;
    this[width$2] = width;
    this[height$2] = height;
    this[isRtl$2] = isRtl;
    this[datePickerTheme$2] = datePickerTheme;
    this[locale$1] = locale;
    this[textScaleFactor$2] = textScaleFactor;
    this[getPickerStateValues$] = getPickerStateValues;
    this[updatePickerStateValues$] = updatePickerStateValues;
    date_picker._PickerScrollView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker._PickerScrollView.prototype;
  dart.addTypeTests(date_picker._PickerScrollView);
  dart.addTypeCaches(date_picker._PickerScrollView);
  dart.setMethodSignature(date_picker._PickerScrollView, () => ({
    __proto__: dart.getMethods(date_picker._PickerScrollView.__proto__),
    createState: dart.fnType(date_picker._PickerScrollViewState, [])
  }));
  dart.setLibraryUri(date_picker._PickerScrollView, I[11]);
  dart.setFieldSignature(date_picker._PickerScrollView, () => ({
    __proto__: dart.getFields(date_picker._PickerScrollView.__proto__),
    picker: dart.finalFieldType(date_picker._SfDateRangePicker),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    isRtl: dart.finalFieldType(core.bool),
    getPickerStateValues: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    updatePickerStateValues: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    controller: dart.finalFieldType(dart.dynamic),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    locale: dart.finalFieldType(ui.Locale),
    textScaleFactor: dart.finalFieldType(core.double)
  }));
  var _currentView = dart.privateName(date_picker, "_currentView");
  var _nextView = dart.privateName(date_picker, "_nextView");
  var _previousView = dart.privateName(date_picker, "_previousView");
  var _currentChildIndex = dart.privateName(date_picker, "_currentChildIndex");
  var _scrollStartPosition = dart.privateName(date_picker, "_scrollStartPosition");
  var ___PickerScrollViewState__animationController = dart.privateName(date_picker, "_#_PickerScrollViewState#_animationController");
  var ___PickerScrollViewState__animation = dart.privateName(date_picker, "_#_PickerScrollViewState#_animation");
  var ___PickerScrollViewState__tween = dart.privateName(date_picker, "_#_PickerScrollViewState#_tween");
  var ___PickerScrollViewState__visibleDates = dart.privateName(date_picker, "_#_PickerScrollViewState#_visibleDates");
  var ___PickerScrollViewState__previousViewVisibleDates = dart.privateName(date_picker, "_#_PickerScrollViewState#_previousViewVisibleDates");
  var ___PickerScrollViewState__nextViewVisibleDates = dart.privateName(date_picker, "_#_PickerScrollViewState#_nextViewVisibleDates");
  var ___PickerScrollViewState__currentViewVisibleDates = dart.privateName(date_picker, "_#_PickerScrollViewState#_currentViewVisibleDates");
  var _previousViewKey = dart.privateName(date_picker, "_previousViewKey");
  var _currentViewKey = dart.privateName(date_picker, "_currentViewKey");
  var _nextViewKey = dart.privateName(date_picker, "_nextViewKey");
  var _pickerStateDetails$0 = dart.privateName(date_picker, "_pickerStateDetails");
  var _focusNode = dart.privateName(date_picker, "_focusNode");
  var _animationController = dart.privateName(date_picker, "_animationController");
  var _animation = dart.privateName(date_picker, "_animation");
  var _tween = dart.privateName(date_picker, "_tween");
  var _visibleDates = dart.privateName(date_picker, "_visibleDates");
  var _previousViewVisibleDates = dart.privateName(date_picker, "_previousViewVisibleDates");
  var _nextViewVisibleDates = dart.privateName(date_picker, "_nextViewVisibleDates");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _animationListener = dart.privateName(date_picker, "_animationListener");
  var _updateSettings = dart.privateName(date_picker, "_updateSettings");
  var _drawSelection = dart.privateName(date_picker, "_drawSelection");
  var _onKeyDown = dart.privateName(date_picker, "_onKeyDown");
  var _addViews = dart.privateName(date_picker, "_addViews");
  var _onHorizontalStart = dart.privateName(date_picker, "_onHorizontalStart");
  var _onHorizontalUpdate = dart.privateName(date_picker, "_onHorizontalUpdate");
  var _onHorizontalEnd = dart.privateName(date_picker, "_onHorizontalEnd");
  var _onVerticalStart = dart.privateName(date_picker, "_onVerticalStart");
  var _onVerticalUpdate = dart.privateName(date_picker, "_onVerticalUpdate");
  var _onVerticalEnd = dart.privateName(date_picker, "_onVerticalEnd");
  var _updateVisibleDatesForMultiView = dart.privateName(date_picker, "_updateVisibleDatesForMultiView");
  var _updateSelection$0 = dart.privateName(date_picker, "_updateSelection");
  var _updateNextView = dart.privateName(date_picker, "_updateNextView");
  var _updateCurrentViewVisibleDates = dart.privateName(date_picker, "_updateCurrentViewVisibleDates");
  var _updatePreviousView = dart.privateName(date_picker, "_updatePreviousView");
  var _updateNextVisibleDateForMultiView = dart.privateName(date_picker, "_updateNextVisibleDateForMultiView");
  var _updateNextViewVisibleDates = dart.privateName(date_picker, "_updateNextViewVisibleDates");
  var _updatePreviousDatesForMultiView = dart.privateName(date_picker, "_updatePreviousDatesForMultiView");
  var _updatePreviousViewVisibleDates = dart.privateName(date_picker, "_updatePreviousViewVisibleDates");
  var _getPickerViewStateDetails = dart.privateName(date_picker, "_getPickerViewStateDetails");
  var _updatePickerViewStateDetails = dart.privateName(date_picker, "_updatePickerViewStateDetails");
  var _getView = dart.privateName(date_picker, "_getView");
  var _updateViews = dart.privateName(date_picker, "_updateViews");
  var _drawYearSelection = dart.privateName(date_picker, "_drawYearSelection");
  var _drawMonthSelection = dart.privateName(date_picker, "_drawMonthSelection");
  var _getCurrentViewState = dart.privateName(date_picker, "_getCurrentViewState");
  var _monthView = dart.privateName(date_picker, "_monthView");
  var _yearView = dart.privateName(date_picker, "_yearView");
  var _lastSelectedDate = dart.privateName(date_picker, "_lastSelectedDate");
  var _resetPosition = dart.privateName(date_picker, "_resetPosition");
  var _updateNextYearSelectionDate = dart.privateName(date_picker, "_updateNextYearSelectionDate");
  var _updatePreviousYearSelectionDate = dart.privateName(date_picker, "_updatePreviousYearSelectionDate");
  var _getYearSelectedDate = dart.privateName(date_picker, "_getYearSelectedDate");
  var _switchViewsByKeyBoardEvent = dart.privateName(date_picker, "_switchViewsByKeyBoardEvent");
  var _updateYearSelectionByKeyBoardNavigation = dart.privateName(date_picker, "_updateYearSelectionByKeyBoardNavigation");
  var _updateRangeSelectionByKeyboardNavigation = dart.privateName(date_picker, "_updateRangeSelectionByKeyboardNavigation");
  var _updateSelectionByKeyboardNavigation = dart.privateName(date_picker, "_updateSelectionByKeyboardNavigation");
  var _updateSelectedDate = dart.privateName(date_picker, "_updateSelectedDate");
  var _updateSingleSelectionByKeyBoardKeys = dart.privateName(date_picker, "_updateSingleSelectionByKeyBoardKeys");
  var _updateMultiAndRangeSelectionByKeyBoard = dart.privateName(date_picker, "_updateMultiAndRangeSelectionByKeyBoard");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(date_picker._PickerScrollView) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(date_picker._PickerScrollView)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(date_picker._PickerScrollView));
  date_picker._PickerScrollViewState = class _PickerScrollViewState extends State_TickerProviderStateMixin$36 {
    get [_animationController]() {
      let t73;
      t73 = this[___PickerScrollViewState__animationController];
      return t73 == null ? dart.throw(new _internal.LateError.fieldNI("_animationController")) : t73;
    }
    set [_animationController](t73) {
      if (t73 == null) dart.nullFailed(I[10], 6605, 28, "null");
      this[___PickerScrollViewState__animationController] = t73;
    }
    get [_animation]() {
      let t74;
      t74 = this[___PickerScrollViewState__animation];
      return t74 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t74;
    }
    set [_animation](t74) {
      if (t74 == null) dart.nullFailed(I[10], 6608, 26, "null");
      this[___PickerScrollViewState__animation] = t74;
    }
    get [_tween]() {
      let t75;
      t75 = this[___PickerScrollViewState__tween];
      return t75 == null ? dart.throw(new _internal.LateError.fieldNI("_tween")) : t75;
    }
    set [_tween](t75) {
      if (t75 == null) dart.nullFailed(I[10], 6611, 22, "null");
      this[___PickerScrollViewState__tween] = t75;
    }
    get [_visibleDates]() {
      let t76;
      t76 = this[___PickerScrollViewState__visibleDates];
      return t76 == null ? dart.throw(new _internal.LateError.fieldNI("_visibleDates")) : t76;
    }
    set [_visibleDates](t76) {
      if (t76 == null) dart.nullFailed(I[10], 6616, 22, "null");
      this[___PickerScrollViewState__visibleDates] = t76;
    }
    get [_previousViewVisibleDates]() {
      let t77;
      t77 = this[___PickerScrollViewState__previousViewVisibleDates];
      return t77 == null ? dart.throw(new _internal.LateError.fieldNI("_previousViewVisibleDates")) : t77;
    }
    set [_previousViewVisibleDates](t77) {
      if (t77 == null) dart.nullFailed(I[10], 6617, 7, "null");
      this[___PickerScrollViewState__previousViewVisibleDates] = t77;
    }
    get [_nextViewVisibleDates]() {
      let t78;
      t78 = this[___PickerScrollViewState__nextViewVisibleDates];
      return t78 == null ? dart.throw(new _internal.LateError.fieldNI("_nextViewVisibleDates")) : t78;
    }
    set [_nextViewVisibleDates](t78) {
      if (t78 == null) dart.nullFailed(I[10], 6618, 7, "null");
      this[___PickerScrollViewState__nextViewVisibleDates] = t78;
    }
    get [_currentViewVisibleDates]() {
      let t79;
      t79 = this[___PickerScrollViewState__currentViewVisibleDates];
      return t79 == null ? dart.throw(new _internal.LateError.fieldNI("_currentViewVisibleDates")) : t79;
    }
    set [_currentViewVisibleDates](t79) {
      if (t79 == null) dart.nullFailed(I[10], 6619, 7, "null");
      this[___PickerScrollViewState__currentViewVisibleDates] = t79;
    }
    initState() {
      let t80;
      this[_updateVisibleDates]();
      this[_animationController] = new animation_controller.AnimationController.new({duration: C[828] || CT.C828, vsync: this, animationBehavior: animation_controller.AnimationBehavior.normal});
      this[_tween] = new (T.TweenOfdouble()).new({begin: 0.0, end: 0.1});
      this[_animation] = (t80 = this[_tween].animate(this[_animationController]), (() => {
        t80.addListener(dart.bind(this, _animationListener));
        return t80;
      })());
      super.initState();
    }
    didUpdateWidget(oldWidget) {
      let t81, t80, t81$, t80$, t80$0, t80$1, t80$2, t81$0, t80$3;
      date_picker._PickerScrollView.as(oldWidget);
      if (oldWidget == null) dart.nullFailed(I[10], 6646, 42, "oldWidget");
      if (this.widget.picker.navigationDirection != oldWidget.picker.navigationDirection || this.widget.width != oldWidget.width || !dart.equals(this.widget.picker.cellBuilder, oldWidget.picker.cellBuilder) || !dart.equals(oldWidget.datePickerTheme, this.widget.datePickerTheme) || this.widget.picker.viewSpacing != oldWidget.picker.viewSpacing || this.widget.picker.selectionMode != oldWidget.picker.selectionMode || this.widget.height != oldWidget.height) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (oldWidget.textScaleFactor != this.widget.textScaleFactor || oldWidget.picker.isHijri != this.widget.picker.isHijri) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (!dart.equals(oldWidget.picker.controller, this.widget.picker.controller)) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
        this[_updateVisibleDates]();
      }
      if (this.widget.isRtl != oldWidget.isRtl || this.widget.picker.enableMultiView != oldWidget.picker.enableMultiView) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
        this[_updateVisibleDates]();
      }
      this[_updateSettings](oldWidget);
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.year && this.widget.picker.monthFormat != oldWidget.picker.monthFormat) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (pickerView != date_picker_manager.DateRangePickerView.month && !dart.equals(this.widget.picker.yearCellStyle, oldWidget.picker.yearCellStyle)) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (!dart.equals(this.widget.picker.minDate, oldWidget.picker.minDate) || !dart.equals(this.widget.picker.maxDate, oldWidget.picker.maxDate)) {
        let previousVisibleDate = this[_pickerStateDetails$0].currentDate;
        t80 = this.widget;
        t81 = this[_pickerStateDetails$0];
        t80.getPickerStateValues(t81);
        if (!dart.test(core$.isSameDate(this[_pickerStateDetails$0].currentDate, previousVisibleDate))) {
          this[_updateVisibleDates]();
        }
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (this.widget.picker.enablePastDates != oldWidget.picker.enablePastDates) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (pickerView == date_picker_manager.DateRangePickerView.month && (!dart.equals(dart.dload(oldWidget.picker.monthViewSettings, 'viewHeaderStyle'), dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderStyle')) || !dart.equals(dart.dload(oldWidget.picker.monthViewSettings, 'viewHeaderHeight'), dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight')) || picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri) != picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(oldWidget.picker.monthViewSettings, oldWidget.picker.isHijri))) {
        this[_children$0][$clear]();
        this[_position] = 0.0;
      }
      if (picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri) != picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(oldWidget.picker.monthViewSettings, oldWidget.picker.isHijri) || !dart.equals(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek'), dart.dload(oldWidget.picker.monthViewSettings, 'firstDayOfWeek'))) {
        this[_updateVisibleDates]();
        this[_position] = 0.0;
      }
      if (oldWidget.picker.allowViewNavigation != this.widget.picker.allowViewNavigation && pickerView != date_picker_manager.DateRangePickerView.month) {
        this[_position] = 0.0;
        this[_children$0][$clear]();
      }
      if (!dart.equals(oldWidget.picker.controller, this.widget.picker.controller) || this.widget.picker.controller == null) {
        t80$ = this.widget;
        t81$ = this[_pickerStateDetails$0];
        t80$.getPickerStateValues(t81$);
        super.didUpdateWidget(oldWidget);
        return;
      }
      if (!dart.equals((t80$0 = oldWidget.picker.controller, t80$0 == null ? null : dart.dload(t80$0, 'displayDate')), (t80$1 = this.widget.picker.controller, t80$1 == null ? null : dart.dload(t80$1, 'displayDate'))) || !dart.test(core$.isSameDate(this[_pickerStateDetails$0].currentDate, dart.dload(this.widget.controller, 'displayDate')))) {
        this[_pickerStateDetails$0].currentDate = (t80$2 = this.widget.picker.controller, t80$2 == null ? null : dart.dload(t80$2, 'displayDate'));
        this[_updateVisibleDates]();
      }
      this[_drawSelection](oldWidget.picker.controller, this.widget.picker.controller);
      t80$3 = this.widget;
      t81$0 = this[_pickerStateDetails$0];
      t80$3.getPickerStateValues(t81$0);
      super.didUpdateWidget(oldWidget);
    }
    build(context) {
      if (context == null) dart.nullFailed(I[10], 6768, 29, "context");
      let leftPosition = 0.0;
      let rightPosition = 0.0;
      let topPosition = 0.0;
      let bottomPosition = 0.0;
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          {
            leftPosition = -dart.notNull(this.widget.width);
            rightPosition = -dart.notNull(this.widget.width);
          }
          break;
        }
        case C[359] || CT.C359:
        {
          {
            topPosition = -dart.notNull(this.widget.height);
            bottomPosition = -dart.notNull(this.widget.height);
          }
        }
      }
      return new basic.Stack.new({children: T.JSArrayOfWidget().of([new basic.Positioned.new({left: leftPosition, right: rightPosition, bottom: bottomPosition, top: topPosition, child: new gesture_detector.GestureDetector.new({child: new focus_scope.FocusScope.new({node: this[_focusNode], onKey: dart.bind(this, _onKeyDown), child: new core_internal.CustomScrollViewerLayout.new(this[_addViews](context), this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? core_internal.CustomScrollDirection.horizontal : core_internal.CustomScrollDirection.vertical, this[_position], this[_currentChildIndex], {$creationLocationd_0dea112b090073317d4: C[829] || CT.C829}), $creationLocationd_0dea112b090073317d4: C[835] || CT.C835}), onHorizontalDragStart: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onHorizontalStart) : null, onHorizontalDragUpdate: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onHorizontalUpdate) : null, onHorizontalDragEnd: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onHorizontalEnd) : null, onVerticalDragStart: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onVerticalStart) : null, onVerticalDragUpdate: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onVerticalUpdate) : null, onVerticalDragEnd: this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.none ? dart.bind(this, _onVerticalEnd) : null, $creationLocationd_0dea112b090073317d4: C[840] || CT.C840}), $creationLocationd_0dea112b090073317d4: C[849] || CT.C849})]), $creationLocationd_0dea112b090073317d4: C[856] || CT.C856});
    }
    dispose() {
      this[_animationController].dispose();
      this[_animation].removeListener(dart.bind(this, _animationListener));
      this[_focusNode].dispose();
      super.dispose();
    }
    [_updateVisibleDates]() {
      let t81, t80, t81$, t80$;
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateValues(t81);
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let currentDate = this[_pickerStateDetails$0].currentDate;
      let prevDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view')), numberOfWeeksInView, this[_pickerStateDetails$0].currentDate, this.widget.isRtl, this.widget.picker.isHijri);
      let nextDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view')), numberOfWeeksInView, this[_pickerStateDetails$0].currentDate, this.widget.isRtl, this.widget.picker.isHijri);
      let afterNextViewDate = null;
      let afterVisibleDates = null;
      if (dart.test(this.widget.picker.enableMultiView)) {
        afterNextViewDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view')), numberOfWeeksInView, dart.test(this.widget.isRtl) ? prevDate : nextDate, false, this.widget.picker.isHijri);
      }
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            this[_visibleDates] = core$.getVisibleDates(currentDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            this[_previousViewVisibleDates] = core$.getVisibleDates(prevDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            this[_nextViewVisibleDates] = core$.getVisibleDates(nextDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            if (dart.test(this.widget.picker.enableMultiView)) {
              afterVisibleDates = core$.getVisibleDates(afterNextViewDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            }
          }
          break;
        }
        case C[369] || CT.C369:
        case C[368] || CT.C368:
        case C[370] || CT.C370:
        {
          {
            this[_visibleDates] = picker_helper.DateRangePickerHelper.getVisibleYearDates(currentDate, view, this.widget.picker.isHijri);
            this[_previousViewVisibleDates] = picker_helper.DateRangePickerHelper.getVisibleYearDates(prevDate, view, this.widget.picker.isHijri);
            this[_nextViewVisibleDates] = picker_helper.DateRangePickerHelper.getVisibleYearDates(nextDate, view, this.widget.picker.isHijri);
            if (dart.test(this.widget.picker.enableMultiView)) {
              afterVisibleDates = picker_helper.DateRangePickerHelper.getVisibleYearDates(afterNextViewDate, view, this.widget.picker.isHijri);
            }
          }
        }
      }
      if (dart.test(this.widget.picker.enableMultiView)) {
        this[_updateVisibleDatesForMultiView](dart.nullCheck(afterVisibleDates));
      }
      this[_currentViewVisibleDates] = this[_visibleDates];
      this[_pickerStateDetails$0].currentViewVisibleDates = this[_currentViewVisibleDates];
      t80$ = this.widget;
      t81$ = this[_pickerStateDetails$0];
      t80$.updatePickerStateValues(t81$);
      if (this[_currentChildIndex] === 0) {
        this[_visibleDates] = this[_nextViewVisibleDates];
        this[_nextViewVisibleDates] = this[_previousViewVisibleDates];
        this[_previousViewVisibleDates] = this[_currentViewVisibleDates];
      } else if (this[_currentChildIndex] === 1) {
        this[_visibleDates] = this[_currentViewVisibleDates];
      } else if (this[_currentChildIndex] === 2) {
        this[_visibleDates] = this[_previousViewVisibleDates];
        this[_previousViewVisibleDates] = this[_nextViewVisibleDates];
        this[_nextViewVisibleDates] = this[_currentViewVisibleDates];
      }
    }
    [_moveToNextViewWithAnimation]() {
      if (dart.test(this[_animationController].isCompleted) || dart.test(this[_animationController].isDismissed)) {
        this[_animationController].reset();
      } else {
        return;
      }
      this[_updateSelection$0]();
      if (this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        this[_tween].begin = 0.0;
        this[_tween].end = -dart.notNull(this.widget.height);
      } else {
        this[_tween].begin = 0.0;
        this[_tween].end = -dart.notNull(this.widget.width);
      }
      this[_animationController].duration = C[859] || CT.C859;
      this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updateNextView](), T.dynamicTovoid()));
      this[_updateCurrentViewVisibleDates]({isNextView: true});
    }
    [_moveToPreviousViewWithAnimation]() {
      if (dart.test(this[_animationController].isCompleted) || dart.test(this[_animationController].isDismissed)) {
        this[_animationController].reset();
      } else {
        return;
      }
      this[_updateSelection$0]();
      if (this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        this[_tween].begin = 0.0;
        this[_tween].end = this.widget.height;
      } else {
        this[_tween].begin = 0.0;
        this[_tween].end = this.widget.width;
      }
      this[_animationController].duration = C[859] || CT.C859;
      this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updatePreviousView](), T.dynamicTovoid()));
      this[_updateCurrentViewVisibleDates]();
    }
    [_updateVisibleDatesForMultiView](afterVisibleDates) {
      if (afterVisibleDates == null) dart.nullFailed(I[10], 7023, 54, "afterVisibleDates");
      if (dart.test(this.widget.isRtl)) {
        for (let i = 0; i < dart.notNull(this[_visibleDates][$length]); i = i + 1) {
          this[_nextViewVisibleDates][$add](this[_visibleDates][$_get](i));
        }
        for (let i = 0; i < dart.notNull(this[_previousViewVisibleDates][$length]); i = i + 1) {
          this[_visibleDates][$add](this[_previousViewVisibleDates][$_get](i));
        }
        for (let i = 0; i < dart.notNull(afterVisibleDates[$length]); i = i + 1) {
          this[_previousViewVisibleDates][$add](afterVisibleDates[$_get](i));
        }
      } else {
        for (let i = 0; i < dart.notNull(this[_visibleDates][$length]); i = i + 1) {
          this[_previousViewVisibleDates][$add](this[_visibleDates][$_get](i));
        }
        for (let i = 0; i < dart.notNull(this[_nextViewVisibleDates][$length]); i = i + 1) {
          this[_visibleDates][$add](this[_nextViewVisibleDates][$_get](i));
        }
        for (let i = 0; i < dart.notNull(afterVisibleDates[$length]); i = i + 1) {
          this[_nextViewVisibleDates][$add](afterVisibleDates[$_get](i));
        }
      }
    }
    [_updateNextViewVisibleDates]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let currentViewDate = this[_currentViewVisibleDates][$_get](0);
      if (pickerView == date_picker_manager.DateRangePickerView.month && (numberOfWeeksInView === 6 || dart.test(this.widget.picker.isHijri)) || pickerView == date_picker_manager.DateRangePickerView.year || pickerView == date_picker_manager.DateRangePickerView.decade || pickerView == date_picker_manager.DateRangePickerView.century) {
        currentViewDate = this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(this.widget.picker.enableMultiView) ? 4 : 2))[$truncate]());
      }
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      currentViewDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(view, numberOfWeeksInView, currentViewDate, this.widget.isRtl, this.widget.picker.isHijri);
      let afterVisibleDates = null;
      let afterNextViewDate = null;
      if (dart.test(this.widget.picker.enableMultiView) && !dart.test(this.widget.isRtl)) {
        afterNextViewDate = picker_helper.DateRangePickerHelper.getNextViewStartDate(view, numberOfWeeksInView, currentViewDate, this.widget.isRtl, this.widget.picker.isHijri);
      }
      let dates = null;
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            dates = core$.getVisibleDates(currentViewDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            if (dart.test(this.widget.picker.enableMultiView) && !dart.test(this.widget.isRtl)) {
              afterVisibleDates = core$.getVisibleDates(afterNextViewDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            dates = picker_helper.DateRangePickerHelper.getVisibleYearDates(currentViewDate, view, this.widget.picker.isHijri);
            if (dart.test(this.widget.picker.enableMultiView) && !dart.test(this.widget.isRtl)) {
              afterVisibleDates = picker_helper.DateRangePickerHelper.getVisibleYearDates(afterNextViewDate, view, this.widget.picker.isHijri);
            }
          }
        }
      }
      if (dart.test(this.widget.picker.enableMultiView)) {
        dates[$addAll](this[_updateNextVisibleDateForMultiView](afterVisibleDates));
      }
      if (this[_currentChildIndex] === 0) {
        this[_nextViewVisibleDates] = dates;
      } else if (this[_currentChildIndex] === 1) {
        this[_previousViewVisibleDates] = dates;
      } else {
        this[_visibleDates] = dates;
      }
    }
    [_updateNextVisibleDateForMultiView](afterVisibleDates) {
      let dates = null;
      if (dart.test(this.widget.picker.isHijri)) {
        dates = T.JSArrayOfHijriDateTime().of([]);
      } else {
        dates = T.JSArrayOfDateTime().of([]);
      }
      if (!dart.test(this.widget.isRtl)) {
        for (let i = 0; i < dart.notNull(dart.nullCheck(afterVisibleDates)[$length]); i = i + 1) {
          dates[$add](afterVisibleDates[$_get](i));
        }
      } else {
        for (let i = 0; i < (dart.notNull(this[_currentViewVisibleDates][$length]) / 2)[$truncate](); i = i + 1) {
          dates[$add](this[_currentViewVisibleDates][$_get](i));
        }
      }
      return dates;
    }
    [_updatePreviousViewVisibleDates]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let currentViewDate = this[_currentViewVisibleDates][$_get](0);
      if (pickerView == date_picker_manager.DateRangePickerView.month && (numberOfWeeksInView === 6 || dart.test(this.widget.picker.isHijri)) || pickerView == date_picker_manager.DateRangePickerView.year || pickerView == date_picker_manager.DateRangePickerView.decade || pickerView == date_picker_manager.DateRangePickerView.century) {
        currentViewDate = this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(this.widget.picker.enableMultiView) ? 4 : 2))[$truncate]());
      }
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      currentViewDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(view, numberOfWeeksInView, currentViewDate, this.widget.isRtl, this.widget.picker.isHijri);
      let dates = null;
      let afterVisibleDates = null;
      let afterNextViewDate = null;
      if (dart.test(this.widget.picker.enableMultiView) && dart.test(this.widget.isRtl)) {
        afterNextViewDate = picker_helper.DateRangePickerHelper.getPreviousViewStartDate(view, numberOfWeeksInView, currentViewDate, this.widget.isRtl, this.widget.picker.isHijri);
      }
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            dates = core$.getVisibleDates(currentViewDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            if (dart.test(this.widget.picker.enableMultiView) && dart.test(this.widget.isRtl)) {
              afterVisibleDates = core$.getVisibleDates(afterNextViewDate, null, core.int.as(dart.dload(this.widget.picker.monthViewSettings, 'firstDayOfWeek')), picker_helper.DateRangePickerHelper.getViewDatesCount(view, numberOfWeeksInView, this.widget.picker.isHijri));
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            dates = picker_helper.DateRangePickerHelper.getVisibleYearDates(currentViewDate, view, this.widget.picker.isHijri);
            if (dart.test(this.widget.picker.enableMultiView) && dart.test(this.widget.isRtl)) {
              afterVisibleDates = picker_helper.DateRangePickerHelper.getVisibleYearDates(afterNextViewDate, view, this.widget.picker.isHijri);
            }
          }
        }
      }
      if (dart.test(this.widget.picker.enableMultiView)) {
        dates[$addAll](this[_updatePreviousDatesForMultiView](afterVisibleDates));
      }
      if (this[_currentChildIndex] === 0) {
        this[_visibleDates] = dates;
      } else if (this[_currentChildIndex] === 1) {
        this[_nextViewVisibleDates] = dates;
      } else {
        this[_previousViewVisibleDates] = dates;
      }
    }
    [_updatePreviousDatesForMultiView](afterVisibleDates) {
      let dates = null;
      if (dart.test(this.widget.picker.isHijri)) {
        dates = T.JSArrayOfHijriDateTime().of([]);
      } else {
        dates = T.JSArrayOfDateTime().of([]);
      }
      if (dart.test(this.widget.isRtl)) {
        for (let i = 0; i < dart.notNull(dart.nullCheck(afterVisibleDates)[$length]); i = i + 1) {
          dates[$add](afterVisibleDates[$_get](i));
        }
      } else {
        for (let i = 0; i < dart.notNull(this[_currentViewVisibleDates][$length]) / 2; i = i + 1) {
          dates[$add](this[_currentViewVisibleDates][$_get](i));
        }
      }
      return dates;
    }
    [_getPickerViewStateDetails](details) {
      if (details == null) dart.nullFailed(I[10], 7259, 51, "details");
      details.currentViewVisibleDates = this[_currentViewVisibleDates];
      details.currentDate = this[_pickerStateDetails$0].currentDate;
      details.selectedDate = this[_pickerStateDetails$0].selectedDate;
      details.selectedDates = this[_pickerStateDetails$0].selectedDates;
      details.selectedRange = this[_pickerStateDetails$0].selectedRange;
      details.selectedRanges = this[_pickerStateDetails$0].selectedRanges;
      details.view = this[_pickerStateDetails$0].view;
    }
    [_updatePickerViewStateDetails](details) {
      let t81, t80;
      if (details == null) dart.nullFailed(I[10], 7269, 54, "details");
      this[_pickerStateDetails$0].currentDate = details.currentDate;
      this[_pickerStateDetails$0].selectedDate = details.selectedDate;
      this[_pickerStateDetails$0].selectedDates = details.selectedDates;
      this[_pickerStateDetails$0].selectedRange = details.selectedRange;
      this[_pickerStateDetails$0].selectedRanges = details.selectedRanges;
      this[_pickerStateDetails$0].view = details.view;
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.updatePickerStateValues(t81);
    }
    [_getView](dates, key) {
      if (dates == null) dart.nullFailed(I[10], 7279, 38, "dates");
      if (key == null) dart.nullFailed(I[10], 7279, 49, "key");
      return new date_picker._PickerView.new(this.widget.picker, this.widget.controller, dates, date_picker._isMultiViewEnabled(this.widget.picker), this.widget.width, this.widget.height, this.widget.datePickerTheme, this[_focusNode], this.widget.textScaleFactor, {key: key, getPickerStateDetails: dart.fn(details => {
          if (details == null) dart.nullFailed(I[10], 7291, 47, "details");
          this[_getPickerViewStateDetails](details);
        }, T.PickerStateArgsTovoid()), updatePickerStateDetails: dart.fn(details => {
          if (details == null) dart.nullFailed(I[10], 7294, 50, "details");
          this[_updatePickerViewStateDetails](details);
        }, T.PickerStateArgsTovoid()), isRtl: this.widget.isRtl, $creationLocationd_0dea112b090073317d4: C[860] || CT.C860});
    }
    [_addViews](context) {
      if (context == null) dart.nullFailed(I[10], 7301, 39, "context");
      if (dart.test(this[_children$0][$isEmpty])) {
        this[_previousView] = this[_getView](this[_previousViewVisibleDates], this[_previousViewKey]);
        this[_currentView] = this[_getView](this[_visibleDates], this[_currentViewKey]);
        this[_nextView] = this[_getView](this[_nextViewVisibleDates], this[_nextViewKey]);
        this[_children$0][$add](dart.nullCheck(this[_previousView]));
        this[_children$0][$add](dart.nullCheck(this[_currentView]));
        this[_children$0][$add](dart.nullCheck(this[_nextView]));
        return this[_children$0];
      }
      let previousView = this[_updateViews](dart.nullCheck(this[_previousView]), dart.nullCheck(this[_previousView]).visibleDates, this[_previousViewVisibleDates]);
      let currentView = this[_updateViews](dart.nullCheck(this[_currentView]), dart.nullCheck(this[_currentView]).visibleDates, this[_visibleDates]);
      let nextView = this[_updateViews](dart.nullCheck(this[_nextView]), dart.nullCheck(this[_nextView]).visibleDates, this[_nextViewVisibleDates]);
      if (!dart.equals(this[_previousView], previousView)) {
        this[_previousView] = previousView;
      }
      if (!dart.equals(this[_currentView], currentView)) {
        this[_currentView] = currentView;
      }
      if (!dart.equals(this[_nextView], nextView)) {
        this[_nextView] = nextView;
      }
      return this[_children$0];
    }
    [_updateViews](view, viewDates, visibleDates) {
      if (view == null) dart.nullFailed(I[10], 7338, 19, "view");
      if (viewDates == null) dart.nullFailed(I[10], 7338, 39, "viewDates");
      if (visibleDates == null) dart.nullFailed(I[10], 7338, 64, "visibleDates");
      let index = this[_children$0][$indexOf](view);
      if (!dart.equals(viewDates, visibleDates)) {
        view = this[_getView](visibleDates, dart.nullCheck(view.key));
        this[_children$0][$_set](index, view);
      }
      return view;
    }
    [_animationListener]() {
      this.setState(dart.fn(() => {
        this[_position] = this[_animation].value;
      }, T.VoidTovoid()));
    }
    [_updateSettings](oldWidget) {
      if (oldWidget == null) dart.nullFailed(I[10], 7355, 42, "oldWidget");
      if (!dart.equals(oldWidget.picker.monthViewSettings, this.widget.picker.monthViewSettings) || !dart.equals(oldWidget.picker.monthCellStyle, this.widget.picker.monthCellStyle) || oldWidget.picker.selectionRadius != this.widget.picker.selectionRadius || !dart.equals(oldWidget.picker.startRangeSelectionColor, this.widget.picker.startRangeSelectionColor) || !dart.equals(oldWidget.picker.endRangeSelectionColor, this.widget.picker.endRangeSelectionColor) || !dart.equals(oldWidget.picker.rangeSelectionColor, this.widget.picker.rangeSelectionColor) || !dart.equals(oldWidget.picker.selectionColor, this.widget.picker.selectionColor) || !dart.equals(oldWidget.picker.selectionTextStyle, this.widget.picker.selectionTextStyle) || !dart.equals(oldWidget.picker.rangeTextStyle, this.widget.picker.rangeTextStyle) || !dart.equals(dart.dload(oldWidget.picker.monthViewSettings, 'blackoutDates'), dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')) || !dart.equals(dart.dload(oldWidget.picker.monthViewSettings, 'specialDates'), dart.dload(this.widget.picker.monthViewSettings, 'specialDates')) || !dart.equals(dart.dload(oldWidget.picker.monthViewSettings, 'weekendDays'), dart.dload(this.widget.picker.monthViewSettings, 'weekendDays')) || oldWidget.picker.selectionShape != this.widget.picker.selectionShape || !dart.equals(oldWidget.picker.todayHighlightColor, this.widget.picker.todayHighlightColor) || !dart.equals(oldWidget.locale, this.widget.locale)) {
        this[_children$0][$clear]();
        this[_position] = 0.0;
      }
    }
    [_drawSelection](oldValue, newValue) {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            if (!dart.equals(dart.dload(oldValue, 'selectedDate'), dart.dload(newValue, 'selectedDate')) || !dart.test(core$.isSameDate(this[_pickerStateDetails$0].selectedDate, dart.dload(newValue, 'selectedDate')))) {
              this[_pickerStateDetails$0].selectedDate = dart.dload(newValue, 'selectedDate');
              if (pickerView != date_picker_manager.DateRangePickerView.month && !dart.test(this.widget.picker.allowViewNavigation)) {
                this[_drawYearSelection]();
              } else {
                this[_drawMonthSelection]();
              }
              this[_position] = 0.0;
            }
          }
          break;
        }
        case C[67] || CT.C67:
        {
          {
            if (!dart.equals(dart.dload(oldValue, 'selectedDates'), dart.dload(newValue, 'selectedDates')) || !dart.test(picker_helper.DateRangePickerHelper.isDateCollectionEquals(this[_pickerStateDetails$0].selectedDates, T.ListN().as(dart.dload(newValue, 'selectedDates'))))) {
              this[_pickerStateDetails$0].selectedDates = T.ListN().as(dart.dload(newValue, 'selectedDates'));
              if (pickerView != date_picker_manager.DateRangePickerView.month && !dart.test(this.widget.picker.allowViewNavigation)) {
                this[_drawYearSelection]();
              } else {
                this[_drawMonthSelection]();
              }
              this[_position] = 0.0;
            }
          }
          break;
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            if (!dart.equals(dart.dload(oldValue, 'selectedRange'), dart.dload(newValue, 'selectedRange')) || !dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_pickerStateDetails$0].selectedRange, dart.dload(newValue, 'selectedRange')))) {
              this[_pickerStateDetails$0].selectedRange = dart.dload(newValue, 'selectedRange');
              if (pickerView != date_picker_manager.DateRangePickerView.month && !dart.test(this.widget.picker.allowViewNavigation)) {
                this[_drawYearSelection]();
              } else {
                this[_drawMonthSelection]();
              }
              this[_position] = 0.0;
            }
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            if (!dart.equals(dart.dload(oldValue, 'selectedRanges'), dart.dload(newValue, 'selectedRanges')) || !dart.test(picker_helper.DateRangePickerHelper.isDateRangesEquals(this[_pickerStateDetails$0].selectedRanges, T.ListN().as(dart.dload(newValue, 'selectedRanges'))))) {
              this[_pickerStateDetails$0].selectedRanges = T.ListN().as(dart.dload(newValue, 'selectedRanges'));
              if (pickerView != date_picker_manager.DateRangePickerView.month && !dart.test(this.widget.picker.allowViewNavigation)) {
                this[_drawYearSelection]();
              } else {
                this[_drawMonthSelection]();
              }
              this[_position] = 0.0;
            }
          }
        }
      }
    }
    [_updateSelection$0](opts) {
      let t81, t80;
      let selectedDate = opts && 'selectedDate' in opts ? opts.selectedDate : null;
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView != date_picker_manager.DateRangePickerView.month && dart.test(this.widget.picker.allowViewNavigation)) {
        return;
      }
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateValues(t81);
      for (let i = 0; i < dart.notNull(this[_children$0][$length]); i = i + 1) {
        if (i === this[_currentChildIndex]) {
          continue;
        }
        let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
        let viewState = this[_getCurrentViewState](i);
        switch (view) {
          case C[367] || CT.C367:
          {
            {
              dart.nullCheck(viewState[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(viewState[_monthView]).selectionNotifier.value);
            }
            break;
          }
          case C[368] || CT.C368:
          case C[369] || CT.C369:
          case C[370] || CT.C370:
          {
            {
              dart.nullCheck(viewState[_yearView]).selectionNotifier.value = !dart.test(dart.nullCheck(viewState[_yearView]).selectionNotifier.value);
            }
          }
        }
        if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.range || this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.extendableRange) {
          viewState[_lastSelectedDate] = selectedDate;
        }
      }
    }
    [_drawMonthSelection]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView != date_picker_manager.DateRangePickerView.month || dart.test(this[_children$0][$isEmpty])) {
        return;
      }
      for (let i = 0; i < dart.notNull(this[_children$0][$length]); i = i + 1) {
        let viewState = this[_getCurrentViewState](i);
        if (!dart.equals(dart.nullCheck(viewState[_monthView]).visibleDates, this[_pickerStateDetails$0].currentViewVisibleDates)) {
          continue;
        }
        dart.nullCheck(viewState[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(viewState[_monthView]).selectionNotifier.value);
      }
    }
    [_drawYearSelection]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.month || dart.test(this[_children$0][$isEmpty])) {
        return;
      }
      for (let i = 0; i < dart.notNull(this[_children$0][$length]); i = i + 1) {
        let viewState = this[_getCurrentViewState](i);
        if (!dart.equals(dart.nullCheck(viewState[_yearView]).visibleDates, this[_pickerStateDetails$0].currentViewVisibleDates)) {
          continue;
        }
        dart.nullCheck(viewState[_yearView]).selectionNotifier.value = !dart.test(dart.nullCheck(viewState[_yearView]).selectionNotifier.value);
      }
    }
    [_getCurrentViewState](index) {
      if (index == null) dart.nullFailed(I[10], 7562, 45, "index");
      if (index === 1) {
        return dart.nullCheck(this[_currentViewKey].currentState);
      } else if (index === 2) {
        return dart.nullCheck(this[_nextViewKey].currentState);
      }
      return dart.nullCheck(this[_previousViewKey].currentState);
    }
    [_updateCurrentViewVisibleDates](opts) {
      let t81, t80;
      let isNextView = opts && 'isNextView' in opts ? opts.isNextView : false;
      if (isNextView == null) dart.nullFailed(I[10], 7573, 45, "isNextView");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (dart.test(isNextView)) {
        if (this[_currentChildIndex] === 0) {
          this[_currentViewVisibleDates] = this[_visibleDates];
        } else if (this[_currentChildIndex] === 1) {
          this[_currentViewVisibleDates] = this[_nextViewVisibleDates];
        } else {
          this[_currentViewVisibleDates] = this[_previousViewVisibleDates];
        }
      } else {
        if (this[_currentChildIndex] === 0) {
          this[_currentViewVisibleDates] = this[_nextViewVisibleDates];
        } else if (this[_currentChildIndex] === 1) {
          this[_currentViewVisibleDates] = this[_previousViewVisibleDates];
        } else {
          this[_currentViewVisibleDates] = this[_visibleDates];
        }
      }
      this[_pickerStateDetails$0].currentViewVisibleDates = this[_currentViewVisibleDates];
      this[_pickerStateDetails$0].currentDate = this[_currentViewVisibleDates][$_get](0);
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      if (pickerView == date_picker_manager.DateRangePickerView.month && (numberOfWeeksInView === 6 || dart.test(this.widget.picker.isHijri))) {
        let date = this[_currentViewVisibleDates][$_get]((dart.notNull(this[_currentViewVisibleDates][$length]) / (dart.test(this.widget.picker.enableMultiView) ? 4 : 2))[$truncate]());
        this[_pickerStateDetails$0].currentDate = picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), 1, this.widget.picker.isHijri);
      }
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.updatePickerStateValues(t81);
    }
    [_updateNextView]() {
      if (!dart.test(this[_animationController].isCompleted)) {
        return;
      }
      this[_updateNextViewVisibleDates]();
      if (this[_currentChildIndex] === 0) {
        this[_currentChildIndex] = 1;
      } else if (this[_currentChildIndex] === 1) {
        this[_currentChildIndex] = 2;
      } else if (this[_currentChildIndex] === 2) {
        this[_currentChildIndex] = 0;
      }
      if (true) {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
      this[_resetPosition]();
    }
    [_updatePreviousView]() {
      if (!dart.test(this[_animationController].isCompleted)) {
        return;
      }
      this[_updatePreviousViewVisibleDates]();
      if (this[_currentChildIndex] === 0) {
        this[_currentChildIndex] = 2;
      } else if (this[_currentChildIndex] === 1) {
        this[_currentChildIndex] = 0;
      } else if (this[_currentChildIndex] === 2) {
        this[_currentChildIndex] = 1;
      }
      if (true) {
        this.setState(dart.fn(() => {
        }, T.VoidTovoid()));
      }
      this[_resetPosition]();
    }
    [_resetPosition]() {
      dart.nullCheck(binding.SchedulerBinding.instance).addPostFrameCallback(dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[10], 7672, 54, "_");
        if (this[_position][$abs]() === this.widget.width || this[_position][$abs]() === this.widget.height) {
          this[_position] = 0.0;
        }
      }, T.DurationTovoid()));
    }
    [_getYearSelectedDate](selectedDate, key, view, state) {
      if (key == null) dart.nullFailed(I[10], 7681, 73, "key");
      if (view == null) dart.nullFailed(I[10], 7682, 19, "view");
      if (state == null) dart.nullFailed(I[10], 7682, 42, "state");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let date = null;
      let index = picker_helper.DateRangePickerHelper.getDateCellIndex(view.visibleDates, selectedDate, dart.dload(this.widget.controller, 'view'));
      if (dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowRight)) {
        if ((index === dart.notNull(view.visibleDates[$length]) - 1 || dart.test(this.widget.picker.enableMultiView) && pickerView != date_picker_manager.DateRangePickerView.year && dart.notNull(index) >= dart.notNull(view.visibleDates[$length]) - 3) && this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.single) {
          dart.test(this.widget.isRtl) ? this[_moveToPreviousViewWithAnimation]() : this[_moveToNextViewWithAnimation]();
        }
        if (index !== -1) {
          date = this[_updateNextYearSelectionDate](selectedDate);
        }
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowLeft)) {
        if (index === 0 && this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.single) {
          dart.test(this.widget.isRtl) ? this[_moveToNextViewWithAnimation]() : this[_moveToPreviousViewWithAnimation]();
        }
        if (index !== -1) {
          date = this[_updatePreviousYearSelectionDate](selectedDate);
        }
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowUp)) {
        if (dart.notNull(index) >= 3 && index !== -1) {
          index = dart.notNull(index) - 3;
          date = view.visibleDates[$_get](index);
        }
      } else if (dart.equals(key, keyboard_key.LogicalKeyboardKey.arrowDown)) {
        if (dart.notNull(index) <= 8 && index !== -1) {
          index = dart.notNull(index) + 3;
          date = view.visibleDates[$_get](index);
        } else if (dart.test(this.widget.picker.enableMultiView) && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && dart.notNull(index) <= 20 && index !== -1) {
          index = dart.notNull(index) + 3;
          date = this[_updateNextYearSelectionDate](selectedDate);
          for (let i = 1; i < 3; i = i + 1) {
            date = this[_updateNextYearSelectionDate](date);
          }
        }
      }
      return date;
    }
    [_updateNextYearSelectionDate](selectedDate) {
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            break;
          }
        }
        case C[368] || CT.C368:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextViewStartDate(date_picker_manager.DateRangePickerView.month, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
        case C[369] || CT.C369:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextViewStartDate(date_picker_manager.DateRangePickerView.year, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
        case C[370] || CT.C370:
        {
          {
            return picker_helper.DateRangePickerHelper.getNextViewStartDate(date_picker_manager.DateRangePickerView.decade, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
      }
      return selectedDate;
    }
    [_updatePreviousYearSelectionDate](selectedDate) {
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let view = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (view) {
        case C[367] || CT.C367:
        {
          {
            break;
          }
        }
        case C[368] || CT.C368:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousViewStartDate(date_picker_manager.DateRangePickerView.month, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
        case C[369] || CT.C369:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousViewStartDate(date_picker_manager.DateRangePickerView.year, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
        case C[370] || CT.C370:
        {
          {
            return picker_helper.DateRangePickerHelper.getPreviousViewStartDate(date_picker_manager.DateRangePickerView.decade, numberOfWeeksInView, selectedDate, this.widget.isRtl, this.widget.picker.isHijri);
          }
        }
      }
      return selectedDate;
    }
    [_switchViewsByKeyBoardEvent](event) {
      let t81, t80;
      if (event == null) dart.nullFailed(I[10], 7842, 58, "event");
      if (dart.test(event.isAltPressed)) {
        if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.digit1)) {
          this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.month;
        } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.digit2)) {
          this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.year;
        } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.digit3)) {
          this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.decade;
        } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.digit4)) {
          this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.century;
        } else {
          return focus_manager.KeyEventResult.ignored;
        }
        t80 = this.widget;
        t81 = this[_pickerStateDetails$0];
        t80.updatePickerStateValues(t81);
        return focus_manager.KeyEventResult.handled;
      }
      return focus_manager.KeyEventResult.ignored;
    }
    [_updateYearSelectionByKeyBoardNavigation](currentVisibleViewState, currentVisibleView, event) {
      let t80, t81, t80$;
      if (currentVisibleViewState == null) dart.nullFailed(I[10], 7867, 24, "currentVisibleViewState");
      if (currentVisibleView == null) dart.nullFailed(I[10], 7868, 19, "currentVisibleView");
      if (event == null) dart.nullFailed(I[10], 7869, 19, "event");
      let selectedDate = null;
      if (this[_pickerStateDetails$0].selectedDate != null && this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.single) {
        selectedDate = this[_getYearSelectedDate](this[_pickerStateDetails$0].selectedDate, event.logicalKey, currentVisibleView, currentVisibleViewState);
        if (selectedDate != null && dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(selectedDate, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
          this[_pickerStateDetails$0].selectedDate = selectedDate;
        }
      } else if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiple && this[_pickerStateDetails$0].selectedDates != null && dart.test(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$isNotEmpty]) && dart.test(event.isShiftPressed)) {
        let date = dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$length]) - 1);
        selectedDate = this[_getYearSelectedDate](date, event.logicalKey, currentVisibleView, currentVisibleViewState);
        if (selectedDate != null && dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(selectedDate, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
          this[_pickerStateDetails$0].selectedDates = (t80 = picker_helper.DateRangePickerHelper.cloneList(this[_pickerStateDetails$0].selectedDates), t80 == null ? null : (() => {
            t80[$add](selectedDate);
            return t80;
          })());
        }
      } else if ((this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.range || this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.extendableRange) && this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && dart.test(event.isShiftPressed)) {
        let date = currentVisibleViewState[_lastSelectedDate];
        selectedDate = this[_getYearSelectedDate](date, event.logicalKey, currentVisibleView, currentVisibleViewState);
        if (selectedDate != null && dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(selectedDate, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
          if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && (dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') == null || dart.test(core$.isSameDate(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate'), dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate'))))) {
            this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate')), T.HijriDateTimeN().as(selectedDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate')), T.DateTimeN().as(selectedDate));
          } else if (dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') != null) {
            let date = currentVisibleViewState[_lastSelectedDate];
            selectedDate = this[_getYearSelectedDate](date, event.logicalKey, currentVisibleView, currentVisibleViewState);
            if (selectedDate == null) {
              return focus_manager.KeyEventResult.ignored;
            }
            let startDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
            let endDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate');
            if (dart.equals(dart.dsend(selectedDate, 'isAfter', [endDate]), true)) {
              endDate = selectedDate;
            } else if (dart.equals(dart.dsend(selectedDate, 'isBefore', [startDate]), true)) {
              startDate = selectedDate;
            } else if (dart.equals(dart.dsend(selectedDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(selectedDate, 'isBefore', [endDate]), true)) {
              let overAllDifference = core.int.as(dart.dload(dart.dsend(endDate, 'difference', [startDate]), 'inDays'));
              let selectedDateIndex = core.int.as(dart.dload(dart.dsend(selectedDate, 'difference', [startDate]), 'inDays'));
              if (dart.notNull(selectedDateIndex) > dart.notNull(overAllDifference) / 2) {
                endDate = selectedDate;
              } else {
                startDate = selectedDate;
              }
            }
            this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
          } else {
            this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
          }
          currentVisibleViewState[_lastSelectedDate] = selectedDate;
        } else {
          return focus_manager.KeyEventResult.ignored;
        }
      } else {
        return focus_manager.KeyEventResult.ignored;
      }
      t80$ = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80$.updatePickerStateValues(t81);
      this[_drawYearSelection]();
      return focus_manager.KeyEventResult.handled;
    }
    [_updateRangeSelectionByKeyboardNavigation](selectedDate) {
      if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && (dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') == null || dart.test(core$.isSameDate(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate'), dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate'))))) {
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate')), T.HijriDateTimeN().as(selectedDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate')), T.DateTimeN().as(selectedDate));
      } else {
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
      }
    }
    [_updateSelectionByKeyboardNavigation](selectedDate) {
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            this[_pickerStateDetails$0].selectedDate = selectedDate;
          }
          break;
        }
        case C[67] || CT.C67:
        {
          {
            dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$add](selectedDate);
          }
          break;
        }
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') != null) {
              let startDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
              let endDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate');
              if (dart.equals(dart.dsend(selectedDate, 'isAfter', [endDate]), true)) {
                endDate = selectedDate;
              } else if (dart.equals(dart.dsend(selectedDate, 'isBefore', [startDate]), true)) {
                startDate = selectedDate;
              } else if (dart.equals(dart.dsend(selectedDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(selectedDate, 'isBefore', [endDate]), true)) {
                let overAllDifference = core.int.as(dart.dload(dart.dsend(endDate, 'difference', [startDate]), 'inDays'));
                let selectedDateIndex = core.int.as(dart.dload(dart.dsend(selectedDate, 'difference', [startDate]), 'inDays'));
                if (dart.notNull(selectedDateIndex) > dart.notNull(overAllDifference) / 2) {
                  endDate = selectedDate;
                } else {
                  startDate = selectedDate;
                }
              }
              this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
            } else {
              this[_updateRangeSelectionByKeyboardNavigation](selectedDate);
            }
          }
          break;
        }
        case C[169] || CT.C169:
        {
          break;
        }
      }
    }
    [_onKeyDown](node, event) {
      let t81, t80;
      if (node == null) dart.nullFailed(I[10], 8050, 39, "node");
      if (event == null) dart.nullFailed(I[10], 8050, 57, "event");
      let result = focus_manager.KeyEventResult.ignored;
      if (!dart.equals(dart.runtimeType(event), dart.wrapType(raw_keyboard.RawKeyDownEvent))) {
        return result;
      }
      if (dart.test(event.isShiftPressed) && dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.tab)) {
        focus_scope.FocusScope.of(this.context).previousFocus();
        return focus_manager.KeyEventResult.handled;
      }
      if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.tab)) {
        focus_scope.FocusScope.of(this.context).nextFocus();
        return focus_manager.KeyEventResult.handled;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      result = this[_switchViewsByKeyBoardEvent](event);
      if (dart.test(event.isControlPressed)) {
        let canMoveToNextView = picker_helper.DateRangePickerHelper.canMoveToNextViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri);
        let canMoveToPreviousView = picker_helper.DateRangePickerHelper.canMoveToPreviousViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri);
        if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowRight) && dart.test(canMoveToNextView)) {
          dart.test(this.widget.isRtl) ? this[_moveToPreviousViewWithAnimation]() : this[_moveToNextViewWithAnimation]();
          result = focus_manager.KeyEventResult.handled;
        } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowLeft) && dart.test(canMoveToPreviousView)) {
          dart.test(this.widget.isRtl) ? this[_moveToNextViewWithAnimation]() : this[_moveToPreviousViewWithAnimation]();
          result = focus_manager.KeyEventResult.handled;
        }
        result = focus_manager.KeyEventResult.ignored;
      }
      if (pickerView != date_picker_manager.DateRangePickerView.month && dart.test(this.widget.picker.allowViewNavigation)) {
        return result;
      }
      if (this[_pickerStateDetails$0].selectedDate == null && (this[_pickerStateDetails$0].selectedDates == null || dart.test(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$isEmpty])) && this[_pickerStateDetails$0].selectedRange == null && (this[_pickerStateDetails$0].selectedRanges == null || dart.test(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$isEmpty]))) {
        return result;
      }
      let currentVisibleViewState = null;
      let currentVisibleView = null;
      if (this[_currentChildIndex] === 0) {
        currentVisibleViewState = dart.nullCheck(this[_previousViewKey].currentState);
        currentVisibleView = dart.nullCheck(this[_previousView]);
      } else if (this[_currentChildIndex] === 1) {
        currentVisibleViewState = dart.nullCheck(this[_currentViewKey].currentState);
        currentVisibleView = dart.nullCheck(this[_currentView]);
      } else {
        currentVisibleViewState = dart.nullCheck(this[_nextViewKey].currentState);
        currentVisibleView = dart.nullCheck(this[_nextView]);
      }
      if (pickerView != date_picker_manager.DateRangePickerView.month) {
        result = this[_updateYearSelectionByKeyBoardNavigation](currentVisibleViewState, currentVisibleView, event);
        return result;
      }
      let selectedDate = this[_updateSelectedDate](event, currentVisibleViewState, currentVisibleView);
      if (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentVisibleView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)) || !dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, selectedDate, this.widget.picker.isHijri))) {
        return result;
      }
      let numberOfWeeksInView = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let visibleStartDate = currentVisibleView.visibleDates[$_get](0);
      let visibleEndDate = currentVisibleView.visibleDates[$_get](dart.notNull(currentVisibleView.visibleDates[$length]) - 1);
      let datesCount = (dart.notNull(currentVisibleView.visibleDates[$length]) / (dart.test(this.widget.picker.enableMultiView) ? 2 : 1))[$truncate]();
      let showLeadingTrailingDates = dart.test(this.widget.picker.enableMultiView) ? false : picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let isCurrentMonthDate = dart.test(this.widget.picker.enableMultiView) ? dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(currentVisibleView.visibleDates[$_get]((datesCount / 2)[$truncate]()), numberOfWeeksInView, showLeadingTrailingDates, selectedDate, this.widget.picker.isHijri)) || dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(currentVisibleView.visibleDates[$_get](datesCount + (datesCount / 2)[$truncate]()), numberOfWeeksInView, showLeadingTrailingDates, selectedDate, this.widget.picker.isHijri)) : picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(currentVisibleView.visibleDates[$_get]((datesCount / 2)[$truncate]()), numberOfWeeksInView, showLeadingTrailingDates, selectedDate, this.widget.picker.isHijri);
      if (!dart.test(isCurrentMonthDate) || !dart.test(core$.isDateWithInDateRange(visibleStartDate, visibleEndDate, selectedDate))) {
        let month = core.int.as(dart.dload(selectedDate, 'month'));
        let nextMonthDate = core$.getNextMonthDate(currentVisibleView.visibleDates[$_get]((dart.notNull(currentVisibleView.visibleDates[$length]) / (dart.test(this.widget.picker.enableMultiView) ? 4 : 2))[$truncate]()));
        let nextMonth = core.int.as(dart.dload(nextMonthDate, 'month'));
        let nextMonthEndDate = picker_helper.DateRangePickerHelper.getMonthEndDate(nextMonthDate);
        if (dart.test(core$.isDateWithInDateRange(visibleStartDate, visibleEndDate, nextMonthEndDate))) {
          nextMonth = core.int.as(dart.dload(core$.getNextMonthDate(nextMonthEndDate), 'month'));
        }
        if (month == nextMonth) {
          dart.test(this.widget.isRtl) ? this[_moveToPreviousViewWithAnimation]() : this[_moveToNextViewWithAnimation]();
        } else {
          dart.test(this.widget.isRtl) ? this[_moveToNextViewWithAnimation]() : this[_moveToPreviousViewWithAnimation]();
        }
        result = focus_manager.KeyEventResult.handled;
      }
      currentVisibleViewState[_drawSelection](selectedDate);
      this[_updateSelectionByKeyboardNavigation](selectedDate);
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.updatePickerStateValues(t81);
      dart.nullCheck(currentVisibleViewState[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(currentVisibleViewState[_monthView]).selectionNotifier.value);
      this[_updateSelection$0]({selectedDate: selectedDate});
      return result;
    }
    [_updateSingleSelectionByKeyBoardKeys](event, currentView) {
      if (event == null) dart.nullFailed(I[10], 8227, 19, "event");
      if (currentView == null) dart.nullFailed(I[10], 8227, 38, "currentView");
      let selectedDate = this[_pickerStateDetails$0].selectedDate;
      if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowRight)) {
        if (dart.test(core$.isSameDate(this[_pickerStateDetails$0].selectedDate, currentView.visibleDates[$_get](dart.notNull(currentView.visibleDates[$length]) - 1)))) {
          this[_moveToNextViewWithAnimation]();
        }
        do {
          selectedDate = core$.addDays(selectedDate, 1);
        } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
        return selectedDate;
      } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowLeft)) {
        if (dart.test(core$.isSameDate(this[_pickerStateDetails$0].selectedDate, currentView.visibleDates[$_get](0)))) {
          this[_moveToPreviousViewWithAnimation]();
        }
        do {
          selectedDate = core$.addDays(selectedDate, -1);
        } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
        return selectedDate;
      } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowUp)) {
        do {
          selectedDate = core$.addDays(selectedDate, -7);
        } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
        return selectedDate;
      } else if (dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowDown)) {
        do {
          selectedDate = core$.addDays(selectedDate, 7);
        } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
        return selectedDate;
      }
      return null;
    }
    [_updateMultiAndRangeSelectionByKeyBoard](event, currentState, currentView) {
      if (event == null) dart.nullFailed(I[10], 8275, 63, "event");
      if (currentState == null) dart.nullFailed(I[10], 8276, 24, "currentState");
      if (currentView == null) dart.nullFailed(I[10], 8276, 50, "currentView");
      let selectedDate = null;
      if (dart.test(event.isShiftPressed) && dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowRight)) {
        if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiple) {
          selectedDate = dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$length]) - 1);
          do {
            selectedDate = core$.addDays(selectedDate, 1);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        } else {
          selectedDate = currentState[_lastSelectedDate];
          do {
            selectedDate = core$.addDays(selectedDate, 1);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        }
      } else if (dart.test(event.isShiftPressed) && dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowLeft)) {
        if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiple) {
          selectedDate = dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$length]) - 1);
          do {
            selectedDate = core$.addDays(selectedDate, -1);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        } else {
          selectedDate = currentState[_lastSelectedDate];
          do {
            selectedDate = core$.addDays(selectedDate, -1);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        }
      } else if (dart.test(event.isShiftPressed) && dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowUp)) {
        if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiple) {
          selectedDate = dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$length]) - 1);
          do {
            selectedDate = core$.addDays(selectedDate, -7);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        } else {
          selectedDate = currentState[_lastSelectedDate];
          do {
            selectedDate = core$.addDays(selectedDate, -7);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        }
      } else if (dart.test(event.isShiftPressed) && dart.equals(event.logicalKey, keyboard_key.LogicalKeyboardKey.arrowDown)) {
        if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.multiple) {
          selectedDate = dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$length]) - 1);
          do {
            selectedDate = core$.addDays(selectedDate, 7);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        } else {
          selectedDate = currentState[_lastSelectedDate];
          do {
            selectedDate = core$.addDays(selectedDate, 7);
          } while (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(currentView.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate)));
          return selectedDate;
        }
      }
      return null;
    }
    [_updateSelectedDate](event, currentState, currentView) {
      if (event == null) dart.nullFailed(I[10], 8374, 43, "event");
      if (currentState == null) dart.nullFailed(I[10], 8374, 67, "currentState");
      if (currentView == null) dart.nullFailed(I[10], 8375, 19, "currentView");
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        {
          {
            return this[_updateSingleSelectionByKeyBoardKeys](event, currentView);
          }
        }
        case C[67] || CT.C67:
        case C[101] || CT.C101:
        case C[135] || CT.C135:
        {
          {
            return this[_updateMultiAndRangeSelectionByKeyBoard](event, currentState, currentView);
          }
        }
        case C[169] || CT.C169:
        {
          break;
        }
      }
      return null;
    }
    [_onHorizontalStart](dragStartDetails) {
      if (dragStartDetails == null) dart.nullFailed(I[10], 8395, 44, "dragStartDetails");
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          {
            this[_scrollStartPosition] = dragStartDetails.globalPosition.dx;
            this[_updateSelection$0]();
          }
          break;
        }
        case C[359] || CT.C359:
        {
          break;
        }
      }
    }
    [_onHorizontalUpdate](dragUpdateDetails) {
      if (dragUpdateDetails == null) dart.nullFailed(I[10], 8408, 46, "dragUpdateDetails");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          {
            let difference = dart.notNull(dragUpdateDetails.globalPosition.dx) - dart.nullCheck(this[_scrollStartPosition]);
            if (difference < 0 && !dart.test(picker_helper.DateRangePickerHelper.canMoveToNextViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
              return;
            } else if (difference > 0 && !dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
              return;
            }
            this[_position] = difference;
            this.setState(dart.fn(() => {
            }, T.VoidTovoid()));
          }
          break;
        }
        case C[359] || CT.C359:
        {
          break;
        }
      }
    }
    [_onHorizontalEnd](dragEndDetails) {
      if (dragEndDetails == null) dart.nullFailed(I[10], 8454, 40, "dragEndDetails");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (this.widget.picker.navigationDirection) {
        case C[359] || CT.C359:
        {
          break;
        }
        case C[358] || CT.C358:
        {
          {
            this[_position] = this[_position] !== 0 ? this[_position] : 0.0;
            if (-dart.notNull(this[_position]) >= dart.notNull(this.widget.width) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = -dart.notNull(this.widget.width);
              if (dart.test(this[_animationController].isCompleted) && this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updateNextView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]({isNextView: true});
            } else if (-dart.notNull(dragEndDetails.velocity.pixelsPerSecond.dx) > dart.notNull(this.widget.width)) {
              if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToNextViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
                this[_position] = 0.0;
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
                return;
              }
              this[_tween].begin = this[_position];
              this[_tween].end = -dart.notNull(this.widget.width);
              if (dart.test(this[_animationController].isCompleted) && this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].fling({velocity: 5.0, animationBehavior: animation_controller.AnimationBehavior.normal}).then(dart.dynamic, dart.fn(value => this[_updateNextView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]({isNextView: true});
            } else if (dart.notNull(this[_position]) >= dart.notNull(this.widget.width) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = this.widget.width;
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updatePreviousView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]();
            } else if (dart.notNull(dragEndDetails.velocity.pixelsPerSecond.dx) > dart.notNull(this.widget.width)) {
              if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousViewRtl(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.isRtl, this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
                this[_position] = 0.0;
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
                return;
              }
              this[_tween].begin = this[_position];
              this[_tween].end = this.widget.width;
              if (dart.test(this[_animationController].isCompleted) && this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].fling({velocity: 5.0, animationBehavior: animation_controller.AnimationBehavior.normal}).then(dart.dynamic, dart.fn(value => this[_updatePreviousView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]();
            } else if (this[_position][$abs]() <= dart.notNull(this.widget.width) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = 0.0;
              if (dart.test(this[_animationController].isCompleted) && this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward();
            }
          }
        }
      }
    }
    [_onVerticalStart](dragStartDetails) {
      if (dragStartDetails == null) dart.nullFailed(I[10], 8599, 42, "dragStartDetails");
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          break;
        }
        case C[359] || CT.C359:
        {
          {
            this[_scrollStartPosition] = dragStartDetails.globalPosition.dy;
            this[_updateSelection$0]();
          }
          break;
        }
      }
    }
    [_onVerticalUpdate](dragUpdateDetails) {
      if (dragUpdateDetails == null) dart.nullFailed(I[10], 8612, 44, "dragUpdateDetails");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          break;
        }
        case C[359] || CT.C359:
        {
          {
            let difference = dart.notNull(dragUpdateDetails.globalPosition.dy) - dart.nullCheck(this[_scrollStartPosition]);
            if (difference < 0 && !dart.test(picker_helper.DateRangePickerHelper.canMoveToNextView(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
              return;
            } else if (difference > 0 && !dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousView(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this[_currentViewVisibleDates], this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
              return;
            }
            this[_position] = difference;
            this.setState(dart.fn(() => {
            }, T.VoidTovoid()));
          }
        }
      }
    }
    [_onVerticalEnd](dragEndDetails) {
      if (dragEndDetails == null) dart.nullFailed(I[10], 8653, 38, "dragEndDetails");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (this.widget.picker.navigationDirection) {
        case C[358] || CT.C358:
        {
          break;
        }
        case C[359] || CT.C359:
        {
          {
            this[_position] = this[_position] !== 0 ? this[_position] : 0.0;
            if (-dart.notNull(this[_position]) >= dart.notNull(this.widget.height) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = -dart.notNull(this.widget.height);
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updateNextView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]({isNextView: true});
            } else if (-dart.notNull(dragEndDetails.velocity.pixelsPerSecond.dy) > dart.notNull(this.widget.height)) {
              if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToNextView(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.maxDate, this[_currentViewVisibleDates], this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
                this[_position] = 0.0;
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
                return;
              }
              this[_tween].begin = this[_position];
              this[_tween].end = -dart.notNull(this.widget.height);
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].fling({velocity: 5.0, animationBehavior: animation_controller.AnimationBehavior.normal}).then(dart.dynamic, dart.fn(value => this[_updateNextView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]({isNextView: true});
            } else if (dart.notNull(this[_position]) >= dart.notNull(this.widget.height) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = this.widget.height;
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward().then(dart.dynamic, dart.fn(value => this[_updatePreviousView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]();
            } else if (dart.notNull(dragEndDetails.velocity.pixelsPerSecond.dy) > dart.notNull(this.widget.height)) {
              if (!dart.test(picker_helper.DateRangePickerHelper.canMoveToPreviousView(pickerView, picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), this.widget.picker.minDate, this[_currentViewVisibleDates], this.widget.picker.enableMultiView, this.widget.picker.isHijri))) {
                this[_position] = 0.0;
                this.setState(dart.fn(() => {
                }, T.VoidTovoid()));
                return;
              }
              this[_tween].begin = this[_position];
              this[_tween].end = this.widget.height;
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].fling({velocity: 5.0, animationBehavior: animation_controller.AnimationBehavior.normal}).then(dart.dynamic, dart.fn(value => this[_updatePreviousView](), T.dynamicTovoid()));
              this[_updateCurrentViewVisibleDates]();
            } else if (this[_position][$abs]() <= dart.notNull(this.widget.height) / 2) {
              this[_tween].begin = this[_position];
              this[_tween].end = 0.0;
              if (dart.test(this[_animationController].isCompleted) || this[_position] != this[_tween].end) {
                this[_animationController].reset();
              }
              this[_animationController].duration = C[828] || CT.C828;
              this[_animationController].forward();
            }
          }
        }
      }
    }
  };
  (date_picker._PickerScrollViewState.new = function() {
    this[_currentView] = null;
    this[_nextView] = null;
    this[_previousView] = null;
    this[_children$0] = T.JSArrayOf_PickerView().of([]);
    this[_currentChildIndex] = 1;
    this[_scrollStartPosition] = null;
    this[_position] = 0.0;
    this[___PickerScrollViewState__animationController] = null;
    this[___PickerScrollViewState__animation] = null;
    this[___PickerScrollViewState__tween] = null;
    this[___PickerScrollViewState__visibleDates] = null;
    this[___PickerScrollViewState__previousViewVisibleDates] = null;
    this[___PickerScrollViewState__nextViewVisibleDates] = null;
    this[___PickerScrollViewState__currentViewVisibleDates] = null;
    this[_previousViewKey] = T.GlobalKeyOf_PickerViewState().new();
    this[_currentViewKey] = T.GlobalKeyOf_PickerViewState().new();
    this[_nextViewKey] = T.GlobalKeyOf_PickerViewState().new();
    this[_pickerStateDetails$0] = new picker_helper.PickerStateArgs.new();
    this[_focusNode] = new focus_manager.FocusScopeNode.new();
    date_picker._PickerScrollViewState.__proto__.new.call(this);
    ;
  }).prototype = date_picker._PickerScrollViewState.prototype;
  dart.addTypeTests(date_picker._PickerScrollViewState);
  dart.addTypeCaches(date_picker._PickerScrollViewState);
  dart.setMethodSignature(date_picker._PickerScrollViewState, () => ({
    __proto__: dart.getMethods(date_picker._PickerScrollViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_updateVisibleDates]: dart.fnType(dart.void, []),
    [_moveToNextViewWithAnimation]: dart.fnType(dart.void, []),
    [_moveToPreviousViewWithAnimation]: dart.fnType(dart.void, []),
    [_updateVisibleDatesForMultiView]: dart.fnType(dart.void, [core.List]),
    [_updateNextViewVisibleDates]: dart.fnType(dart.void, []),
    [_updateNextVisibleDateForMultiView]: dart.fnType(core.List, [dart.nullable(core.List)]),
    [_updatePreviousViewVisibleDates]: dart.fnType(dart.void, []),
    [_updatePreviousDatesForMultiView]: dart.fnType(core.List, [dart.nullable(core.List)]),
    [_getPickerViewStateDetails]: dart.fnType(dart.void, [picker_helper.PickerStateArgs]),
    [_updatePickerViewStateDetails]: dart.fnType(dart.void, [picker_helper.PickerStateArgs]),
    [_getView]: dart.fnType(date_picker._PickerView, [core.List, key.Key]),
    [_addViews]: dart.fnType(core.List$(framework.Widget), [framework.BuildContext]),
    [_updateViews]: dart.fnType(date_picker._PickerView, [date_picker._PickerView, core.List, core.List]),
    [_animationListener]: dart.fnType(dart.void, []),
    [_updateSettings]: dart.fnType(dart.void, [date_picker._PickerScrollView]),
    [_drawSelection]: dart.fnType(dart.void, [dart.dynamic, dart.dynamic]),
    [_updateSelection$0]: dart.fnType(dart.void, [], {selectedDate: dart.dynamic}, {}),
    [_drawMonthSelection]: dart.fnType(dart.void, []),
    [_drawYearSelection]: dart.fnType(dart.void, []),
    [_getCurrentViewState]: dart.fnType(date_picker._PickerViewState, [core.int]),
    [_updateCurrentViewVisibleDates]: dart.fnType(dart.void, [], {isNextView: core.bool}, {}),
    [_updateNextView]: dart.fnType(dart.void, []),
    [_updatePreviousView]: dart.fnType(dart.void, []),
    [_resetPosition]: dart.fnType(dart.void, []),
    [_getYearSelectedDate]: dart.fnType(dart.dynamic, [dart.dynamic, keyboard_key.LogicalKeyboardKey, date_picker._PickerView, date_picker._PickerViewState]),
    [_updateNextYearSelectionDate]: dart.fnType(dart.dynamic, [dart.dynamic]),
    [_updatePreviousYearSelectionDate]: dart.fnType(dart.dynamic, [dart.dynamic]),
    [_switchViewsByKeyBoardEvent]: dart.fnType(focus_manager.KeyEventResult, [raw_keyboard.RawKeyEvent]),
    [_updateYearSelectionByKeyBoardNavigation]: dart.fnType(focus_manager.KeyEventResult, [date_picker._PickerViewState, date_picker._PickerView, raw_keyboard.RawKeyEvent]),
    [_updateRangeSelectionByKeyboardNavigation]: dart.fnType(dart.void, [dart.dynamic]),
    [_updateSelectionByKeyboardNavigation]: dart.fnType(dart.void, [dart.dynamic]),
    [_onKeyDown]: dart.fnType(focus_manager.KeyEventResult, [focus_manager.FocusNode, raw_keyboard.RawKeyEvent]),
    [_updateSingleSelectionByKeyBoardKeys]: dart.fnType(dart.dynamic, [raw_keyboard.RawKeyEvent, date_picker._PickerView]),
    [_updateMultiAndRangeSelectionByKeyBoard]: dart.fnType(dart.dynamic, [raw_keyboard.RawKeyEvent, date_picker._PickerViewState, date_picker._PickerView]),
    [_updateSelectedDate]: dart.fnType(dart.dynamic, [raw_keyboard.RawKeyEvent, date_picker._PickerViewState, date_picker._PickerView]),
    [_onHorizontalStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onHorizontalUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onHorizontalEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
    [_onVerticalStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_onVerticalUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_onVerticalEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails])
  }));
  dart.setGetterSignature(date_picker._PickerScrollViewState, () => ({
    __proto__: dart.getGetters(date_picker._PickerScrollViewState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_tween]: tween.Tween$(core.double),
    [_visibleDates]: core.List,
    [_previousViewVisibleDates]: core.List,
    [_nextViewVisibleDates]: core.List,
    [_currentViewVisibleDates]: core.List
  }));
  dart.setSetterSignature(date_picker._PickerScrollViewState, () => ({
    __proto__: dart.getSetters(date_picker._PickerScrollViewState.__proto__),
    [_animationController]: animation_controller.AnimationController,
    [_animation]: animation.Animation$(core.double),
    [_tween]: tween.Tween$(core.double),
    [_visibleDates]: core.List,
    [_previousViewVisibleDates]: core.List,
    [_nextViewVisibleDates]: core.List,
    [_currentViewVisibleDates]: core.List
  }));
  dart.setLibraryUri(date_picker._PickerScrollViewState, I[11]);
  dart.setFieldSignature(date_picker._PickerScrollViewState, () => ({
    __proto__: dart.getFields(date_picker._PickerScrollViewState.__proto__),
    [_currentView]: dart.fieldType(dart.nullable(date_picker._PickerView)),
    [_nextView]: dart.fieldType(dart.nullable(date_picker._PickerView)),
    [_previousView]: dart.fieldType(dart.nullable(date_picker._PickerView)),
    [_children$0]: dart.finalFieldType(core.List$(date_picker._PickerView)),
    [_currentChildIndex]: dart.fieldType(core.int),
    [_scrollStartPosition]: dart.fieldType(dart.nullable(core.double)),
    [_position]: dart.fieldType(core.double),
    [___PickerScrollViewState__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___PickerScrollViewState__animation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___PickerScrollViewState__tween]: dart.fieldType(dart.nullable(tween.Tween$(core.double))),
    [___PickerScrollViewState__visibleDates]: dart.fieldType(dart.nullable(core.List)),
    [___PickerScrollViewState__previousViewVisibleDates]: dart.fieldType(dart.nullable(core.List)),
    [___PickerScrollViewState__nextViewVisibleDates]: dart.fieldType(dart.nullable(core.List)),
    [___PickerScrollViewState__currentViewVisibleDates]: dart.fieldType(dart.nullable(core.List)),
    [_previousViewKey]: dart.finalFieldType(framework.GlobalKey$(date_picker._PickerViewState)),
    [_currentViewKey]: dart.finalFieldType(framework.GlobalKey$(date_picker._PickerViewState)),
    [_nextViewKey]: dart.finalFieldType(framework.GlobalKey$(date_picker._PickerViewState)),
    [_pickerStateDetails$0]: dart.finalFieldType(picker_helper.PickerStateArgs),
    [_focusNode]: dart.finalFieldType(focus_manager.FocusScopeNode)
  }));
  var visibleDates$4 = dart.privateName(date_picker, "_PickerView.visibleDates");
  var picker$0 = dart.privateName(date_picker, "_PickerView.picker");
  var enableMultiView$5 = dart.privateName(date_picker, "_PickerView.enableMultiView");
  var controller$3 = dart.privateName(date_picker, "_PickerView.controller");
  var width$3 = dart.privateName(date_picker, "_PickerView.width");
  var height$3 = dart.privateName(date_picker, "_PickerView.height");
  var getPickerStateDetails$1 = dart.privateName(date_picker, "_PickerView.getPickerStateDetails");
  var updatePickerStateDetails$ = dart.privateName(date_picker, "_PickerView.updatePickerStateDetails");
  var datePickerTheme$3 = dart.privateName(date_picker, "_PickerView.datePickerTheme");
  var isRtl$3 = dart.privateName(date_picker, "_PickerView.isRtl");
  var focusNode$ = dart.privateName(date_picker, "_PickerView.focusNode");
  var textScaleFactor$3 = dart.privateName(date_picker, "_PickerView.textScaleFactor");
  date_picker._PickerView = class _PickerView extends framework.StatefulWidget {
    get visibleDates() {
      return this[visibleDates$4];
    }
    set visibleDates(value) {
      super.visibleDates = value;
    }
    get picker() {
      return this[picker$0];
    }
    set picker(value) {
      super.picker = value;
    }
    get enableMultiView() {
      return this[enableMultiView$5];
    }
    set enableMultiView(value) {
      super.enableMultiView = value;
    }
    get controller() {
      return this[controller$3];
    }
    set controller(value) {
      super.controller = value;
    }
    get width() {
      return this[width$3];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$3];
    }
    set height(value) {
      super.height = value;
    }
    get getPickerStateDetails() {
      return this[getPickerStateDetails$1];
    }
    set getPickerStateDetails(value) {
      super.getPickerStateDetails = value;
    }
    get updatePickerStateDetails() {
      return this[updatePickerStateDetails$];
    }
    set updatePickerStateDetails(value) {
      super.updatePickerStateDetails = value;
    }
    get datePickerTheme() {
      return this[datePickerTheme$3];
    }
    set datePickerTheme(value) {
      super.datePickerTheme = value;
    }
    get isRtl() {
      return this[isRtl$3];
    }
    set isRtl(value) {
      super.isRtl = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get textScaleFactor() {
      return this[textScaleFactor$3];
    }
    set textScaleFactor(value) {
      super.textScaleFactor = value;
    }
    createState() {
      return new date_picker._PickerViewState.new();
    }
  };
  (date_picker._PickerView.new = function(picker, controller, visibleDates, enableMultiView, width, height, datePickerTheme, focusNode, textScaleFactor, opts) {
    if (picker == null) dart.nullFailed(I[10], 8800, 12, "picker");
    if (visibleDates == null) dart.nullFailed(I[10], 8802, 12, "visibleDates");
    if (enableMultiView == null) dart.nullFailed(I[10], 8803, 12, "enableMultiView");
    if (width == null) dart.nullFailed(I[10], 8804, 12, "width");
    if (height == null) dart.nullFailed(I[10], 8805, 12, "height");
    if (datePickerTheme == null) dart.nullFailed(I[10], 8806, 12, "datePickerTheme");
    if (textScaleFactor == null) dart.nullFailed(I[10], 8808, 12, "textScaleFactor");
    let key = opts && 'key' in opts ? opts.key : null;
    let getPickerStateDetails = opts && 'getPickerStateDetails' in opts ? opts.getPickerStateDetails : null;
    if (getPickerStateDetails == null) dart.nullFailed(I[10], 8810, 21, "getPickerStateDetails");
    let updatePickerStateDetails = opts && 'updatePickerStateDetails' in opts ? opts.updatePickerStateDetails : null;
    if (updatePickerStateDetails == null) dart.nullFailed(I[10], 8811, 21, "updatePickerStateDetails");
    let isRtl = opts && 'isRtl' in opts ? opts.isRtl : false;
    if (isRtl == null) dart.nullFailed(I[10], 8812, 12, "isRtl");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[picker$0] = picker;
    this[controller$3] = controller;
    this[visibleDates$4] = visibleDates;
    this[enableMultiView$5] = enableMultiView;
    this[width$3] = width;
    this[height$3] = height;
    this[datePickerTheme$3] = datePickerTheme;
    this[focusNode$] = focusNode;
    this[textScaleFactor$3] = textScaleFactor;
    this[getPickerStateDetails$1] = getPickerStateDetails;
    this[updatePickerStateDetails$] = updatePickerStateDetails;
    this[isRtl$3] = isRtl;
    date_picker._PickerView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = date_picker._PickerView.prototype;
  dart.addTypeTests(date_picker._PickerView);
  dart.addTypeCaches(date_picker._PickerView);
  dart.setMethodSignature(date_picker._PickerView, () => ({
    __proto__: dart.getMethods(date_picker._PickerView.__proto__),
    createState: dart.fnType(date_picker._PickerViewState, [])
  }));
  dart.setLibraryUri(date_picker._PickerView, I[11]);
  dart.setFieldSignature(date_picker._PickerView, () => ({
    __proto__: dart.getFields(date_picker._PickerView.__proto__),
    visibleDates: dart.finalFieldType(core.List),
    picker: dart.finalFieldType(date_picker._SfDateRangePicker),
    enableMultiView: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(dart.dynamic),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    getPickerStateDetails: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    updatePickerStateDetails: dart.finalFieldType(dart.fnType(dart.void, [picker_helper.PickerStateArgs])),
    datePickerTheme: dart.finalFieldType(daterangepicker_theme.SfDateRangePickerThemeData),
    isRtl: dart.finalFieldType(core.bool),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    textScaleFactor: dart.finalFieldType(core.double)
  }));
  var _mouseHoverPosition = dart.privateName(date_picker, "_mouseHoverPosition");
  var _previousSelectedDate = dart.privateName(date_picker, "_previousSelectedDate");
  var _isDragStart = dart.privateName(date_picker, "_isDragStart");
  var _pointerEnterEvent = dart.privateName(date_picker, "_pointerEnterEvent");
  var _pointerHoverEvent = dart.privateName(date_picker, "_pointerHoverEvent");
  var _pointerExitEvent = dart.privateName(date_picker, "_pointerExitEvent");
  var _addMonthView = dart.privateName(date_picker, "_addMonthView");
  var _updateTapCallback = dart.privateName(date_picker, "_updateTapCallback");
  var _getDragStartCallback = dart.privateName(date_picker, "_getDragStartCallback");
  var _getDragUpdateCallback = dart.privateName(date_picker, "_getDragUpdateCallback");
  var _addYearView = dart.privateName(date_picker, "_addYearView");
  var _drawSingleSelectionForMonth = dart.privateName(date_picker, "_drawSingleSelectionForMonth");
  var _drawMultipleSelectionForMonth = dart.privateName(date_picker, "_drawMultipleSelectionForMonth");
  var _drawRangeSelectionForMonth = dart.privateName(date_picker, "_drawRangeSelectionForMonth");
  var _drawRangesSelectionForMonth = dart.privateName(date_picker, "_drawRangesSelectionForMonth");
  var _drawExtendableRangeSelection = dart.privateName(date_picker, "_drawExtendableRangeSelection");
  var _getMonthView = dart.privateName(date_picker, "_getMonthView");
  var _getViewHeader = dart.privateName(date_picker, "_getViewHeader");
  var _handleTouch = dart.privateName(date_picker, "_handleTouch");
  var _handleYearPanelSelection = dart.privateName(date_picker, "_handleYearPanelSelection");
  var _getSelectedIndex$ = dart.privateName(date_picker, "_getSelectedIndex");
  var _getCurrentDateIndex = dart.privateName(date_picker, "_getCurrentDateIndex");
  var _getYearViewIndex = dart.privateName(date_picker, "_getYearViewIndex");
  var _updateMouseHover = dart.privateName(date_picker, "_updateMouseHover");
  var _getYearView = dart.privateName(date_picker, "_getYearView");
  var _dragStart = dart.privateName(date_picker, "_dragStart");
  var _dragStartOnYear = dart.privateName(date_picker, "_dragStartOnYear");
  var _dragUpdate = dart.privateName(date_picker, "_dragUpdate");
  var _dragUpdateOnYear = dart.privateName(date_picker, "_dragUpdateOnYear");
  var _updateSelectedRangesOnDragStart = dart.privateName(date_picker, "_updateSelectedRangesOnDragStart");
  var _updateSelectedRangesOnDragUpdateMonth = dart.privateName(date_picker, "_updateSelectedRangesOnDragUpdateMonth");
  var _removeInterceptRanges = dart.privateName(date_picker, "_removeInterceptRanges");
  var _getSelectedRangeOnDragUpdate = dart.privateName(date_picker, "_getSelectedRangeOnDragUpdate");
  var _isSameOrBeforeDateCell = dart.privateName(date_picker, "_isSameOrBeforeDateCell");
  var _isSameOrAfterDateCell = dart.privateName(date_picker, "_isSameOrAfterDateCell");
  var _getFirstDate = dart.privateName(date_picker, "_getFirstDate");
  var _getSelectedRangeOnDragUpdateYear = dart.privateName(date_picker, "_getSelectedRangeOnDragUpdateYear");
  var _updateSelectedRangesOnDragUpdateYear = dart.privateName(date_picker, "_updateSelectedRangesOnDragUpdateYear");
  var _drawSingleSelectionForYear = dart.privateName(date_picker, "_drawSingleSelectionForYear");
  var _drawMultipleSelectionForYear = dart.privateName(date_picker, "_drawMultipleSelectionForYear");
  var _drawRangeSelectionForYear = dart.privateName(date_picker, "_drawRangeSelectionForYear");
  var _drawRangesSelectionForYear = dart.privateName(date_picker, "_drawRangesSelectionForYear");
  var _drawYearCellSelection = dart.privateName(date_picker, "_drawYearCellSelection");
  var _removeInterceptRangesForMonth = dart.privateName(date_picker, "_removeInterceptRangesForMonth");
  var _isDateWithInYearRange = dart.privateName(date_picker, "_isDateWithInYearRange");
  var _removeInterceptRangesForYear = dart.privateName(date_picker, "_removeInterceptRangesForYear");
  const State_TickerProviderStateMixin$36$ = class State_TickerProviderStateMixin extends framework.State$(date_picker._PickerView) {};
  (State_TickerProviderStateMixin$36$.new = function() {
    ticker_provider.TickerProviderStateMixin$(date_picker._PickerView)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$, ticker_provider.TickerProviderStateMixin$(date_picker._PickerView));
  date_picker._PickerViewState = class _PickerViewState extends State_TickerProviderStateMixin$36$ {
    build(context) {
      let t81, t80;
      if (context == null) dart.nullFailed(I[10], 8884, 29, "context");
      let locale = localizations$.Localizations.localeOf(context);
      let localizations = global_localizations.SfLocalizations.of(context);
      this[_isMobilePlatform] = picker_helper.DateRangePickerHelper.isMobileLayout(theme.Theme.of(context).platform);
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            return new gesture_detector.GestureDetector.new({child: new basic.MouseRegion.new({onEnter: dart.bind(this, _pointerEnterEvent), onHover: dart.bind(this, _pointerHoverEvent), onExit: dart.bind(this, _pointerExitEvent), child: new container.Container.new({width: this.widget.width, height: this.widget.height, child: this[_addMonthView](locale, this.widget.datePickerTheme, localizations), $creationLocationd_0dea112b090073317d4: C[875] || CT.C875}), $creationLocationd_0dea112b090073317d4: C[880] || CT.C880}), onTapUp: dart.bind(this, _updateTapCallback), onHorizontalDragStart: this[_getDragStartCallback](), onVerticalDragStart: this[_getDragStartCallback](), onHorizontalDragUpdate: this[_getDragUpdateCallback](), onVerticalDragUpdate: this[_getDragUpdateCallback](), $creationLocationd_0dea112b090073317d4: C[886] || CT.C886});
          }
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            return new gesture_detector.GestureDetector.new({child: new basic.MouseRegion.new({onEnter: dart.bind(this, _pointerEnterEvent), onHover: dart.bind(this, _pointerHoverEvent), onExit: dart.bind(this, _pointerExitEvent), child: this[_addYearView](locale, localizations), $creationLocationd_0dea112b090073317d4: C[894] || CT.C894}), onTapUp: dart.bind(this, _updateTapCallback), onHorizontalDragStart: this[_getDragStartCallback](), onVerticalDragStart: this[_getDragStartCallback](), onHorizontalDragUpdate: this[_getDragUpdateCallback](), onVerticalDragUpdate: this[_getDragUpdateCallback](), $creationLocationd_0dea112b090073317d4: C[900] || CT.C900});
          }
        }
      }
    }
    [_drawSelection](selectedDate) {
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        {
          this[_drawSingleSelectionForMonth](selectedDate);
          break;
        }
        case C[67] || CT.C67:
        {
          this[_drawMultipleSelectionForMonth](selectedDate);
          break;
        }
        case C[101] || CT.C101:
        {
          this[_drawRangeSelectionForMonth](selectedDate);
          break;
        }
        case C[169] || CT.C169:
        {
          this[_drawRangesSelectionForMonth](selectedDate);
          break;
        }
        case C[135] || CT.C135:
        {
          this[_drawExtendableRangeSelection](selectedDate);
        }
      }
    }
    [_addMonthView](locale, datePickerTheme, localizations) {
      if (locale == null) dart.nullFailed(I[10], 8957, 14, "locale");
      if (datePickerTheme == null) dart.nullFailed(I[10], 8958, 34, "datePickerTheme");
      if (localizations == null) dart.nullFailed(I[10], 8959, 23, "localizations");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let viewHeaderHeight = core.double.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight'));
      if (pickerView == date_picker_manager.DateRangePickerView.month && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        viewHeaderHeight = 0.0;
      }
      let height = dart.notNull(this.widget.height) - dart.notNull(viewHeaderHeight);
      this[_monthView] = this[_getMonthView](locale, this.widget.datePickerTheme, localizations, this.widget.width, height);
      return new basic.Stack.new({children: T.JSArrayOfWidget().of([this[_getViewHeader](viewHeaderHeight, locale, datePickerTheme), new basic.Positioned.new({left: 0.0, top: viewHeaderHeight, right: 0.0, height: height, child: new basic.RepaintBoundary.new({child: this[_monthView], $creationLocationd_0dea112b090073317d4: C[908] || CT.C908}), $creationLocationd_0dea112b090073317d4: C[911] || CT.C911})]), $creationLocationd_0dea112b090073317d4: C[918] || CT.C918});
    }
    [_getMonthView](locale, datePickerTheme, localizations, width, height) {
      if (locale == null) dart.nullFailed(I[10], 8990, 14, "locale");
      if (datePickerTheme == null) dart.nullFailed(I[10], 8991, 34, "datePickerTheme");
      if (localizations == null) dart.nullFailed(I[10], 8992, 23, "localizations");
      if (width == null) dart.nullFailed(I[10], 8993, 14, "width");
      if (height == null) dart.nullFailed(I[10], 8994, 14, "height");
      let rowCount = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      return new month_view.MonthView.new(this.widget.visibleDates, rowCount, this.widget.picker.monthCellStyle, this.widget.picker.selectionTextStyle, this.widget.picker.rangeTextStyle, this.widget.picker.selectionColor, this.widget.picker.startRangeSelectionColor, this.widget.picker.endRangeSelectionColor, this.widget.picker.rangeSelectionColor, this.widget.datePickerTheme, this.widget.isRtl, this.widget.picker.todayHighlightColor, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'specialDates')), T.ListOfint().as(dart.dload(this.widget.picker.monthViewSettings, 'weekendDays')), this.widget.picker.selectionShape, this.widget.picker.selectionRadius, this[_mouseHoverPosition], this.widget.enableMultiView, this.widget.picker.viewSpacing, new (T.ValueNotifierOfbool()).new(false), this.widget.textScaleFactor, this.widget.picker.selectionMode, this.widget.picker.isHijri, localizations, this.widget.picker.navigationDirection, width, height, this.widget.getPickerStateDetails, this.widget.picker.cellBuilder, core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'showWeekNumber')), date_picker_manager.DateRangePickerWeekNumberStyle.as(dart.dload(this.widget.picker.monthViewSettings, 'weekNumberStyle')), this[_isMobilePlatform], {$creationLocationd_0dea112b090073317d4: C[921] || CT.C921});
    }
    [_getViewHeader](viewHeaderHeight, locale, datePickerTheme) {
      let t80;
      if (viewHeaderHeight == null) dart.nullFailed(I[10], 9038, 32, "viewHeaderHeight");
      if (locale == null) dart.nullFailed(I[10], 9038, 57, "locale");
      if (datePickerTheme == null) dart.nullFailed(I[10], 9039, 34, "datePickerTheme");
      if (viewHeaderHeight === 0) {
        return new basic.Positioned.new({left: 0.0, top: 0.0, right: 0.0, height: viewHeaderHeight, child: new container.Container.new({$creationLocationd_0dea112b090073317d4: C[960] || CT.C960}), $creationLocationd_0dea112b090073317d4: C[961] || CT.C961});
      }
      let todayTextColor = dart.dload(this.widget.picker.monthCellStyle, 'todayTextStyle') != null && dart.dload(dart.nullCheck(dart.dload(this.widget.picker.monthCellStyle, 'todayTextStyle')), 'color') != null ? ui.Color.as(dart.nullCheck(dart.dload(dart.nullCheck(dart.dload(this.widget.picker.monthCellStyle, 'todayTextStyle')), 'color'))) : this.widget.picker.todayHighlightColor != null && !dart.equals(this.widget.picker.todayHighlightColor, colors$.Colors.transparent) ? dart.nullCheck(this.widget.picker.todayHighlightColor) : dart.nullCheck(this.widget.datePickerTheme.todayHighlightColor);
      return new basic.Positioned.new({left: 0.0, top: 0.0, right: 0.0, height: viewHeaderHeight, child: new container.Container.new({color: T.ColorN().as((t80 = dart.dload(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderStyle'), 'backgroundColor'), t80 == null ? this.widget.datePickerTheme.viewHeaderBackgroundColor : t80)), child: new basic.RepaintBoundary.new({child: new basic.CustomPaint.new({painter: new date_picker._PickerViewHeaderPainter.new(this.widget.visibleDates, this.widget.picker.navigationMode, date_picker_manager.DateRangePickerViewHeaderStyle.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderStyle')), viewHeaderHeight, this.widget.picker.monthViewSettings, this.widget.datePickerTheme, locale, this.widget.isRtl, this.widget.picker.monthCellStyle, this.widget.enableMultiView, this.widget.picker.viewSpacing, todayTextColor, this.widget.textScaleFactor, this.widget.picker.isHijri, this.widget.picker.navigationDirection, null, core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'showWeekNumber')), this[_isMobilePlatform]), $creationLocationd_0dea112b090073317d4: C[968] || CT.C968}), $creationLocationd_0dea112b090073317d4: C[971] || CT.C971}), $creationLocationd_0dea112b090073317d4: C[974] || CT.C974}), $creationLocationd_0dea112b090073317d4: C[978] || CT.C978});
    }
    [_updateTapCallback](details) {
      if (details == null) dart.nullFailed(I[10], 9094, 40, "details");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            let viewHeaderHeight = core.double.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight'));
            if (this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
              viewHeaderHeight = 0.0;
            }
            let weekNumberPanelWidth = picker_helper.DateRangePickerHelper.getWeekNumberPanelWidth(core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'showWeekNumber')), this.widget.width, this[_isMobilePlatform]);
            if (dart.notNull(details.localPosition.dy) < dart.notNull(viewHeaderHeight) || !dart.test(this.widget.isRtl) && dart.notNull(details.localPosition.dx) < dart.notNull(weekNumberPanelWidth) || dart.test(this.widget.isRtl) && dart.notNull(details.localPosition.dx) > dart.notNull(this.widget.width) - dart.notNull(weekNumberPanelWidth)) {
              return;
            }
            if (dart.notNull(details.localPosition.dy) > dart.notNull(viewHeaderHeight)) {
              this[_handleTouch](new ui.Offset.new(details.localPosition.dx, dart.notNull(details.localPosition.dy) - dart.notNull(viewHeaderHeight)), details);
            }
          }
          break;
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            this[_handleYearPanelSelection](new ui.Offset.new(details.localPosition.dx, details.localPosition.dy));
          }
        }
      }
      if (this.widget.focusNode != null && !dart.test(dart.nullCheck(this.widget.focusNode).hasFocus)) {
        dart.nullCheck(this.widget.focusNode).requestFocus();
      }
    }
    [_updateMouseHover](globalPosition) {
      let t81, t80, t80$;
      if (globalPosition == null) dart.nullFailed(I[10], 9144, 33, "globalPosition");
      if (dart.test(this[_isMobilePlatform])) {
        return;
      }
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let renderObject = dart.nullCheck(this.context.findRenderObject());
      let box = box$.RenderBox.is(renderObject) ? renderObject : null;
      let localPosition = dart.nullCheck(box).globalToLocal(globalPosition);
      let viewHeaderHeight = pickerView == date_picker_manager.DateRangePickerView.month && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal ? core.double.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight')) : 0.0;
      let xPosition = localPosition.dx;
      let yPosition = dart.notNull(localPosition.dy) - dart.notNull(viewHeaderHeight);
      if (dart.notNull(localPosition.dy) < dart.notNull(viewHeaderHeight)) {
        return;
      }
      let range = null;
      if (this.widget.picker.selectionMode == date_picker_manager.DateRangePickerSelectionMode.extendableRange && this[_pickerStateDetails$0].selectedRange != null && this.widget.picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.scroll) {
        let index = null;
        let date = null;
        let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
        switch (pickerView) {
          case C[367] || CT.C367:
          {
            {
              index = this[_getSelectedIndex$](xPosition, yPosition);
              if (index === -1) {
                return;
              }
              date = this.widget.visibleDates[$_get](index);
              if (!dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, date, this.widget.picker.isHijri))) {
                return;
              }
              let currentMonthIndex = this[_getCurrentDateIndex](index);
              if (!dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(this.widget.visibleDates[$_get](currentMonthIndex), picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), date, this.widget.picker.isHijri))) {
                return;
              }
            }
            break;
          }
          case C[368] || CT.C368:
          case C[369] || CT.C369:
          case C[370] || CT.C370:
          {
            {
              if (dart.test(this.widget.picker.allowViewNavigation)) {
                this[_mouseHoverPosition].value = new picker_helper.HoveringDetails.new(range, new ui.Offset.new(xPosition, yPosition));
                return;
              }
              index = this[_getYearViewIndex](xPosition, yPosition);
              let viewCount = dart.test(this.widget.enableMultiView) ? 2 : 1;
              if (index === -1 || dart.notNull(index) >= 12 * viewCount) {
                return;
              }
              date = this.widget.visibleDates[$_get](index);
              if (!dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(date, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
                return;
              }
            }
          }
        }
        let rangeStartDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
        let rangeEndDate = (t80$ = dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate'), t80$ == null ? date : t80$);
        if (dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') != null && dart.test(core$.isSameOrAfterDate(rangeStartDate, date)) && dart.test(core$.isSameOrBeforeDate(rangeEndDate, date))) {
          rangeStartDate = null;
          rangeEndDate = null;
        } else if (dart.equals(dart.dsend(date, 'isAfter', [rangeEndDate]), true)) {
          rangeStartDate = rangeEndDate;
          rangeEndDate = date;
        } else if (dart.equals(dart.dsend(date, 'isBefore', [rangeStartDate]), true)) {
          rangeEndDate = rangeStartDate;
          rangeStartDate = date;
        }
        range = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(rangeStartDate), T.HijriDateTimeN().as(rangeEndDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(rangeStartDate), T.DateTimeN().as(rangeEndDate));
      }
      this[_mouseHoverPosition].value = new picker_helper.HoveringDetails.new(range, new ui.Offset.new(xPosition, yPosition));
    }
    [_pointerEnterEvent](event) {
      if (event == null) dart.nullFailed(I[10], 9265, 45, "event");
      this[_updateMouseHover](event.position);
    }
    [_pointerHoverEvent](event) {
      if (event == null) dart.nullFailed(I[10], 9269, 45, "event");
      this[_updateMouseHover](event.position);
    }
    [_pointerExitEvent](event) {
      if (event == null) dart.nullFailed(I[10], 9273, 43, "event");
      this[_mouseHoverPosition].value = null;
    }
    [_addYearView](locale, localizations) {
      if (locale == null) dart.nullFailed(I[10], 9277, 30, "locale");
      if (localizations == null) dart.nullFailed(I[10], 9277, 54, "localizations");
      this[_yearView] = this[_getYearView](locale, localizations);
      return new basic.RepaintBoundary.new({child: this[_yearView], $creationLocationd_0dea112b090073317d4: C[985] || CT.C985});
    }
    [_getYearView](locale, localizations) {
      if (locale == null) dart.nullFailed(I[10], 9284, 32, "locale");
      if (localizations == null) dart.nullFailed(I[10], 9284, 56, "localizations");
      return new year_view.YearView.new(this.widget.visibleDates, this.widget.picker.yearCellStyle, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, this.widget.picker.todayHighlightColor, this.widget.picker.selectionShape, this.widget.picker.monthFormat, this.widget.isRtl, this.widget.datePickerTheme, locale, this[_mouseHoverPosition], this.widget.enableMultiView, this.widget.picker.viewSpacing, this.widget.picker.selectionTextStyle, this.widget.picker.rangeTextStyle, this.widget.picker.selectionColor, this.widget.picker.startRangeSelectionColor, this.widget.picker.endRangeSelectionColor, this.widget.picker.rangeSelectionColor, this.widget.picker.selectionMode, this.widget.picker.selectionRadius, new (T.ValueNotifierOfbool()).new(false), this.widget.textScaleFactor, this.widget.picker.allowViewNavigation, this.widget.picker.cellBuilder, this.widget.getPickerStateDetails, picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view')), this.widget.picker.isHijri, localizations, this.widget.picker.navigationDirection, this.widget.width, this.widget.height, {$creationLocationd_0dea112b090073317d4: C[988] || CT.C988});
    }
    [_getDragStartCallback]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView != date_picker_manager.DateRangePickerView.month && dart.test(this.widget.picker.allowViewNavigation) || !dart.test(date_picker._isSwipeInteractionEnabled(core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'enableSwipeSelection')), this.widget.picker.navigationMode))) {
        return null;
      }
      if (this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.range && this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.multiRange && this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.extendableRange) {
        return null;
      }
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            return dart.bind(this, _dragStart);
          }
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          return dart.bind(this, _dragStartOnYear);
        }
      }
    }
    [_getDragUpdateCallback]() {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView != date_picker_manager.DateRangePickerView.month && dart.test(this.widget.picker.allowViewNavigation) || !dart.test(date_picker._isSwipeInteractionEnabled(core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'enableSwipeSelection')), this.widget.picker.navigationMode))) {
        return null;
      }
      if (this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.range && this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.multiRange && this.widget.picker.selectionMode != date_picker_manager.DateRangePickerSelectionMode.extendableRange) {
        return null;
      }
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          {
            return dart.bind(this, _dragUpdate);
          }
        }
        case C[368] || CT.C368:
        case C[369] || CT.C369:
        case C[370] || CT.C370:
        {
          {
            return dart.bind(this, _dragUpdateOnYear);
          }
        }
      }
    }
    [_getYearViewIndex](xPosition, yPosition) {
      if (xPosition == null) dart.nullFailed(I[10], 9387, 32, "xPosition");
      if (yPosition == null) dart.nullFailed(I[10], 9387, 50, "yPosition");
      let rowIndex = null;
      let columnIndex = null;
      let columnCount = 3;
      let width = this.widget.width;
      let height = this.widget.height;
      let rowCount = 4;
      let index = -1;
      if (dart.test(this.widget.enableMultiView)) {
        switch (this.widget.picker.navigationDirection) {
          case C[358] || CT.C358:
          {
            {
              columnCount = columnCount * 2;
              width = dart.notNull(width) - dart.notNull(this.widget.picker.viewSpacing);
              if (dart.notNull(xPosition) > dart.notNull(width) / 2 && dart.notNull(xPosition) < dart.notNull(width) / 2 + dart.notNull(this.widget.picker.viewSpacing)) {
                return index;
              } else if (dart.notNull(xPosition) > dart.notNull(width) / 2) {
                xPosition = dart.notNull(xPosition) - dart.notNull(this.widget.picker.viewSpacing);
              }
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              rowCount = rowCount * 2;
              height = (dart.notNull(height) - dart.notNull(this.widget.picker.viewSpacing)) / 2;
              if (dart.notNull(yPosition) > dart.notNull(height) && dart.notNull(yPosition) < dart.notNull(height) + dart.notNull(this.widget.picker.viewSpacing)) {
                return index;
              } else if (dart.notNull(yPosition) > dart.notNull(height)) {
                yPosition = dart.notNull(yPosition) - dart.notNull(this.widget.picker.viewSpacing);
              }
            }
          }
        }
      }
      let cellWidth = dart.notNull(width) / columnCount;
      let cellHeight = dart.notNull(height) / 4;
      if (dart.notNull(yPosition) < 0 || dart.notNull(xPosition) < 0) {
        return index;
      }
      rowIndex = (dart.notNull(xPosition) / cellWidth)[$truncate]();
      if (dart.notNull(rowIndex) >= columnCount) {
        rowIndex = columnCount - 1;
      } else if (dart.notNull(rowIndex) < 0) {
        return index;
      }
      columnIndex = (dart.notNull(yPosition) / cellHeight)[$truncate]();
      if (dart.notNull(columnIndex) >= rowCount) {
        columnIndex = rowCount - 1;
      } else if (dart.notNull(columnIndex) < 0) {
        return index;
      }
      if (dart.test(this.widget.isRtl)) {
        rowIndex = picker_helper.DateRangePickerHelper.getRtlIndex(columnCount, rowIndex);
        if (dart.test(this.widget.enableMultiView) && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
          if (dart.notNull(columnIndex) > 3) {
            columnIndex = dart.notNull(columnIndex) - (3 + 1);
          } else {
            columnIndex = dart.notNull(columnIndex) + (3 + 1);
          }
        }
      }
      index = dart.notNull(columnIndex) * 3 + (dart.notNull(rowIndex) / 3)[$truncate]() * 12 + rowIndex[$modulo](3);
      return dart.test(this.widget.enableMultiView) && dart.test(picker_helper.DateRangePickerHelper.isLeadingCellDate(index, (index / 12)[$truncate]() * 12, this.widget.visibleDates, dart.dload(this.widget.controller, 'view'))) ? -1 : index;
    }
    [_getSelectedIndex$](xPosition, yPosition) {
      if (xPosition == null) dart.nullFailed(I[10], 9469, 32, "xPosition");
      if (yPosition == null) dart.nullFailed(I[10], 9469, 50, "yPosition");
      let weekNumberPanelWidth = picker_helper.DateRangePickerHelper.getWeekNumberPanelWidth(core.bool.as(dart.dload(this.widget.picker.monthViewSettings, 'showWeekNumber')), this.widget.width, this[_isMobilePlatform]);
      let rowIndex = null;
      let columnIndex = null;
      let width = dart.notNull(this.widget.width) - dart.notNull(weekNumberPanelWidth);
      let height = this.widget.height;
      let index = -1;
      let totalColumnCount = 7;
      let rowCount = picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri);
      let totalRowCount = rowCount;
      if (dart.test(this.widget.enableMultiView)) {
        switch (this.widget.picker.navigationDirection) {
          case C[358] || CT.C358:
          {
            {
              width = width - dart.notNull(this.widget.picker.viewSpacing) - dart.notNull(weekNumberPanelWidth);
              totalColumnCount = totalColumnCount * 2;
              if (dart.notNull(xPosition) > width / 2 && dart.notNull(xPosition) < width / 2 + dart.notNull(this.widget.picker.viewSpacing) + dart.notNull(weekNumberPanelWidth)) {
                return index;
              } else if (dart.notNull(xPosition) > width / 2) {
                xPosition = dart.notNull(xPosition) - dart.notNull(this.widget.picker.viewSpacing) - dart.notNull(weekNumberPanelWidth);
              }
            }
            break;
          }
          case C[359] || CT.C359:
          {
            {
              height = (dart.notNull(height) - dart.notNull(this.widget.picker.viewSpacing)) / 2;
              totalRowCount = dart.notNull(totalRowCount) * 2;
              if (dart.notNull(yPosition) > dart.notNull(height) && dart.notNull(yPosition) < dart.notNull(height) + dart.notNull(this.widget.picker.viewSpacing)) {
                return index;
              } else if (dart.notNull(yPosition) > dart.notNull(height)) {
                yPosition = dart.notNull(yPosition) - dart.notNull(this.widget.picker.viewSpacing);
              }
            }
          }
        }
      }
      if (dart.notNull(yPosition) < 0 || !dart.test(this.widget.isRtl) && dart.notNull(xPosition) < dart.notNull(weekNumberPanelWidth) || dart.test(this.widget.isRtl) && dart.notNull(xPosition) > dart.notNull(this.widget.width) - dart.notNull(weekNumberPanelWidth)) {
        return index;
      }
      if (!dart.test(this.widget.isRtl)) {
        xPosition = dart.notNull(xPosition) - dart.notNull(weekNumberPanelWidth);
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let viewHeaderHeight = core.double.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight'));
      if (pickerView == date_picker_manager.DateRangePickerView.month && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        viewHeaderHeight = 0.0;
      }
      let cellWidth = width / totalColumnCount;
      let cellHeight = (dart.notNull(height) - dart.notNull(viewHeaderHeight)) / dart.notNull(rowCount);
      rowIndex = (dart.notNull(xPosition) / cellWidth)[$truncate]();
      if (dart.notNull(rowIndex) >= totalColumnCount) {
        rowIndex = totalColumnCount - 1;
      } else if (dart.notNull(rowIndex) < 0) {
        return index;
      }
      columnIndex = (dart.notNull(yPosition) / cellHeight)[$truncate]();
      if (dart.notNull(columnIndex) >= dart.notNull(totalRowCount)) {
        columnIndex = dart.notNull(totalRowCount) - 1;
      } else if (dart.notNull(columnIndex) < 0) {
        return index;
      }
      if (dart.test(this.widget.isRtl)) {
        rowIndex = picker_helper.DateRangePickerHelper.getRtlIndex(totalColumnCount, rowIndex);
        if (dart.test(this.widget.enableMultiView) && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
          if (dart.notNull(columnIndex) >= dart.notNull(rowCount)) {
            columnIndex = dart.notNull(columnIndex) - dart.notNull(rowCount);
          } else {
            columnIndex = dart.notNull(columnIndex) + dart.notNull(rowCount);
          }
        }
      }
      index = dart.notNull(columnIndex) * 7 + (dart.notNull(rowIndex) / 7)[$truncate]() * (dart.notNull(totalRowCount) * 7) + rowIndex[$modulo](7);
      return index;
    }
    [_dragStart](details) {
      let t81, t80, t81$, t80$;
      if (details == null) dart.nullFailed(I[10], 9574, 36, "details");
      this[_isDragStart] = false;
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let xPosition = details.localPosition.dx;
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      let yPosition = details.localPosition.dy;
      if (pickerView == date_picker_manager.DateRangePickerView.month && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
        yPosition = dart.notNull(details.localPosition.dy) - dart.notNull(core.num.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight')));
      }
      let index = this[_getSelectedIndex$](xPosition, yPosition);
      if (index === -1) {
        return;
      }
      let selectedDate = this.widget.visibleDates[$_get](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, selectedDate, this.widget.picker.isHijri))) {
        return;
      }
      let currentMonthIndex = this[_getCurrentDateIndex](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(this.widget.visibleDates[$_get](currentMonthIndex), picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), selectedDate, this.widget.picker.isHijri))) {
        return;
      }
      if (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(this.widget.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate))) {
        return;
      }
      this[_isDragStart] = true;
      this[_updateSelectedRangesOnDragStart](this[_monthView], selectedDate);
      this[_previousSelectedDate] = selectedDate;
      t80$ = this.widget;
      t81$ = this[_pickerStateDetails$0];
      t80$.updatePickerStateDetails(t81$);
      dart.nullCheck(this[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_monthView]).selectionNotifier.value);
    }
    [_dragUpdate](details) {
      let t81, t80, t81$, t80$;
      if (details == null) dart.nullFailed(I[10], 9632, 38, "details");
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let xPosition = details.localPosition.dx;
      let yPosition = details.localPosition.dy;
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.month && this.widget.picker.navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.horizontal) {
        yPosition = dart.notNull(details.localPosition.dy) - dart.notNull(core.num.as(dart.dload(this.widget.picker.monthViewSettings, 'viewHeaderHeight')));
      }
      let index = this[_getSelectedIndex$](xPosition, yPosition);
      if (index === -1) {
        return;
      }
      let selectedDate = this.widget.visibleDates[$_get](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, selectedDate, this.widget.picker.isHijri))) {
        return;
      }
      let currentMonthIndex = this[_getCurrentDateIndex](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(this.widget.visibleDates[$_get](currentMonthIndex), picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), selectedDate, this.widget.picker.isHijri))) {
        return;
      }
      if (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(this.widget.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate))) {
        return;
      }
      this[_updateSelectedRangesOnDragUpdateMonth](selectedDate);
      this[_previousSelectedDate] = selectedDate;
      this[_isDragStart] = true;
      t80$ = this.widget;
      t81$ = this[_pickerStateDetails$0];
      t80$.updatePickerStateDetails(t81$);
      dart.nullCheck(this[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_monthView]).selectionNotifier.value);
    }
    [_updateSelectedRangesOnDragStart](view, selectedDate) {
      let t80;
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        case C[67] || CT.C67:
        {
          break;
        }
        case C[101] || CT.C101:
        {
          {
            this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            t80 = this[_pickerStateDetails$0];
            t80.selectedRanges == null ? t80.selectedRanges = [] : null;
            dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
            this[_removeInterceptRanges](dart.nullCheck(this[_pickerStateDetails$0].selectedRanges), dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1));
          }
          break;
        }
        case C[135] || CT.C135:
        {
          this[_drawExtendableRangeSelection](selectedDate);
        }
      }
    }
    [_updateSelectedRangesOnDragUpdateMonth](selectedDate) {
      let t80;
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        case C[67] || CT.C67:
        {
          break;
        }
        case C[101] || CT.C101:
        {
          {
            if (!dart.test(this[_isDragStart])) {
              this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
            } else {
              if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null) {
                let updatedRange = this[_getSelectedRangeOnDragUpdate](this[_pickerStateDetails$0].selectedRange, selectedDate);
                if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_pickerStateDetails$0].selectedRange, updatedRange))) {
                  return;
                }
                this[_pickerStateDetails$0].selectedRange = updatedRange;
              } else {
                this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
              }
            }
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            t80 = this[_pickerStateDetails$0];
            t80.selectedRanges == null ? t80.selectedRanges = [] : null;
            let count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
            let _lastRange = null;
            if (dart.notNull(count) > 0) {
              _lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(count) - 1);
            }
            if (!dart.test(this[_isDragStart])) {
              dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
            } else {
              if (_lastRange != null && dart.dload(_lastRange, 'startDate') != null) {
                let updatedRange = this[_getSelectedRangeOnDragUpdate](_lastRange, selectedDate);
                if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(_lastRange, updatedRange))) {
                  return;
                }
                dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_set](dart.notNull(count) - 1, updatedRange);
              } else {
                dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
              }
            }
            this[_removeInterceptRanges](dart.nullCheck(this[_pickerStateDetails$0].selectedRanges), dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1));
          }
          break;
        }
        case C[135] || CT.C135:
        {
          this[_drawExtendableRangeSelection](selectedDate);
        }
      }
    }
    [_getSelectedRangeOnDragUpdate](previousRange, selectedDate) {
      let t80;
      let previousRangeStartDate = dart.dload(previousRange, 'startDate');
      let previousRangeEndDate = (t80 = dart.dload(previousRange, 'endDate'), t80 == null ? dart.dload(previousRange, 'startDate') : t80);
      let rangeStartDate = previousRangeStartDate;
      let rangeEndDate = selectedDate;
      if (dart.test(core$.isSameDate(previousRangeStartDate, this[_previousSelectedDate]))) {
        if (dart.test(core$.isSameOrBeforeDate(previousRangeEndDate, rangeEndDate))) {
          rangeStartDate = selectedDate;
          rangeEndDate = previousRangeEndDate;
        } else {
          rangeStartDate = previousRangeEndDate;
          rangeEndDate = selectedDate;
        }
      } else if (dart.test(core$.isSameDate(previousRangeEndDate, this[_previousSelectedDate]))) {
        if (dart.test(core$.isSameOrAfterDate(previousRangeStartDate, rangeEndDate))) {
          rangeStartDate = previousRangeStartDate;
          rangeEndDate = selectedDate;
        } else {
          rangeStartDate = selectedDate;
          rangeEndDate = previousRangeStartDate;
        }
      }
      if (dart.test(this.widget.picker.isHijri)) {
        return new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(rangeStartDate), T.HijriDateTimeN().as(rangeEndDate));
      }
      return new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(rangeStartDate), T.DateTimeN().as(rangeEndDate));
    }
    [_getSelectedRangeOnDragUpdateYear](previousRange, selectedDate) {
      let t80;
      let previousRangeStartDate = dart.dload(previousRange, 'startDate');
      let previousRangeEndDate = (t80 = dart.dload(previousRange, 'endDate'), t80 == null ? dart.dload(previousRange, 'startDate') : t80);
      let rangeStartDate = previousRangeStartDate;
      let rangeEndDate = selectedDate;
      if (dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(previousRangeStartDate, this[_previousSelectedDate], dart.dload(this.widget.controller, 'view')))) {
        if (dart.test(this[_isSameOrBeforeDateCell](previousRangeEndDate, rangeEndDate))) {
          rangeStartDate = selectedDate;
          rangeEndDate = previousRangeEndDate;
        } else {
          rangeStartDate = previousRangeEndDate;
          rangeEndDate = selectedDate;
        }
      } else if (dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(previousRangeEndDate, this[_previousSelectedDate], dart.dload(this.widget.controller, 'view')))) {
        if (dart.test(this[_isSameOrAfterDateCell](previousRangeStartDate, rangeEndDate))) {
          rangeStartDate = previousRangeStartDate;
          rangeEndDate = selectedDate;
        } else {
          rangeStartDate = selectedDate;
          rangeEndDate = previousRangeStartDate;
        }
      }
      rangeEndDate = picker_helper.DateRangePickerHelper.getLastDate(rangeEndDate, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri);
      if (this.widget.picker.maxDate != null) {
        rangeEndDate = dart.equals(dart.dsend(rangeEndDate, 'isAfter', [this.widget.picker.maxDate]), true) ? this.widget.picker.maxDate : rangeEndDate;
      }
      rangeStartDate = this[_getFirstDate](rangeStartDate, this.widget.picker.isHijri);
      if (this.widget.picker.minDate != null) {
        rangeStartDate = dart.equals(dart.dsend(rangeStartDate, 'isBefore', [this.widget.picker.minDate]), true) ? this.widget.picker.minDate : rangeStartDate;
      }
      if (dart.test(this.widget.picker.isHijri)) {
        return new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(rangeStartDate), T.HijriDateTimeN().as(rangeEndDate));
      }
      return new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(rangeStartDate), T.DateTimeN().as(rangeEndDate));
    }
    [_getFirstDate](date, isHijri) {
      if (isHijri == null) dart.nullFailed(I[10], 9874, 44, "isHijri");
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        return date;
      }
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), 1, isHijri);
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dload(date, 'year')), 1, 1, isHijri);
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        return picker_helper.DateRangePickerHelper.getDate(core.int.as(dart.dsend(dart.dsend(dart.dload(date, 'year'), '~/', [10]), '*', [10])), 1, 1, isHijri);
      }
      return date;
    }
    [_isSameOrBeforeDateCell](currentMaxDate, currentDate) {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        return dart.equals(dart.dsend(dart.dload(currentDate, 'month'), '<=', [dart.dload(currentMaxDate, 'month')]), true) && dart.equals(dart.dload(currentDate, 'year'), dart.dload(currentMaxDate, 'year')) || dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '<', [dart.dload(currentMaxDate, 'year')]), true);
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '<=', [dart.dload(currentMaxDate, 'year')]), true);
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        return dart.equals(dart.dsend(dart.dsend(dart.dload(currentDate, 'year'), '~/', [10]), '<=', [dart.dsend(dart.dload(currentMaxDate, 'year'), '~/', [10])]), true);
      }
      return false;
    }
    [_isSameOrAfterDateCell](currentMinDate, currentDate) {
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.year) {
        return dart.equals(dart.dsend(dart.dload(currentDate, 'month'), '>=', [dart.dload(currentMinDate, 'month')]), true) && dart.equals(dart.dload(currentDate, 'year'), dart.dload(currentMinDate, 'year')) || dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '>', [dart.dload(currentMinDate, 'year')]), true);
      } else if (pickerView == date_picker_manager.DateRangePickerView.decade) {
        return dart.equals(dart.dsend(dart.dload(currentDate, 'year'), '>=', [dart.dload(currentMinDate, 'year')]), true);
      } else if (pickerView == date_picker_manager.DateRangePickerView.century) {
        return dart.equals(dart.dsend(dart.dsend(dart.dload(currentDate, 'year'), '~/', [10]), '>=', [dart.dsend(dart.dload(currentMinDate, 'year'), '~/', [10])]), true);
      }
      return false;
    }
    [_updateSelectedRangesOnDragUpdateYear](selectedDate) {
      let t80;
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        case C[67] || CT.C67:
        {
          break;
        }
        case C[101] || CT.C101:
        {
          {
            if (!dart.test(this[_isDragStart])) {
              this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
            } else {
              if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null) {
                let updatedRange = this[_getSelectedRangeOnDragUpdateYear](this[_pickerStateDetails$0].selectedRange, selectedDate);
                if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(this[_pickerStateDetails$0].selectedRange, updatedRange))) {
                  return;
                }
                this[_pickerStateDetails$0].selectedRange = updatedRange;
              } else {
                this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
              }
            }
          }
          break;
        }
        case C[169] || CT.C169:
        {
          {
            t80 = this[_pickerStateDetails$0];
            t80.selectedRanges == null ? t80.selectedRanges = [] : null;
            let count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
            let _lastRange = null;
            if (dart.notNull(count) > 0) {
              _lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(count) - 1);
            }
            if (!dart.test(this[_isDragStart])) {
              dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
            } else {
              if (_lastRange != null && dart.dload(_lastRange, 'startDate') != null) {
                let updatedRange = this[_getSelectedRangeOnDragUpdateYear](_lastRange, selectedDate);
                if (dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(_lastRange, updatedRange))) {
                  return;
                }
                dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_set](dart.notNull(count) - 1, updatedRange);
              } else {
                dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
              }
            }
            this[_removeInterceptRanges](dart.nullCheck(this[_pickerStateDetails$0].selectedRanges), dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1));
          }
          break;
        }
        case C[135] || CT.C135:
        {
          this[_drawExtendableRangeSelection](selectedDate);
        }
      }
    }
    [_dragStartOnYear](details) {
      let t81, t80, t81$, t80$;
      if (details == null) dart.nullFailed(I[10], 10008, 42, "details");
      this[_isDragStart] = false;
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let index = this[_getYearViewIndex](details.localPosition.dx, details.localPosition.dy);
      if (index === -1) {
        return;
      }
      let selectedDate = this.widget.visibleDates[$_get](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(selectedDate, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
        return;
      }
      this[_isDragStart] = true;
      this[_updateSelectedRangesOnDragStart](this[_yearView], selectedDate);
      this[_previousSelectedDate] = selectedDate;
      t80$ = this.widget;
      t81$ = this[_pickerStateDetails$0];
      t80$.updatePickerStateDetails(t81$);
      dart.nullCheck(this[_yearView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_yearView]).selectionNotifier.value);
    }
    [_dragUpdateOnYear](details) {
      let t81, t80, t81$, t80$;
      if (details == null) dart.nullFailed(I[10], 10038, 44, "details");
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let index = this[_getYearViewIndex](details.localPosition.dx, details.localPosition.dy);
      if (index === -1) {
        return;
      }
      let selectedDate = this.widget.visibleDates[$_get](index);
      if (!dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(selectedDate, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
        return;
      }
      this[_updateSelectedRangesOnDragUpdateYear](selectedDate);
      this[_previousSelectedDate] = selectedDate;
      this[_isDragStart] = true;
      t80$ = this.widget;
      t81$ = this[_pickerStateDetails$0];
      t80$.updatePickerStateDetails(t81$);
      dart.nullCheck(this[_yearView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_yearView]).selectionNotifier.value);
    }
    [_handleTouch](details, tapUpDetails) {
      let t81, t80, t81$, t80$;
      if (details == null) dart.nullFailed(I[10], 10066, 28, "details");
      if (tapUpDetails == null) dart.nullFailed(I[10], 10066, 50, "tapUpDetails");
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (pickerView == date_picker_manager.DateRangePickerView.month) {
        let index = this[_getSelectedIndex$](details.dx, details.dy);
        if (index === -1) {
          return;
        }
        let selectedDate = this.widget.visibleDates[$_get](index);
        if (!dart.test(picker_helper.DateRangePickerHelper.isEnabledDate(this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, selectedDate, this.widget.picker.isHijri))) {
          return;
        }
        let currentMonthIndex = this[_getCurrentDateIndex](index);
        if (!dart.test(picker_helper.DateRangePickerHelper.isDateAsCurrentMonthDate(this.widget.visibleDates[$_get](currentMonthIndex), picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), picker_helper.DateRangePickerHelper.canShowLeadingAndTrailingDates(this.widget.picker.monthViewSettings, this.widget.picker.isHijri), selectedDate, this.widget.picker.isHijri))) {
          return;
        }
        if (dart.test(picker_helper.DateRangePickerHelper.isDateWithInVisibleDates(this.widget.visibleDates, T.ListN().as(dart.dload(this.widget.picker.monthViewSettings, 'blackoutDates')), selectedDate))) {
          return;
        }
        this[_drawSelection](selectedDate);
        t80$ = this.widget;
        t81$ = this[_pickerStateDetails$0];
        t80$.updatePickerStateDetails(t81$);
        dart.nullCheck(this[_monthView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_monthView]).selectionNotifier.value);
      }
    }
    [_getCurrentDateIndex](index) {
      if (index == null) dart.nullFailed(I[10], 10110, 32, "index");
      let datesCount = dart.notNull(picker_helper.DateRangePickerHelper.getNumberOfWeeksInView(this.widget.picker.monthViewSettings, this.widget.picker.isHijri)) * 7;
      let currentMonthIndex = (datesCount / 2)[$truncate]();
      if (dart.test(this.widget.enableMultiView) && dart.notNull(index) >= datesCount) {
        currentMonthIndex = currentMonthIndex + datesCount;
      }
      return currentMonthIndex;
    }
    [_drawSingleSelectionForYear](selectedDate) {
      if (dart.test(this.widget.picker.toggleDaySelection) && dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(selectedDate, this[_pickerStateDetails$0].selectedDate, dart.dload(this.widget.controller, 'view')))) {
        selectedDate = null;
      }
      this[_pickerStateDetails$0].selectedDate = selectedDate;
    }
    [_drawMultipleSelectionForYear](selectedDate) {
      let t80;
      let selectedIndex = -1;
      if (this[_pickerStateDetails$0].selectedDates != null && dart.test(dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$isNotEmpty])) {
        selectedIndex = picker_helper.DateRangePickerHelper.getDateCellIndex(dart.nullCheck(this[_pickerStateDetails$0].selectedDates), selectedDate, dart.dload(this.widget.controller, 'view'));
      }
      if (selectedIndex === -1) {
        t80 = this[_pickerStateDetails$0];
        t80.selectedDates == null ? t80.selectedDates = [] : null;
        dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$add](selectedDate);
      } else {
        dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$removeAt](selectedIndex);
      }
    }
    [_drawRangeSelectionForYear](selectedDate) {
      if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && (dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') == null || dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate'), dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate'), dart.dload(this.widget.controller, 'view'))))) {
        let startDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
        let endDate = selectedDate;
        if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
          let temp = startDate;
          startDate = endDate;
          endDate = temp;
        }
        endDate = picker_helper.DateRangePickerHelper.getLastDate(endDate, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri);
        if (this.widget.picker.maxDate != null) {
          endDate = dart.equals(dart.dsend(endDate, 'isAfter', [this.widget.picker.maxDate]), true) ? this.widget.picker.maxDate : endDate;
        }
        if (this.widget.picker.minDate != null) {
          startDate = dart.equals(dart.dsend(startDate, 'isBefore', [this.widget.picker.minDate]), true) ? this.widget.picker.minDate : startDate;
        }
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
      } else {
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
      }
      this[_lastSelectedDate] = selectedDate;
    }
    [_drawRangesSelectionForYear](selectedDate) {
      let t80;
      t80 = this[_pickerStateDetails$0];
      t80.selectedRanges == null ? t80.selectedRanges = [] : null;
      let count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
      let _lastRange = null;
      if (dart.notNull(count) > 0) {
        _lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(count) - 1);
      }
      if (_lastRange != null && dart.dload(_lastRange, 'startDate') != null && (dart.dload(_lastRange, 'endDate') == null || dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(_lastRange, 'startDate'), dart.dload(_lastRange, 'endDate'), dart.dload(this.widget.controller, 'view'))))) {
        let startDate = dart.dload(_lastRange, 'startDate');
        let endDate = selectedDate;
        if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
          let temp = startDate;
          startDate = endDate;
          endDate = temp;
        }
        endDate = picker_helper.DateRangePickerHelper.getLastDate(endDate, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri);
        if (this.widget.picker.maxDate != null) {
          endDate = dart.equals(dart.dsend(endDate, 'isAfter', [this.widget.picker.maxDate]), true) ? this.widget.picker.maxDate : endDate;
        }
        if (this.widget.picker.minDate != null) {
          startDate = dart.equals(dart.dsend(startDate, 'isBefore', [this.widget.picker.minDate]), true) ? this.widget.picker.minDate : startDate;
        }
        let newRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_set](dart.notNull(count) - 1, newRange);
      } else {
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
      }
      count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
      this[_removeInterceptRanges](dart.nullCheck(this[_pickerStateDetails$0].selectedRanges), dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1));
      _lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1);
      if (count != dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length] && (dart.dload(_lastRange, 'endDate') == null || dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(_lastRange, 'endDate'), dart.dload(_lastRange, 'startDate'), dart.dload(this.widget.controller, 'view'))))) {
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$removeLast]();
      }
    }
    [_drawYearCellSelection](selectedDate) {
      switch (this.widget.picker.selectionMode) {
        case C[33] || CT.C33:
        {
          this[_drawSingleSelectionForYear](selectedDate);
          break;
        }
        case C[67] || CT.C67:
        {
          this[_drawMultipleSelectionForYear](selectedDate);
          break;
        }
        case C[101] || CT.C101:
        {
          this[_drawRangeSelectionForYear](selectedDate);
          break;
        }
        case C[169] || CT.C169:
        {
          this[_drawRangesSelectionForYear](selectedDate);
          break;
        }
        case C[135] || CT.C135:
        {
          this[_drawExtendableRangeSelection](selectedDate);
        }
      }
    }
    [_handleYearPanelSelection](details) {
      let t81, t80, t81$, t80$, t81$0, t80$0;
      if (details == null) dart.nullFailed(I[10], 10271, 41, "details");
      let _selectedIndex = this[_getYearViewIndex](details.dx, details.dy);
      let viewCount = dart.test(this.widget.enableMultiView) ? 2 : 1;
      if (_selectedIndex === -1 || dart.notNull(_selectedIndex) >= 12 * viewCount) {
        return;
      }
      let date = this.widget.visibleDates[$_get](_selectedIndex);
      t80 = this.widget;
      t81 = this[_pickerStateDetails$0];
      t80.getPickerStateDetails(t81);
      if (!dart.test(this.widget.picker.allowViewNavigation)) {
        if (!dart.test(picker_helper.DateRangePickerHelper.isBetweenMinMaxDateCell(date, this.widget.picker.minDate, this.widget.picker.maxDate, this.widget.picker.enablePastDates, dart.dload(this.widget.controller, 'view'), this.widget.picker.isHijri))) {
          return;
        }
        this[_drawYearCellSelection](date);
        t80$ = this.widget;
        t81$ = this[_pickerStateDetails$0];
        t80$.updatePickerStateDetails(t81$);
        dart.nullCheck(this[_yearView]).selectionNotifier.value = !dart.test(dart.nullCheck(this[_yearView]).selectionNotifier.value);
        return;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      switch (pickerView) {
        case C[367] || CT.C367:
        {
          break;
        }
        case C[370] || CT.C370:
        {
          {
            let year = (dart.notNull(core.int.as(dart.dload(date, 'year'))) / 10)[$truncate]();
            let minYear = (dart.notNull(core.int.as(dart.dload(this.widget.picker.minDate, 'year'))) / 10)[$truncate]();
            let maxYear = (dart.notNull(core.int.as(dart.dload(this.widget.picker.maxDate, 'year'))) / 10)[$truncate]();
            if (year < minYear || year > maxYear) {
              return;
            }
            this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.decade;
          }
          break;
        }
        case C[369] || CT.C369:
        {
          {
            let year = core.int.as(dart.dload(date, 'year'));
            let minYear = core.int.as(dart.dload(this.widget.picker.minDate, 'year'));
            let maxYear = core.int.as(dart.dload(this.widget.picker.maxDate, 'year'));
            if (dart.notNull(year) < dart.notNull(minYear) || dart.notNull(year) > dart.notNull(maxYear)) {
              return;
            }
            this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.year;
          }
          break;
        }
        case C[368] || CT.C368:
        {
          {
            let year = core.int.as(dart.dload(date, 'year'));
            let month = core.int.as(dart.dload(date, 'month'));
            let minYear = core.int.as(dart.dload(this.widget.picker.minDate, 'year'));
            let maxYear = core.int.as(dart.dload(this.widget.picker.maxDate, 'year'));
            let minMonth = core.int.as(dart.dload(this.widget.picker.minDate, 'month'));
            let maxMonth = core.int.as(dart.dload(this.widget.picker.maxDate, 'month'));
            if (dart.notNull(year) < dart.notNull(minYear) || year == minYear && dart.notNull(month) < dart.notNull(minMonth) || dart.notNull(year) > dart.notNull(maxYear) || year == maxYear && dart.notNull(month) > dart.notNull(maxMonth)) {
              return;
            }
            this[_pickerStateDetails$0].view = date_picker_manager.DateRangePickerView.month;
          }
        }
      }
      this[_pickerStateDetails$0].currentDate = date;
      t80$0 = this.widget;
      t81$0 = this[_pickerStateDetails$0];
      t80$0.updatePickerStateDetails(t81$0);
    }
    [_drawSingleSelectionForMonth](selectedDate) {
      if (dart.test(this.widget.picker.toggleDaySelection) && dart.test(core$.isSameDate(selectedDate, this[_pickerStateDetails$0].selectedDate))) {
        selectedDate = null;
      }
      this[_pickerStateDetails$0].selectedDate = selectedDate;
    }
    [_drawMultipleSelectionForMonth](selectedDate) {
      let t80;
      let selectedIndex = picker_helper.DateRangePickerHelper.isDateIndexInCollection(this[_pickerStateDetails$0].selectedDates, selectedDate);
      if (selectedIndex === -1) {
        t80 = this[_pickerStateDetails$0];
        t80.selectedDates == null ? t80.selectedDates = [] : null;
        dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$add](selectedDate);
      } else {
        dart.nullCheck(this[_pickerStateDetails$0].selectedDates)[$removeAt](selectedIndex);
      }
    }
    [_drawExtendableRangeSelection](selectedDate) {
      if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') != null) {
        let startDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
        let endDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate');
        if (dart.equals(dart.dsend(selectedDate, 'isAfter', [endDate]), true)) {
          endDate = selectedDate;
        } else if (dart.equals(dart.dsend(selectedDate, 'isBefore', [startDate]), true)) {
          startDate = selectedDate;
        } else if (dart.equals(dart.dsend(selectedDate, 'isAfter', [startDate]), true) && dart.equals(dart.dsend(selectedDate, 'isBefore', [endDate]), true)) {
          let overAllDifference = core.int.as(dart.dload(dart.dsend(endDate, 'difference', [startDate]), 'inDays'));
          let selectedDateIndex = core.int.as(dart.dload(dart.dsend(selectedDate, 'difference', [startDate]), 'inDays'));
          if (dart.notNull(selectedDateIndex) > dart.notNull(overAllDifference) / 2) {
            endDate = selectedDate;
          } else {
            startDate = selectedDate;
          }
        }
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
        this[_lastSelectedDate] = selectedDate;
      } else {
        let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
        switch (pickerView) {
          case C[367] || CT.C367:
          {
            this[_drawRangeSelectionForMonth](selectedDate);
            break;
          }
          case C[368] || CT.C368:
          case C[369] || CT.C369:
          case C[370] || CT.C370:
          {
            this[_drawRangeSelectionForYear](selectedDate);
          }
        }
      }
      this[_mouseHoverPosition].value = new picker_helper.HoveringDetails.new(null, null);
    }
    [_drawRangeSelectionForMonth](selectedDate) {
      if (this[_pickerStateDetails$0].selectedRange != null && dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate') != null && (dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate') == null || dart.test(core$.isSameDate(dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate'), dart.dload(this[_pickerStateDetails$0].selectedRange, 'endDate'))))) {
        let startDate = dart.dload(this[_pickerStateDetails$0].selectedRange, 'startDate');
        let endDate = selectedDate;
        if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
          let temp = startDate;
          startDate = endDate;
          endDate = temp;
        }
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
      } else {
        this[_pickerStateDetails$0].selectedRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null);
      }
      this[_lastSelectedDate] = selectedDate;
    }
    [_drawRangesSelectionForMonth](selectedDate) {
      let t80;
      t80 = this[_pickerStateDetails$0];
      t80.selectedRanges == null ? t80.selectedRanges = [] : null;
      let count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
      let lastRange = null;
      if (dart.notNull(count) > 0) {
        lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(count) - 1);
      }
      if (lastRange != null && dart.dload(lastRange, 'startDate') != null && (dart.dload(lastRange, 'endDate') == null || dart.test(core$.isSameDate(dart.dload(lastRange, 'startDate'), dart.dload(lastRange, 'endDate'))))) {
        let startDate = dart.dload(lastRange, 'startDate');
        let endDate = selectedDate;
        if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
          let temp = startDate;
          startDate = endDate;
          endDate = temp;
        }
        let _newRange = dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(startDate), T.HijriDateTimeN().as(endDate)) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(startDate), T.DateTimeN().as(endDate));
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_set](dart.notNull(count) - 1, _newRange);
      } else {
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$add](dart.test(this.widget.picker.isHijri) ? new hijri_date_picker_manager.HijriDateRange.new(T.HijriDateTimeN().as(selectedDate), null) : new date_picker_manager.PickerDateRange.new(T.DateTimeN().as(selectedDate), null));
      }
      count = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length];
      this[_removeInterceptRanges](dart.nullCheck(this[_pickerStateDetails$0].selectedRanges), dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1));
      lastRange = dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$_get](dart.notNull(dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length]) - 1);
      if (count != dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$length] && (dart.dload(lastRange, 'endDate') == null || dart.test(core$.isSameDate(dart.dload(lastRange, 'endDate'), dart.dload(lastRange, 'startDate'))))) {
        dart.nullCheck(this[_pickerStateDetails$0].selectedRanges)[$removeLast]();
      }
    }
    [_removeInterceptRangesForMonth](range, startDate, endDate, i, selectedRangeValue) {
      if (i == null) dart.nullFailed(I[10], 10484, 28, "i");
      if (range != null && !dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(range, selectedRangeValue)) && (dart.dload(range, 'startDate') != null && (startDate != null && dart.test(core$.isSameDate(dart.dload(range, 'startDate'), startDate)) || endDate != null && dart.test(core$.isSameDate(dart.dload(range, 'startDate'), endDate))) || dart.dload(range, 'endDate') != null && (startDate != null && dart.test(core$.isSameDate(dart.dload(range, 'endDate'), startDate)) || endDate != null && dart.test(core$.isSameDate(dart.dload(range, 'endDate'), endDate))) || dart.dload(range, 'startDate') != null && dart.dload(range, 'endDate') != null && (startDate != null && dart.test(core$.isDateWithInDateRange(dart.dload(range, 'startDate'), dart.dload(range, 'endDate'), startDate)) || endDate != null && dart.test(core$.isDateWithInDateRange(dart.dload(range, 'startDate'), dart.dload(range, 'endDate'), endDate))) || startDate != null && endDate != null && (dart.dload(range, 'startDate') != null && dart.test(core$.isDateWithInDateRange(startDate, endDate, dart.dload(range, 'startDate'))) || dart.dload(range, 'endDate') != null && dart.test(core$.isDateWithInDateRange(startDate, endDate, dart.dload(range, 'endDate')))) || dart.dload(range, 'startDate') != null && dart.dload(range, 'endDate') != null && startDate != null && endDate != null && (dart.equals(dart.dsend(dart.dload(range, 'startDate'), 'isAfter', [startDate]), true) && dart.equals(dart.dsend(dart.dload(range, 'endDate'), 'isBefore', [endDate]), true) || dart.equals(dart.dsend(dart.dload(range, 'endDate'), 'isAfter', [startDate]), true) && dart.equals(dart.dsend(dart.dload(range, 'startDate'), 'isBefore', [endDate]), true)))) {
        return i;
      }
      return null;
    }
    [_removeInterceptRangesForYear](range, startDate, endDate, i, selectedRangeValue) {
      if (i == null) dart.nullFailed(I[10], 10526, 28, "i");
      if (range == null || dart.test(picker_helper.DateRangePickerHelper.isRangeEquals(range, selectedRangeValue))) {
        return null;
      }
      if (dart.dload(range, 'startDate') != null && (startDate != null && dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(range, 'startDate'), startDate, dart.dload(this.widget.controller, 'view'))) || endDate != null && dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(range, 'startDate'), endDate, dart.dload(this.widget.controller, 'view'))))) {
        return i;
      }
      if (dart.dload(range, 'endDate') != null && (startDate != null && dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(range, 'endDate'), startDate, dart.dload(this.widget.controller, 'view'))) || endDate != null && dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(dart.dload(range, 'endDate'), endDate, dart.dload(this.widget.controller, 'view'))))) {
        return i;
      }
      if (dart.dload(range, 'startDate') != null && dart.dload(range, 'endDate') != null && (startDate != null && dart.test(this[_isDateWithInYearRange](dart.dload(range, 'startDate'), dart.dload(range, 'endDate'), startDate)) || endDate != null && dart.test(this[_isDateWithInYearRange](dart.dload(range, 'startDate'), dart.dload(range, 'endDate'), endDate)))) {
        return i;
      }
      if (startDate != null && endDate != null && (dart.dload(range, 'startDate') != null && dart.test(this[_isDateWithInYearRange](startDate, endDate, dart.dload(range, 'startDate'))) || dart.dload(range, 'endDate') != null && dart.test(this[_isDateWithInYearRange](startDate, endDate, dart.dload(range, 'endDate'))))) {
        return i;
      }
      if (dart.dload(range, 'startDate') != null && dart.dload(range, 'endDate') != null && startDate != null && endDate != null && (dart.equals(dart.dsend(dart.dload(range, 'startDate'), 'isAfter', [startDate]), true) && dart.equals(dart.dsend(dart.dload(range, 'endDate'), 'isBefore', [endDate]), true) || dart.equals(dart.dsend(dart.dload(range, 'endDate'), 'isAfter', [startDate]), true) && dart.equals(dart.dsend(dart.dload(range, 'startDate'), 'isBefore', [endDate]), true))) {
        return i;
      }
      return null;
    }
    [_isDateWithInYearRange](startDate, endDate, date) {
      if (startDate == null || endDate == null || date == null) {
        return false;
      }
      let pickerView = picker_helper.DateRangePickerHelper.getPickerView(dart.dload(this.widget.controller, 'view'));
      if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
        let temp = startDate;
        startDate = endDate;
        endDate = temp;
      }
      if ((dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(endDate, date, pickerView)) || dart.equals(dart.dsend(endDate, 'isAfter', [date]), true)) && (dart.test(picker_helper.DateRangePickerHelper.isSameCellDates(startDate, date, pickerView)) || dart.equals(dart.dsend(startDate, 'isBefore', [date]), true))) {
        return true;
      }
      return false;
    }
    [_removeInterceptRanges](selectedRanges, selectedRangeValue) {
      if (selectedRanges == null || dart.test(selectedRanges[$isEmpty]) || selectedRangeValue == null) {
        return;
      }
      let startDate = dart.dload(selectedRangeValue, 'startDate');
      let endDate = dart.dload(selectedRangeValue, 'endDate');
      if (startDate != null && endDate != null && dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
        let temp = startDate;
        startDate = endDate;
        endDate = temp;
      }
      let interceptIndex = T.JSArrayOfint().of([]);
      for (let i = 0; i < dart.notNull(selectedRanges[$length]); i = i + 1) {
        let range = selectedRanges[$_get](i);
        let index = null;
        switch (this[_pickerStateDetails$0].view) {
          case C[367] || CT.C367:
          {
            {
              index = this[_removeInterceptRangesForMonth](range, startDate, endDate, i, selectedRangeValue);
            }
            break;
          }
          case C[368] || CT.C368:
          case C[369] || CT.C369:
          case C[370] || CT.C370:
          {
            {
              index = this[_removeInterceptRangesForYear](range, startDate, endDate, i, selectedRangeValue);
            }
          }
        }
        if (index != null) {
          interceptIndex[$add](index);
        }
      }
      interceptIndex[$sort]();
      for (let i = dart.notNull(interceptIndex[$length]) - 1; i >= 0; i = i - 1) {
        selectedRanges[$removeAt](interceptIndex[$_get](i));
      }
    }
  };
  (date_picker._PickerViewState.new = function() {
    this[_pickerStateDetails$0] = new picker_helper.PickerStateArgs.new();
    this[_monthView] = null;
    this[_yearView] = null;
    this[_mouseHoverPosition] = new (T.ValueNotifierOfHoveringDetailsN()).new(null);
    this[_previousSelectedDate] = null;
    this[_isDragStart] = false;
    this[_isMobilePlatform] = true;
    this[_lastSelectedDate] = null;
    date_picker._PickerViewState.__proto__.new.call(this);
    ;
  }).prototype = date_picker._PickerViewState.prototype;
  dart.addTypeTests(date_picker._PickerViewState);
  dart.addTypeCaches(date_picker._PickerViewState);
  dart.setMethodSignature(date_picker._PickerViewState, () => ({
    __proto__: dart.getMethods(date_picker._PickerViewState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [_drawSelection]: dart.fnType(dart.void, [dart.dynamic]),
    [_addMonthView]: dart.fnType(framework.Widget, [ui.Locale, daterangepicker_theme.SfDateRangePickerThemeData, global_localizations.SfLocalizations]),
    [_getMonthView]: dart.fnType(month_view.MonthView, [ui.Locale, daterangepicker_theme.SfDateRangePickerThemeData, global_localizations.SfLocalizations, core.double, core.double]),
    [_getViewHeader]: dart.fnType(framework.Widget, [core.double, ui.Locale, daterangepicker_theme.SfDateRangePickerThemeData]),
    [_updateTapCallback]: dart.fnType(dart.void, [tap.TapUpDetails]),
    [_updateMouseHover]: dart.fnType(dart.void, [ui.Offset]),
    [_pointerEnterEvent]: dart.fnType(dart.void, [events.PointerEnterEvent]),
    [_pointerHoverEvent]: dart.fnType(dart.void, [events.PointerHoverEvent]),
    [_pointerExitEvent]: dart.fnType(dart.void, [events.PointerExitEvent]),
    [_addYearView]: dart.fnType(framework.Widget, [ui.Locale, global_localizations.SfLocalizations]),
    [_getYearView]: dart.fnType(year_view.YearView, [ui.Locale, global_localizations.SfLocalizations]),
    [_getDragStartCallback]: dart.fnType(dart.nullable(dart.fnType(dart.void, [drag_details.DragStartDetails])), []),
    [_getDragUpdateCallback]: dart.fnType(dart.nullable(dart.fnType(dart.void, [drag_details.DragUpdateDetails])), []),
    [_getYearViewIndex]: dart.fnType(core.int, [core.double, core.double]),
    [_getSelectedIndex$]: dart.fnType(core.int, [core.double, core.double]),
    [_dragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_dragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_updateSelectedRangesOnDragStart]: dart.fnType(dart.void, [dart.dynamic, dart.dynamic]),
    [_updateSelectedRangesOnDragUpdateMonth]: dart.fnType(dart.void, [dart.dynamic]),
    [_getSelectedRangeOnDragUpdate]: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    [_getSelectedRangeOnDragUpdateYear]: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    [_getFirstDate]: dart.fnType(dart.dynamic, [dart.dynamic, core.bool]),
    [_isSameOrBeforeDateCell]: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    [_isSameOrAfterDateCell]: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    [_updateSelectedRangesOnDragUpdateYear]: dart.fnType(dart.void, [dart.dynamic]),
    [_dragStartOnYear]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
    [_dragUpdateOnYear]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
    [_handleTouch]: dart.fnType(dart.void, [ui.Offset, tap.TapUpDetails]),
    [_getCurrentDateIndex]: dart.fnType(core.int, [core.int]),
    [_drawSingleSelectionForYear]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawMultipleSelectionForYear]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawRangeSelectionForYear]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawRangesSelectionForYear]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawYearCellSelection]: dart.fnType(dart.void, [dart.dynamic]),
    [_handleYearPanelSelection]: dart.fnType(dart.void, [ui.Offset]),
    [_drawSingleSelectionForMonth]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawMultipleSelectionForMonth]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawExtendableRangeSelection]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawRangeSelectionForMonth]: dart.fnType(dart.void, [dart.dynamic]),
    [_drawRangesSelectionForMonth]: dart.fnType(dart.void, [dart.dynamic]),
    [_removeInterceptRangesForMonth]: dart.fnType(dart.nullable(core.int), [dart.dynamic, dart.dynamic, dart.dynamic, core.int, dart.dynamic]),
    [_removeInterceptRangesForYear]: dart.fnType(dart.nullable(core.int), [dart.dynamic, dart.dynamic, dart.dynamic, core.int, dart.dynamic]),
    [_isDateWithInYearRange]: dart.fnType(core.bool, [dart.dynamic, dart.dynamic, dart.dynamic]),
    [_removeInterceptRanges]: dart.fnType(dart.void, [dart.nullable(core.List), dart.dynamic])
  }));
  dart.setLibraryUri(date_picker._PickerViewState, I[11]);
  dart.setFieldSignature(date_picker._PickerViewState, () => ({
    __proto__: dart.getFields(date_picker._PickerViewState.__proto__),
    [_pickerStateDetails$0]: dart.finalFieldType(picker_helper.PickerStateArgs),
    [_monthView]: dart.fieldType(dart.nullable(month_view.MonthView)),
    [_yearView]: dart.fieldType(dart.nullable(year_view.YearView)),
    [_mouseHoverPosition]: dart.finalFieldType(change_notifier.ValueNotifier$(dart.nullable(picker_helper.HoveringDetails))),
    [_previousSelectedDate]: dart.fieldType(dart.dynamic),
    [_isDragStart]: dart.fieldType(core.bool),
    [_isMobilePlatform]: dart.fieldType(core.bool),
    [_lastSelectedDate]: dart.fieldType(dart.dynamic)
  }));
  date_picker._raiseSelectionChangedCallback = function _raiseSelectionChangedCallback(picker, opts) {
    let t80;
    if (picker == null) dart.nullFailed(I[10], 56, 56, "picker");
    let value = opts && 'value' in opts ? opts.value : null;
    t80 = picker.onSelectionChanged;
    t80 == null ? null : t80(new date_picker_manager.DateRangePickerSelectionChangedArgs.new(value));
  };
  date_picker._raisePickerViewChangedCallback = function _raisePickerViewChangedCallback(picker, opts) {
    let t81, t80, t81$, t80$;
    if (picker == null) dart.nullFailed(I[10], 63, 57, "picker");
    let visibleDateRange = opts && 'visibleDateRange' in opts ? opts.visibleDateRange : null;
    let view = opts && 'view' in opts ? opts.view : null;
    if (picker.onViewChanged == null) {
      return;
    }
    if (dart.test(picker.isHijri)) {
      t80 = picker;
      t81 = new hijri_date_picker_manager.HijriDatePickerViewChangedArgs.new(hijri_date_picker_manager.HijriDateRange.as(visibleDateRange), hijri_date_picker_manager.HijriDatePickerView.as(view));
      dart.dsend(t80, 'onViewChanged', [t81]);
    } else {
      t80$ = picker;
      t81$ = new date_picker_manager.DateRangePickerViewChangedArgs.new(date_picker_manager.PickerDateRange.as(visibleDateRange), date_picker_manager.DateRangePickerView.as(view));
      dart.dsend(t80$, 'onViewChanged', [t81$]);
    }
  };
  date_picker._getMonthHeaderText = function _getMonthHeaderText(startIndex, endIndex, dates, middleIndex, datesCount, isHijri, numberOfWeeksInView, monthFormat, enableMultiView, headerStyle, navigationDirection, locale, localizations) {
    if (startIndex == null) dart.nullFailed(I[10], 10680, 9, "startIndex");
    if (endIndex == null) dart.nullFailed(I[10], 10681, 9, "endIndex");
    if (dates == null) dart.nullFailed(I[10], 10682, 19, "dates");
    if (middleIndex == null) dart.nullFailed(I[10], 10683, 9, "middleIndex");
    if (datesCount == null) dart.nullFailed(I[10], 10684, 9, "datesCount");
    if (isHijri == null) dart.nullFailed(I[10], 10685, 10, "isHijri");
    if (numberOfWeeksInView == null) dart.nullFailed(I[10], 10686, 9, "numberOfWeeksInView");
    if (enableMultiView == null) dart.nullFailed(I[10], 10688, 10, "enableMultiView");
    if (headerStyle == null) dart.nullFailed(I[10], 10689, 32, "headerStyle");
    if (navigationDirection == null) dart.nullFailed(I[10], 10690, 40, "navigationDirection");
    if (locale == null) dart.nullFailed(I[10], 10691, 12, "locale");
    if (localizations == null) dart.nullFailed(I[10], 10692, 21, "localizations");
    if (!dart.test(isHijri) && numberOfWeeksInView !== 6 && !dart.equals(dart.dload(dates[$_get](startIndex), 'month'), dart.dload(dates[$_get](endIndex), 'month'))) {
      let monthTextFormat = monthFormat == null || monthFormat[$isEmpty] ? "MMM" : monthFormat;
      let endIndex = dart.notNull(dates[$length]) - 1;
      if (dart.test(enableMultiView) && headerStyle.textAlign == ui.TextAlign.center) {
        endIndex = endIndex;
      }
      let startText = dart.notNull(dart.toString(new date_format.DateFormat.new(monthTextFormat, dart.toString(locale)).format(core.DateTime.as(dates[$_get](startIndex))))) + " " + dart.notNull(dart.toString(dart.dload(dates[$_get](startIndex), 'year')));
      let endText = dart.notNull(dart.toString(new date_format.DateFormat.new(monthTextFormat, dart.toString(locale)).format(core.DateTime.as(dates[$_get](endIndex))))) + " " + dart.notNull(dart.toString(dart.dload(dates[$_get](endIndex), 'year')));
      if (startText === endText) {
        return startText;
      }
      return startText + " - " + endText;
    } else {
      let monthTextFormat = monthFormat == null || monthFormat[$isEmpty] ? dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical ? "MMM" : "MMMM" : monthFormat;
      let text = null;
      let middleDate = dates[$_get](middleIndex);
      if (dart.test(isHijri)) {
        text = dart.notNull(picker_helper.DateRangePickerHelper.getHijriMonthText(middleDate, localizations, monthTextFormat)) + " " + dart.notNull(dart.toString(dart.dload(middleDate, 'year')));
      } else {
        text = dart.notNull(dart.toString(new date_format.DateFormat.new(monthTextFormat, dart.toString(locale)).format(core.DateTime.as(middleDate)))) + " " + dart.notNull(dart.toString(dart.dload(middleDate, 'year')));
      }
      if (dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical && numberOfWeeksInView !== 6 && dart.equals(dart.dload(dates[$_get](startIndex), 'month'), dart.dload(dates[$_get](endIndex), 'month'))) {
        return text;
      }
      if (dart.test(enableMultiView) && headerStyle.textAlign != ui.TextAlign.center || dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
        middleDate = dates[$_get](dart.notNull(datesCount) + dart.notNull(middleIndex));
        if (dart.test(isHijri)) {
          return dart.notNull(text) + " - " + dart.notNull(picker_helper.DateRangePickerHelper.getHijriMonthText(middleDate, localizations, monthTextFormat)) + " " + dart.notNull(dart.toString(dart.dload(middleDate, 'year')));
        } else {
          return dart.notNull(text) + " - " + dart.notNull(dart.toString(new date_format.DateFormat.new(monthTextFormat, dart.toString(locale)).format(core.DateTime.as(middleDate)))) + " " + dart.notNull(dart.toString(dart.dload(middleDate, 'year')));
        }
      }
      return text;
    }
  };
  date_picker._getHeaderText = function _getHeaderText$(dates, view, index, isHijri, numberOfWeeksInView, monthFormat, enableMultiView, headerStyle, navigationDirection, locale, localizations) {
    if (dates == null) dart.nullFailed(I[10], 10777, 19, "dates");
    if (view == null) dart.nullFailed(I[10], 10778, 25, "view");
    if (index == null) dart.nullFailed(I[10], 10779, 9, "index");
    if (isHijri == null) dart.nullFailed(I[10], 10780, 10, "isHijri");
    if (numberOfWeeksInView == null) dart.nullFailed(I[10], 10781, 9, "numberOfWeeksInView");
    if (enableMultiView == null) dart.nullFailed(I[10], 10783, 10, "enableMultiView");
    if (headerStyle == null) dart.nullFailed(I[10], 10784, 32, "headerStyle");
    if (navigationDirection == null) dart.nullFailed(I[10], 10785, 40, "navigationDirection");
    if (locale == null) dart.nullFailed(I[10], 10786, 12, "locale");
    if (localizations == null) dart.nullFailed(I[10], 10787, 21, "localizations");
    let count = dart.test(enableMultiView) ? 2 : 1;
    let datesCount = (dart.notNull(dates[$length]) / count)[$truncate]();
    let startIndex = dart.notNull(index) * datesCount;
    let endIndex = (dart.notNull(index) + 1) * datesCount - 1;
    let middleIndex = startIndex + (datesCount / 2)[$truncate]();
    switch (view) {
      case C[367] || CT.C367:
      {
        {
          return date_picker._getMonthHeaderText(startIndex, endIndex, dates, middleIndex, datesCount, isHijri, numberOfWeeksInView, monthFormat, enableMultiView, headerStyle, navigationDirection, locale, localizations);
        }
      }
      case C[368] || CT.C368:
      {
        {
          let date = dates[$_get](middleIndex);
          if (dart.test(enableMultiView) && headerStyle.textAlign != ui.TextAlign.center || dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
            return dart.notNull(dart.toString(dart.dload(date, 'year'))) + " - " + dart.notNull(dart.toString(dart.dload(dates[$_get](datesCount + middleIndex), 'year')));
          }
          return dart.toString(dart.dload(date, 'year'));
        }
      }
      case C[369] || CT.C369:
      {
        {
          let year = (dart.notNull(core.int.as(dart.dload(dates[$_get](middleIndex), 'year'))) / 10)[$truncate]() * 10;
          if (dart.test(enableMultiView) && headerStyle.textAlign != ui.TextAlign.center || dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
            return year[$toString]() + " - " + dart.notNull(dart.toString(dart.dsend(dart.dsend(dart.dsend(dart.dload(dates[$_get](datesCount + middleIndex), 'year'), '~/', [10]), '*', [10]), '+', [9])));
          }
          return year[$toString]() + " - " + (year + 9)[$toString]();
        }
      }
      case C[370] || CT.C370:
      {
        {
          let year = (dart.notNull(core.int.as(dart.dload(dates[$_get](middleIndex), 'year'))) / 100)[$truncate]() * 100;
          if (dart.test(enableMultiView) && headerStyle.textAlign != ui.TextAlign.center || dart.test(enableMultiView) && navigationDirection == date_picker_manager.DateRangePickerNavigationDirection.vertical) {
            return year[$toString]() + " - " + dart.notNull(dart.toString(dart.dsend(dart.dsend(dart.dsend(dart.dload(dates[$_get](datesCount + middleIndex), 'year'), '~/', [100]), '*', [100]), '+', [99])));
          }
          return year[$toString]() + " - " + (year + 99)[$toString]();
        }
      }
    }
  };
  date_picker._getTextWidgetWidth = function _getTextWidgetWidth(text, height, width, context, opts) {
    if (text == null) dart.nullFailed(I[10], 10859, 12, "text");
    if (height == null) dart.nullFailed(I[10], 10859, 25, "height");
    if (width == null) dart.nullFailed(I[10], 10859, 40, "width");
    if (context == null) dart.nullFailed(I[10], 10859, 60, "context");
    let style = opts && 'style' in opts ? opts.style : null;
    if (style == null) dart.nullFailed(I[10], 10860, 25, "style");
    let widthPadding = opts && 'widthPadding' in opts ? opts.widthPadding : 10;
    if (widthPadding == null) dart.nullFailed(I[10], 10861, 12, "widthPadding");
    let heightPadding = opts && 'heightPadding' in opts ? opts.heightPadding : 10;
    if (heightPadding == null) dart.nullFailed(I[10], 10862, 12, "heightPadding");
    let textWidget = new text$.Text.new(text, {style: style, maxLines: 1, softWrap: false, textDirection: ui.TextDirection.ltr, textAlign: ui.TextAlign.left, $creationLocationd_0dea112b090073317d4: C[1023] || CT.C1023}).build(context);
    let richTextWidget = basic.RichText.is(textWidget) ? textWidget : null;
    let renderObject = dart.nullCheck(richTextWidget).createRenderObject(context);
    renderObject.layout(new box$.BoxConstraints.new({minWidth: width, maxWidth: width, minHeight: height, maxHeight: height}));
    let textBox = renderObject.getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: 0, extentOffset: text.length}));
    let textWidth = 0.0;
    let textHeight = 0.0;
    for (let box of textBox) {
      textWidth = textWidth + (dart.notNull(box.right) - dart.notNull(box.left));
      let currentBoxHeight = dart.notNull(box.bottom) - dart.notNull(box.top);
      textHeight = textHeight > currentBoxHeight ? textHeight : currentBoxHeight;
    }
    return new ui.Size.new(textWidth + dart.notNull(widthPadding), textHeight + dart.notNull(heightPadding));
  };
  date_picker._isSwipeInteractionEnabled = function _isSwipeInteractionEnabled(enableSwipeSelection, navigationMode) {
    if (enableSwipeSelection == null) dart.nullFailed(I[10], 10901, 10, "enableSwipeSelection");
    if (navigationMode == null) dart.nullFailed(I[10], 10901, 62, "navigationMode");
    return dart.test(enableSwipeSelection) && navigationMode != date_picker_manager.DateRangePickerNavigationMode.scroll;
  };
  date_picker._isMultiViewEnabled = function _isMultiViewEnabled(picker) {
    if (picker == null) dart.nullFailed(I[10], 10906, 45, "picker");
    return dart.test(picker.enableMultiView) && picker.navigationMode != date_picker_manager.DateRangePickerNavigationMode.scroll;
  };
  dart.trackLibraries("packages/syncfusion_flutter_datepicker/src/date_picker/year_view.dart", {
    "package:syncfusion_flutter_datepicker/src/date_picker/year_view.dart": year_view,
    "package:syncfusion_flutter_datepicker/src/date_picker/month_view.dart": month_view,
    "package:syncfusion_flutter_datepicker/src/date_picker/hijri_date_picker_manager.dart": hijri_date_picker_manager,
    "package:syncfusion_flutter_datepicker/src/date_picker/picker_helper.dart": picker_helper,
    "package:syncfusion_flutter_datepicker/src/date_picker/date_picker_manager.dart": date_picker_manager,
    "package:syncfusion_flutter_datepicker/src/date_picker/date_picker.dart": date_picker,
    "package:syncfusion_flutter_datepicker/datepicker.dart": datepicker
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["year_view.dart","month_view.dart","hijri_date_picker_manager.dart","date_picker_manager.dart","picker_helper.dart","date_picker.dart"],"names":[],"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;;;;;;;UA0H+D;AAC3D,YAAO,gDACH,mBACA,gBACA,cACA,cACA,sBACA,0BACA,qBACA,YACA,sBACA,yBACA,sBACA,uBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,sBACA,YACA,aACA,kBACA,aACA,WACA,cACA,0BACA,oBACA;IACN;uBAIiB,SAAsC;;UAAtC;gDAAsC;;AA8BtC,WA7Bf,YAAY;MAAZ;AACI,0BAAe;AACf,uBAAY;AACZ,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,iCAAsB;AACtB,4BAAiB;AACjB,mBAAQ;AACR,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,0BAAe;AACf,6BAAkB;AAClB,6BAAkB;AAClB,mBAAQ;AACR,oBAAS;AACT,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,yBAAc;AACd,oBAAS;AACT,kBAAO;;;IACb;;yDAxLS,cACA,WACA,SACA,SACA,iBACA,qBACA,gBACA,aACA,OACA,iBACA,QACA,oBACA,iBACA,kBACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,cACA,iBACA,mBACA,iBACA,OACA,QACA,MACA,SACA,eACA;QA7BA;QAIA;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QAQA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IA9BlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,+EAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAoRiC;AAC7D,YAAO,kDACH,mBACA,gBACA,cACA,cACA,sBACA,0BACA,qBACA,YACA,sBACA,yBACA,sBACA,uBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,sBACA,YACA,aACA,kBACA,aACA,WACA,cACA,0BACA,oBACA;IACN;uBAIiB,SAAwC;;UAAxC;kDAAwC;;AA8BxC,WA7Bf,YAAY;MAAZ;AACI,0BAAe;AACf,uBAAY;AACZ,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,iCAAsB;AACtB,4BAAiB;AACjB,mBAAQ;AACR,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,2BAAgB;AAChB,6BAAkB;AAClB,6BAAkB;AAClB,mBAAQ;AACR,oBAAS;AACT,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,yBAAc;AACd,oBAAS;AACT,kBAAO;;;IACb;;wDAxLS,cACA,WACA,SACA,SACA,iBACA,qBACA,gBACA,aACA,OACA,iBACA,QACA,oBACA,iBACA,kBACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,eACA,iBACA,mBACA,iBACA,OACA,QACA,MACA,SACA,eACA;QA7BA;QAIA;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QAQA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IA9BlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,8EAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAoR8B;AAC1D,YAAO,+CACH,mBACA,gBACA,cACA,cACA,sBACA,0BACA,qBACA,YACA,sBACA,yBACA,sBACA,uBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,sBACA,YACA,aACA,kBACA,aACA,WACA,cACA,0BACA,oBACA;IACN;uBAIiB,SAAqC;;UAArC;+CAAqC;;AA8BrC,WA7Bf,YAAY;MAAZ;AACI,0BAAe;AACf,uBAAY;AACZ,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,iCAAsB;AACtB,4BAAiB;AACjB,mBAAQ;AACR,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,2BAAgB;AAChB,6BAAkB;AAClB,6BAAkB;AAClB,mBAAQ;AACR,oBAAS;AACT,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,yBAAc;AACd,oBAAS;AACT,kBAAO;;;IACb;;wDAxLS,cACA,WACA,SACA,SACA,iBACA,qBACA,gBACA,aACA,OACA,iBACA,QACA,oBACA,iBACA,kBACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,eACA,iBACA,mBACA,iBACA,OACA,QACA,MACA,SACA,eACA;QA7BA;QAIA;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QAQA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IA9BlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,8EAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsRb;AACf,YAAO,yDACH,mBACA,gBACA,cACA,cACA,sBACA,0BACA,qBACA,YACA,sBACA,yBACA,sBACA,uBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,sBACA,YACA,aACA,kBACA,aACA,WACA,cACA,0BACA,oBACA;IACN;uBAGqC,SACK;;UADL;yDACK;;AA8BzB,WA7Bf,YAAY;MAAZ;AACI,0BAAe;AACf,uBAAY;AACZ,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,iCAAsB;AACtB,4BAAiB;AACjB,mBAAQ;AACR,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,2BAAgB;AAChB,6BAAkB;AAClB,6BAAkB;AAClB,mBAAQ;AACR,oBAAS;AACT,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,yBAAc;AACd,oBAAS;AACT,kBAAO;;;IACb;;kEAzLS,cACA,WACA,SACA,SACA,iBACA,qBACA,gBACA,aACA,OACA,iBACA,QACA,oBACA,iBACA,kBACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,eACA,iBACA,mBACA,iBACA,OACA,QACA,MACA,SACA,eACA;QA7BA;QAIA;QAEA;QAEA;QACA;QACA;QACA;QACA;QACA;QAQA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IA9BlB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,wFAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsRmC;AAC/D,YAAO,oDACH,mBACA,gBACA,cACA,cACA,sBACA,0BACA,qBACA,YACA,sBACA,yBACA,sBACA,uBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,sBACA,YACA,aACA,kBACA,aACA,WACA,cACA,0BACA,oBACA;IACN;uBAIiB,SAA0C;;UAA1C;oDAA0C;;AA8B1C,WA7Bf,YAAY;MAAZ;AACI,0BAAe;AACf,uBAAY;AACZ,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,iCAAsB;AACtB,4BAAiB;AACjB,mBAAQ;AACR,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AA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CP,AAAO,mBACP,wBACA,AAAO,qBACP,AAAO,2BACP,AAAO,iCACP,AAAO,8BACP,AAAO,6BACP,qCACS;;;;;;AAIb,kBAAO,8DACH,AAAO,0BACP,AAAO,sBACP,AAAO,uBACP,AAAO,gCACP,AAAO,4BACP,AAAO,4BACP,AAAO,sCACP,AAAO,oCACP,AAAO,iCACP,AAAO,6BACP,AAAO,mBACP,AAAO,iCACP,AAAO,qBACP,AAAO,qBACP,AAAO,6BACP,AAAO,wCACP,AAAO,2BACP,AAAO,0BACP,AAAO,yBACP,AAAO,4BACP,AAAO,6BACP,AAAO,gCACP,AAAO,6BACP,AAAO,8BACP,AAAO,+BACP,AAAO,6BACP,AAAO,oBACP,AAAO,mBACP,yBACA,AAAO,qBACP,AAAO,2BACP,AAAO,iCACP,AAAO,8BACP,AAAO,6BACP,qCACS;;;;IAGrB;;;IArasB,6BAAsB;IACpC;IACO;IACP;IACO;IACI,mBAAoB;mDAC3B;;;EAgad;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmHmB;AACf,YAAO,0DACH,mBACA,eACA,gBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,YACA,0BACA,cACA,cACA,sBACA,iCACA,oBACA,mBACA,kBACA,qBACA,sBACA,yBACA,sBACA,uBACA,wBACA,sBACA,aACA,YACA,cACA,0BACA,oBACA,mBACA,uBACA,sBACA;IACN;uBAGqC,SACK;;UADL;0DACK;;AAoCO,WAnC/C,YAAY;MAAZ;AACI,0BAAe;AACf,sBAAW;AACX,uBAAY;AACZ,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,6BAAkB;AAClB,mBAAQ;AACR,iCAAsB;AACtB,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,wCAA6B;AAC7B,2BAAgB;AAChB,0BAAe;AACf,yBAAc;AACd,4BAAiB;AACjB,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,+BAAoB;AACpB,6BAAkB;AAClB,oBAAS;AACT,mBAAQ;AACR,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,0BAAe;AACf,8BAAmB;AACnB,6BAAkB;AAClB,kCAAuB;;;IAC7B;;mEA5LS,cACA,UACA,WACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,iBACA,OACA,qBACA,SACA,SACA,iBACA,4BACA,eACA,cACA,aACA,gBACA,iBACA,oBACA,iBACA,kBACA,mBACA,iBACA,QACA,OACA,cACA,SACA,eACA,qBACA,kBACA,iBACA;QAlCA;QACA;QAQA;QACA;QAIA;QACA;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACS;;;IAnCT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,yFAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2Qb;AACf,YAAO,yDACH,mBACA,eACA,gBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,YACA,0BACA,cACA,cACA,sBACA,iCACA,oBACA,mBACA,kBACA,qBACA,sBACA,yBACA,sBACA,uBACA,wBACA,sBACA,aACA,YACA,cACA,0BACA,oBACA,oBACA,uBACA,sBACA;IACN;uBAIiB,SAA8C;;UAA9C;yDAA8C;;AAoCd,WAnC/C,YAAY;MAAZ;AACI,0BAAe;AACf,sBAAW;AACX,uBAAY;AACZ,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,6BAAkB;AAClB,mBAAQ;AACR,iCAAsB;AACtB,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,wCAA6B;AAC7B,2BAAgB;AAChB,0BAAe;AACf,yBAAc;AACd,4BAAiB;AACjB,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,+BAAoB;AACpB,6BAAkB;AAClB,oBAAS;AACT,mBAAQ;AACR,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,2BAAgB;AAChB,8BAAmB;AACnB,6BAAkB;AAClB,kCAAuB;;;IAC7B;;kEA3LS,cACA,UACA,WACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,iBACA,OACA,qBACA,SACA,SACA,iBACA,4BACA,eACA,cACA,aACA,gBACA,iBACA,oBACA,iBACA,kBACA,mBACA,iBACA,QACA,OACA,eACA,SACA,eACA,qBACA,kBACA,iBACA;QAlCA;QACA;QAQA;QACA;QAIA;QACA;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACS;;;IAnCT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,wFAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2Qb;AACf,YAAO,yDACH,mBACA,eACA,gBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,YACA,0BACA,cACA,cACA,sBACA,iCACA,oBACA,mBACA,kBACA,qBACA,sBACA,yBACA,sBACA,uBACA,wBACA,sBACA,aACA,YACA,cACA,0BACA,oBACA,oBACA,uBACA,sBACA;IACN;uBAIiB,SAA8C;;UAA9C;yDAA8C;;AAoCd,WAnC/C,YAAY;MAAZ;AACI,0BAAe;AACf,sBAAW;AACX,uBAAY;AACZ,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,6BAAkB;AAClB,mBAAQ;AACR,iCAAsB;AACtB,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,wCAA6B;AAC7B,2BAAgB;AAChB,0BAAe;AACf,yBAAc;AACd,4BAAiB;AACjB,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,+BAAoB;AACpB,6BAAkB;AAClB,oBAAS;AACT,mBAAQ;AACR,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,2BAAgB;AAChB,8BAAmB;AACnB,6BAAkB;AAClB,kCAAuB;;;IAC7B;;kEA5LS,cACA,UACA,WACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,iBACA,OACA,qBACA,SACA,SACA,iBACA,4BACA,eACA,cACA,aACA,gBACA,iBACA,oBACA,iBACA,kBACA,mBACA,iBACA,QACA,OACA,eACA,SACA,eACA,qBACA,kBACA,iBACA;QAlCA;QACA;QAQA;QACA;QAIA;QACA;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IAnClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,wFAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4Qb;AACf,YAAO,mEACH,mBACA,eACA,gBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,YACA,0BACA,cACA,cACA,sBACA,iCACA,oBACA,mBACA,kBACA,qBACA,sBACA,yBACA,sBACA,uBACA,wBACA,sBACA,aACA,YACA,cACA,0BACA,oBACA,oBACA,uBACA,sBACA;IACN;uBAGqC,SACc;;UADd;mEACc;;AAoCF,WAnC/C,YAAY;MAAZ;AACI,0BAAe;AACf,sBAAW;AACX,uBAAY;AACZ,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,6BAAkB;AAClB,mBAAQ;AACR,iCAAsB;AACtB,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,wCAA6B;AAC7B,2BAAgB;AAChB,0BAAe;AACf,yBAAc;AACd,4BAAiB;AACjB,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,+BAAoB;AACpB,6BAAkB;AAClB,oBAAS;AACT,mBAAQ;AACR,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,2BAAgB;AAChB,8BAAmB;AACnB,6BAAkB;AAClB,kCAAuB;;;IAC7B;;4EA5LS,cACA,UACA,WACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,iBACA,OACA,qBACA,SACA,SACA,iBACA,4BACA,eACA,cACA,aACA,gBACA,iBACA,oBACA,iBACA,kBACA,mBACA,iBACA,QACA,OACA,eACA,SACA,eACA,qBACA,kBACA,iBACA;QAlCA;QACA;QAQA;QACA;QAIA;QACA;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IAnClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,kGAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4Qb;AACf,YAAO,8DACH,mBACA,eACA,gBACA,yBACA,qBACA,qBACA,+BACA,6BACA,0BACA,sBACA,YACA,0BACA,cACA,cACA,sBACA,iCACA,oBACA,mBACA,kBACA,qBACA,sBACA,yBACA,sBACA,uBACA,wBACA,sBACA,aACA,YACA,cACA,0BACA,oBACA,qBACA,uBACA,sBACA;IACN;uBAGqC,SACS;;UADT;8DACS;;AAoCG,WAnC/C,YAAY;MAAZ;AACI,0BAAe;AACf,sBAAW;AACX,uBAAY;AACZ,gCAAqB;AACrB,4BAAiB;AACjB,4BAAiB;AACjB,sCAA2B;AAC3B,oCAAyB;AACzB,iCAAsB;AACtB,6BAAkB;AAClB,mBAAQ;AACR,iCAAsB;AACtB,qBAAU;AACV,qBAAU;AACV,6BAAkB;AAClB,wCAA6B;AAC7B,2BAAgB;AAChB,0BAAe;AACf,yBAAc;AACd,4BAAiB;AACjB,6BAAkB;AAClB,gCAAqB;AACrB,6BAAkB;AAClB,8BAAmB;AACnB,+BAAoB;AACpB,6BAAkB;AAClB,oBAAS;AACT,mBAAQ;AACR,qBAAU;AACV,2BAAgB;AAChB,iCAAsB;AACtB,4BAAiB;AACjB,8BAAmB;AACnB,6BAAkB;AAClB,kCAAuB;;;IAC7B;;uEA5LS,cACA,UACA,WACA,oBACA,gBACA,gBACA,0BACA,wBACA,qBACA,iBACA,OACA,qBACA,SACA,SACA,iBACA,4BACA,eACA,cACA,aACA,gBACA,iBACA,oBACA,iBACA,kBACA,mBACA,iBACA,QACA,OACA,gBACA,SACA,eACA,qBACA,kBACA,iBACA;QAlCA;QACA;QAQA;QACA;QAIA;QACA;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACkB;;;IAnClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AAEH,6FAAgB,OAAO;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2JuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4Cf;IAAgB;;UAEnB;AACjD,UAAqB,YAAjB,yBAAoB,KAAK;AAC3B;;AAGsB,MAAxB,0BAAmB,KAAK;AACxB,UAAI,AAAW,oBAAG;AACA,QAAhB;;AAEiB,QAAjB;;IAEJ;;AAImC;IAAqB;;UAExB;AAC9B,UAAI,AAAsB,gCAA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","file":"../../../../../../../../../../D:/packages/syncfusion_flutter_datepicker/src/date_picker/year_view.dart.lib.js"}');
  // Exports:
  return {
    src__date_picker__year_view: year_view,
    src__date_picker__month_view: month_view,
    src__date_picker__hijri_date_picker_manager: hijri_date_picker_manager,
    src__date_picker__picker_helper: picker_helper,
    src__date_picker__date_picker_manager: date_picker_manager,
    src__date_picker__date_picker: date_picker,
    datepicker: datepicker
  };
}));

//# sourceMappingURL=year_view.dart.lib.js.map
